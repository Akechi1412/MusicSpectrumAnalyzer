
MusicSpectrumAnalyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009220  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800932c  0800932c  0001932c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800939c  0800939c  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800939c  0800939c  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800939c  0800939c  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800939c  0800939c  0001939c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093a0  080093a0  000193a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  080093a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c24  2000017c  08009520  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000da0  08009520  00020da0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013867  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031b8  00000000  00000000  00033a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  00036bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001058  00000000  00000000  00037d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8a6  00000000  00000000  00038df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001521d  00000000  00000000  00053696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e8f8  00000000  00000000  000688b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f71ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049a0  00000000  00000000  000f71fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08009314 	.word	0x08009314

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08009314 	.word	0x08009314

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f001 f842 	bl	80011d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f81e 	bl	8000194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8f8 	bl	800034c <MX_GPIO_Init>
  MX_TIM2_Init();
 800015c:	f000 f8aa 	bl	80002b4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000160:	f008 fc14 	bl	800898c <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000164:	f000 f870 	bl	8000248 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  RGBLedMatrix_Init();
 8000168:	f000 f9ae 	bl	80004c8 <RGBLedMatrix_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800016c:	4807      	ldr	r0, [pc, #28]	; (800018c <main+0x40>)
 800016e:	f003 ff57 	bl	8004020 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (RX_buffer[0] != '\0') {
 8000172:	4b07      	ldr	r3, [pc, #28]	; (8000190 <main+0x44>)
 8000174:	781b      	ldrb	r3, [r3, #0]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d0fb      	beq.n	8000172 <main+0x26>
		  CDC_ReceivedCallback();
 800017a:	f000 fe91 	bl	8000ea0 <CDC_ReceivedCallback>
//		  CDC_Transmit_FS(RX_buffer, CDC_BUFFER_SIZE);
		  memset(RX_buffer, '\0', sizeof(RX_buffer));
 800017e:	2240      	movs	r2, #64	; 0x40
 8000180:	2100      	movs	r1, #0
 8000182:	4803      	ldr	r0, [pc, #12]	; (8000190 <main+0x44>)
 8000184:	f009 f8be 	bl	8009304 <memset>
	  if (RX_buffer[0] != '\0') {
 8000188:	e7f3      	b.n	8000172 <main+0x26>
 800018a:	bf00      	nop
 800018c:	200001f0 	.word	0x200001f0
 8000190:	20000238 	.word	0x20000238

08000194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b094      	sub	sp, #80	; 0x50
 8000198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800019e:	2228      	movs	r2, #40	; 0x28
 80001a0:	2100      	movs	r1, #0
 80001a2:	4618      	mov	r0, r3
 80001a4:	f009 f8ae 	bl	8009304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a8:	f107 0314 	add.w	r3, r7, #20
 80001ac:	2200      	movs	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
 80001b0:	605a      	str	r2, [r3, #4]
 80001b2:	609a      	str	r2, [r3, #8]
 80001b4:	60da      	str	r2, [r3, #12]
 80001b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
 80001be:	605a      	str	r2, [r3, #4]
 80001c0:	609a      	str	r2, [r3, #8]
 80001c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001c4:	2301      	movs	r3, #1
 80001c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ce:	2300      	movs	r3, #0
 80001d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d2:	2301      	movs	r3, #1
 80001d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d6:	2302      	movs	r3, #2
 80001d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001e0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ea:	4618      	mov	r0, r3
 80001ec:	f002 ffc4 	bl	8003178 <HAL_RCC_OscConfig>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001f6:	f000 feed 	bl	8000fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fa:	230f      	movs	r3, #15
 80001fc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001fe:	2302      	movs	r3, #2
 8000200:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800020a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000210:	f107 0314 	add.w	r3, r7, #20
 8000214:	2102      	movs	r1, #2
 8000216:	4618      	mov	r0, r3
 8000218:	f003 fa30 	bl	800367c <HAL_RCC_ClockConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000222:	f000 fed7 	bl	8000fd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000226:	2310      	movs	r3, #16
 8000228:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800022a:	2300      	movs	r3, #0
 800022c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	4618      	mov	r0, r3
 8000232:	f003 fb89 	bl	8003948 <HAL_RCCEx_PeriphCLKConfig>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800023c:	f000 feca 	bl	8000fd4 <Error_Handler>
  }
}
 8000240:	bf00      	nop
 8000242:	3750      	adds	r7, #80	; 0x50
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800024c:	4b17      	ldr	r3, [pc, #92]	; (80002ac <MX_SPI1_Init+0x64>)
 800024e:	4a18      	ldr	r2, [pc, #96]	; (80002b0 <MX_SPI1_Init+0x68>)
 8000250:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000252:	4b16      	ldr	r3, [pc, #88]	; (80002ac <MX_SPI1_Init+0x64>)
 8000254:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000258:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800025a:	4b14      	ldr	r3, [pc, #80]	; (80002ac <MX_SPI1_Init+0x64>)
 800025c:	2200      	movs	r2, #0
 800025e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000260:	4b12      	ldr	r3, [pc, #72]	; (80002ac <MX_SPI1_Init+0x64>)
 8000262:	2200      	movs	r2, #0
 8000264:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000266:	4b11      	ldr	r3, [pc, #68]	; (80002ac <MX_SPI1_Init+0x64>)
 8000268:	2200      	movs	r2, #0
 800026a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800026c:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <MX_SPI1_Init+0x64>)
 800026e:	2200      	movs	r2, #0
 8000270:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <MX_SPI1_Init+0x64>)
 8000274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000278:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800027a:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <MX_SPI1_Init+0x64>)
 800027c:	2208      	movs	r2, #8
 800027e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000280:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <MX_SPI1_Init+0x64>)
 8000282:	2280      	movs	r2, #128	; 0x80
 8000284:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000286:	4b09      	ldr	r3, [pc, #36]	; (80002ac <MX_SPI1_Init+0x64>)
 8000288:	2200      	movs	r2, #0
 800028a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <MX_SPI1_Init+0x64>)
 800028e:	2200      	movs	r2, #0
 8000290:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000292:	4b06      	ldr	r3, [pc, #24]	; (80002ac <MX_SPI1_Init+0x64>)
 8000294:	220a      	movs	r2, #10
 8000296:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000298:	4804      	ldr	r0, [pc, #16]	; (80002ac <MX_SPI1_Init+0x64>)
 800029a:	f003 fc0b 	bl	8003ab4 <HAL_SPI_Init>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80002a4:	f000 fe96 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000198 	.word	0x20000198
 80002b0:	40013000 	.word	0x40013000

080002b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b086      	sub	sp, #24
 80002b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ba:	f107 0308 	add.w	r3, r7, #8
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c8:	463b      	mov	r3, r7
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002d0:	4b1d      	ldr	r3, [pc, #116]	; (8000348 <MX_TIM2_Init+0x94>)
 80002d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 80002d8:	4b1b      	ldr	r3, [pc, #108]	; (8000348 <MX_TIM2_Init+0x94>)
 80002da:	2200      	movs	r2, #0
 80002dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002de:	4b1a      	ldr	r3, [pc, #104]	; (8000348 <MX_TIM2_Init+0x94>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 288-1;
 80002e4:	4b18      	ldr	r3, [pc, #96]	; (8000348 <MX_TIM2_Init+0x94>)
 80002e6:	f240 121f 	movw	r2, #287	; 0x11f
 80002ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ec:	4b16      	ldr	r3, [pc, #88]	; (8000348 <MX_TIM2_Init+0x94>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002f2:	4b15      	ldr	r3, [pc, #84]	; (8000348 <MX_TIM2_Init+0x94>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002f8:	4813      	ldr	r0, [pc, #76]	; (8000348 <MX_TIM2_Init+0x94>)
 80002fa:	f003 fe41 	bl	8003f80 <HAL_TIM_Base_Init>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000304:	f000 fe66 	bl	8000fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800030c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800030e:	f107 0308 	add.w	r3, r7, #8
 8000312:	4619      	mov	r1, r3
 8000314:	480c      	ldr	r0, [pc, #48]	; (8000348 <MX_TIM2_Init+0x94>)
 8000316:	f003 ffdd 	bl	80042d4 <HAL_TIM_ConfigClockSource>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000320:	f000 fe58 	bl	8000fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000324:	2300      	movs	r3, #0
 8000326:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000328:	2300      	movs	r3, #0
 800032a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800032c:	463b      	mov	r3, r7
 800032e:	4619      	mov	r1, r3
 8000330:	4805      	ldr	r0, [pc, #20]	; (8000348 <MX_TIM2_Init+0x94>)
 8000332:	f004 f9af 	bl	8004694 <HAL_TIMEx_MasterConfigSynchronization>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800033c:	f000 fe4a 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000340:	bf00      	nop
 8000342:	3718      	adds	r7, #24
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	200001f0 	.word	0x200001f0

0800034c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b088      	sub	sp, #32
 8000350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000352:	f107 0310 	add.w	r3, r7, #16
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000360:	4b27      	ldr	r3, [pc, #156]	; (8000400 <MX_GPIO_Init+0xb4>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a26      	ldr	r2, [pc, #152]	; (8000400 <MX_GPIO_Init+0xb4>)
 8000366:	f043 0320 	orr.w	r3, r3, #32
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b24      	ldr	r3, [pc, #144]	; (8000400 <MX_GPIO_Init+0xb4>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0320 	and.w	r3, r3, #32
 8000374:	60fb      	str	r3, [r7, #12]
 8000376:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000378:	4b21      	ldr	r3, [pc, #132]	; (8000400 <MX_GPIO_Init+0xb4>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a20      	ldr	r2, [pc, #128]	; (8000400 <MX_GPIO_Init+0xb4>)
 800037e:	f043 0304 	orr.w	r3, r3, #4
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b1e      	ldr	r3, [pc, #120]	; (8000400 <MX_GPIO_Init+0xb4>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0304 	and.w	r3, r3, #4
 800038c:	60bb      	str	r3, [r7, #8]
 800038e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000390:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <MX_GPIO_Init+0xb4>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a1a      	ldr	r2, [pc, #104]	; (8000400 <MX_GPIO_Init+0xb4>)
 8000396:	f043 0308 	orr.w	r3, r3, #8
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b18      	ldr	r3, [pc, #96]	; (8000400 <MX_GPIO_Init+0xb4>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0308 	and.w	r3, r3, #8
 80003a4:	607b      	str	r3, [r7, #4]
 80003a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80003a8:	2200      	movs	r2, #0
 80003aa:	214f      	movs	r1, #79	; 0x4f
 80003ac:	4815      	ldr	r0, [pc, #84]	; (8000404 <MX_GPIO_Init+0xb8>)
 80003ae:	f001 fa07 	bl	80017c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	f640 4103 	movw	r1, #3075	; 0xc03
 80003b8:	4813      	ldr	r0, [pc, #76]	; (8000408 <MX_GPIO_Init+0xbc>)
 80003ba:	f001 fa01 	bl	80017c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80003be:	234f      	movs	r3, #79	; 0x4f
 80003c0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c2:	2301      	movs	r3, #1
 80003c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ca:	2302      	movs	r3, #2
 80003cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	4619      	mov	r1, r3
 80003d4:	480b      	ldr	r0, [pc, #44]	; (8000404 <MX_GPIO_Init+0xb8>)
 80003d6:	f001 f86f 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 80003da:	f640 4303 	movw	r3, #3075	; 0xc03
 80003de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e0:	2301      	movs	r3, #1
 80003e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e8:	2302      	movs	r3, #2
 80003ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	4805      	ldr	r0, [pc, #20]	; (8000408 <MX_GPIO_Init+0xbc>)
 80003f4:	f001 f860 	bl	80014b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003f8:	bf00      	nop
 80003fa:	3720      	adds	r7, #32
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40021000 	.word	0x40021000
 8000404:	40010800 	.word	0x40010800
 8000408:	40010c00 	.word	0x40010c00

0800040c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_PRESCALER(htim, TIMER_SCALER[bit_index]);
 8000414:	4b28      	ldr	r3, [pc, #160]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	461a      	mov	r2, r3
 800041a:	4b28      	ldr	r3, [pc, #160]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800041c:	5c9a      	ldrb	r2, [r3, r2]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	629a      	str	r2, [r3, #40]	; 0x28
	htim->Instance->EGR = TIM_EGR_UG;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2201      	movs	r2, #1
 800042a:	615a      	str	r2, [r3, #20]
	__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f06f 0201 	mvn.w	r2, #1
 8000434:	611a      	str	r2, [r3, #16]

	if (bit_index == 0) {
 8000436:	4b20      	ldr	r3, [pc, #128]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d102      	bne.n	8000444 <HAL_TIM_PeriodElapsedCallback+0x38>
		RGBLedMatrix_Scan(8);
 800043e:	2008      	movs	r0, #8
 8000440:	f000 f878 	bl	8000534 <RGBLedMatrix_Scan>
	}
	RGBLedMatrix_ShiftOut(SPI_buffer[row][bit_index], 3);
 8000444:	4b1e      	ldr	r3, [pc, #120]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	4619      	mov	r1, r3
 800044a:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	461a      	mov	r2, r3
 8000450:	0052      	lsls	r2, r2, #1
 8000452:	441a      	add	r2, r3
 8000454:	460b      	mov	r3, r1
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	440b      	add	r3, r1
 800045a:	00db      	lsls	r3, r3, #3
 800045c:	4413      	add	r3, r2
 800045e:	4a19      	ldr	r2, [pc, #100]	; (80004c4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000460:	4413      	add	r3, r2
 8000462:	2103      	movs	r1, #3
 8000464:	4618      	mov	r0, r3
 8000466:	f000 f8e5 	bl	8000634 <RGBLedMatrix_ShiftOut>
	if (bit_index == 0) {
 800046a:	4b13      	ldr	r3, [pc, #76]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d104      	bne.n	800047c <HAL_TIM_PeriodElapsedCallback+0x70>
		RGBLedMatrix_Scan(row);
 8000472:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	4618      	mov	r0, r3
 8000478:	f000 f85c 	bl	8000534 <RGBLedMatrix_Scan>
	}

	bit_index++;
 800047c:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	3301      	adds	r3, #1
 8000482:	b2da      	uxtb	r2, r3
 8000484:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000486:	701a      	strb	r2, [r3, #0]
	if (bit_index == BIT_NUM) {
 8000488:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b08      	cmp	r3, #8
 800048e:	d10f      	bne.n	80004b0 <HAL_TIM_PeriodElapsedCallback+0xa4>
		bit_index = 0;
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000492:	2200      	movs	r2, #0
 8000494:	701a      	strb	r2, [r3, #0]
		row++;
 8000496:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	3301      	adds	r3, #1
 800049c:	b2da      	uxtb	r2, r3
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80004a0:	701a      	strb	r2, [r3, #0]
		if (row == ROW_SIZE) row = 0;
 80004a2:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b08      	cmp	r3, #8
 80004a8:	d102      	bne.n	80004b0 <HAL_TIM_PeriodElapsedCallback+0xa4>
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
	}
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000343 	.word	0x20000343
 80004bc:	08009384 	.word	0x08009384
 80004c0:	20000344 	.word	0x20000344
 80004c4:	20000278 	.word	0x20000278

080004c8 <RGBLedMatrix_Init>:

static void RGBLedMatrix_Init(void) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	row = 0;
 80004cc:	4b13      	ldr	r3, [pc, #76]	; (800051c <RGBLedMatrix_Init+0x54>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	701a      	strb	r2, [r3, #0]
	bit_index = 0;
 80004d2:	4b13      	ldr	r3, [pc, #76]	; (8000520 <RGBLedMatrix_Init+0x58>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]

	memset(SPI_buffer, 0xFF, sizeof(SPI_buffer));
 80004d8:	22c0      	movs	r2, #192	; 0xc0
 80004da:	21ff      	movs	r1, #255	; 0xff
 80004dc:	4811      	ldr	r0, [pc, #68]	; (8000524 <RGBLedMatrix_Init+0x5c>)
 80004de:	f008 ff11 	bl	8009304 <memset>

	primary_color.red = 0x1E;
 80004e2:	4b11      	ldr	r3, [pc, #68]	; (8000528 <RGBLedMatrix_Init+0x60>)
 80004e4:	221e      	movs	r2, #30
 80004e6:	701a      	strb	r2, [r3, #0]
	primary_color.green = 0x81;
 80004e8:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <RGBLedMatrix_Init+0x60>)
 80004ea:	2281      	movs	r2, #129	; 0x81
 80004ec:	705a      	strb	r2, [r3, #1]
	primary_color.blue = 0xB0;
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <RGBLedMatrix_Init+0x60>)
 80004f0:	22b0      	movs	r2, #176	; 0xb0
 80004f2:	709a      	strb	r2, [r3, #2]

	secondary_color.red = 0x6C;
 80004f4:	4b0d      	ldr	r3, [pc, #52]	; (800052c <RGBLedMatrix_Init+0x64>)
 80004f6:	226c      	movs	r2, #108	; 0x6c
 80004f8:	701a      	strb	r2, [r3, #0]
	secondary_color.green = 0x25;
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <RGBLedMatrix_Init+0x64>)
 80004fc:	2225      	movs	r2, #37	; 0x25
 80004fe:	705a      	strb	r2, [r3, #1]
	secondary_color.blue = 0xBE;
 8000500:	4b0a      	ldr	r3, [pc, #40]	; (800052c <RGBLedMatrix_Init+0x64>)
 8000502:	22be      	movs	r2, #190	; 0xbe
 8000504:	709a      	strb	r2, [r3, #2]

	tertiary_color.red = 0xBE;
 8000506:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <RGBLedMatrix_Init+0x68>)
 8000508:	22be      	movs	r2, #190	; 0xbe
 800050a:	701a      	strb	r2, [r3, #0]
	tertiary_color.green = 0xA9;
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <RGBLedMatrix_Init+0x68>)
 800050e:	22a9      	movs	r2, #169	; 0xa9
 8000510:	705a      	strb	r2, [r3, #1]
	tertiary_color.blue = 0x25;
 8000512:	4b07      	ldr	r3, [pc, #28]	; (8000530 <RGBLedMatrix_Init+0x68>)
 8000514:	2225      	movs	r2, #37	; 0x25
 8000516:	709a      	strb	r2, [r3, #2]
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000344 	.word	0x20000344
 8000520:	20000343 	.word	0x20000343
 8000524:	20000278 	.word	0x20000278
 8000528:	20000338 	.word	0x20000338
 800052c:	2000033c 	.word	0x2000033c
 8000530:	20000340 	.word	0x20000340

08000534 <RGBLedMatrix_Scan>:

static void RGBLedMatrix_Scan(uint8_t row) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2101      	movs	r1, #1
 8000542:	483a      	ldr	r0, [pc, #232]	; (800062c <RGBLedMatrix_Scan+0xf8>)
 8000544:	f001 f93c 	bl	80017c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000548:	2200      	movs	r2, #0
 800054a:	2102      	movs	r1, #2
 800054c:	4837      	ldr	r0, [pc, #220]	; (800062c <RGBLedMatrix_Scan+0xf8>)
 800054e:	f001 f937 	bl	80017c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	2104      	movs	r1, #4
 8000556:	4835      	ldr	r0, [pc, #212]	; (800062c <RGBLedMatrix_Scan+0xf8>)
 8000558:	f001 f932 	bl	80017c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 800055c:	2200      	movs	r2, #0
 800055e:	2108      	movs	r1, #8
 8000560:	4832      	ldr	r0, [pc, #200]	; (800062c <RGBLedMatrix_Scan+0xf8>)
 8000562:	f001 f92d 	bl	80017c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800056c:	4830      	ldr	r0, [pc, #192]	; (8000630 <RGBLedMatrix_Scan+0xfc>)
 800056e:	f001 f927 	bl	80017c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000578:	482d      	ldr	r0, [pc, #180]	; (8000630 <RGBLedMatrix_Scan+0xfc>)
 800057a:	f001 f921 	bl	80017c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2102      	movs	r1, #2
 8000582:	482b      	ldr	r0, [pc, #172]	; (8000630 <RGBLedMatrix_Scan+0xfc>)
 8000584:	f001 f91c 	bl	80017c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000588:	2200      	movs	r2, #0
 800058a:	2101      	movs	r1, #1
 800058c:	4828      	ldr	r0, [pc, #160]	; (8000630 <RGBLedMatrix_Scan+0xfc>)
 800058e:	f001 f917 	bl	80017c0 <HAL_GPIO_WritePin>

	switch(row) {
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2b07      	cmp	r3, #7
 8000596:	d845      	bhi.n	8000624 <RGBLedMatrix_Scan+0xf0>
 8000598:	a201      	add	r2, pc, #4	; (adr r2, 80005a0 <RGBLedMatrix_Scan+0x6c>)
 800059a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059e:	bf00      	nop
 80005a0:	080005c1 	.word	0x080005c1
 80005a4:	080005cd 	.word	0x080005cd
 80005a8:	080005d9 	.word	0x080005d9
 80005ac:	080005e5 	.word	0x080005e5
 80005b0:	080005f1 	.word	0x080005f1
 80005b4:	080005ff 	.word	0x080005ff
 80005b8:	0800060d 	.word	0x0800060d
 80005bc:	08000619 	.word	0x08000619
	case 0:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2101      	movs	r1, #1
 80005c4:	4819      	ldr	r0, [pc, #100]	; (800062c <RGBLedMatrix_Scan+0xf8>)
 80005c6:	f001 f8fb 	bl	80017c0 <HAL_GPIO_WritePin>
		break;
 80005ca:	e02b      	b.n	8000624 <RGBLedMatrix_Scan+0xf0>
	case 1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2102      	movs	r1, #2
 80005d0:	4816      	ldr	r0, [pc, #88]	; (800062c <RGBLedMatrix_Scan+0xf8>)
 80005d2:	f001 f8f5 	bl	80017c0 <HAL_GPIO_WritePin>
		break;
 80005d6:	e025      	b.n	8000624 <RGBLedMatrix_Scan+0xf0>
	case 2:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 80005d8:	2201      	movs	r2, #1
 80005da:	2104      	movs	r1, #4
 80005dc:	4813      	ldr	r0, [pc, #76]	; (800062c <RGBLedMatrix_Scan+0xf8>)
 80005de:	f001 f8ef 	bl	80017c0 <HAL_GPIO_WritePin>
		break;
 80005e2:	e01f      	b.n	8000624 <RGBLedMatrix_Scan+0xf0>
	case 3:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2108      	movs	r1, #8
 80005e8:	4810      	ldr	r0, [pc, #64]	; (800062c <RGBLedMatrix_Scan+0xf8>)
 80005ea:	f001 f8e9 	bl	80017c0 <HAL_GPIO_WritePin>
		break;
 80005ee:	e019      	b.n	8000624 <RGBLedMatrix_Scan+0xf0>
	case 4:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005f6:	480e      	ldr	r0, [pc, #56]	; (8000630 <RGBLedMatrix_Scan+0xfc>)
 80005f8:	f001 f8e2 	bl	80017c0 <HAL_GPIO_WritePin>
		break;
 80005fc:	e012      	b.n	8000624 <RGBLedMatrix_Scan+0xf0>
	case 5:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80005fe:	2201      	movs	r2, #1
 8000600:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000604:	480a      	ldr	r0, [pc, #40]	; (8000630 <RGBLedMatrix_Scan+0xfc>)
 8000606:	f001 f8db 	bl	80017c0 <HAL_GPIO_WritePin>
		break;
 800060a:	e00b      	b.n	8000624 <RGBLedMatrix_Scan+0xf0>
	case 6:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 800060c:	2201      	movs	r2, #1
 800060e:	2102      	movs	r1, #2
 8000610:	4807      	ldr	r0, [pc, #28]	; (8000630 <RGBLedMatrix_Scan+0xfc>)
 8000612:	f001 f8d5 	bl	80017c0 <HAL_GPIO_WritePin>
		break;
 8000616:	e005      	b.n	8000624 <RGBLedMatrix_Scan+0xf0>
	case 7:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000618:	2201      	movs	r2, #1
 800061a:	2101      	movs	r1, #1
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <RGBLedMatrix_Scan+0xfc>)
 800061e:	f001 f8cf 	bl	80017c0 <HAL_GPIO_WritePin>
		break;
 8000622:	bf00      	nop
	}
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40010800 	.word	0x40010800
 8000630:	40010c00 	.word	0x40010c00

08000634 <RGBLedMatrix_ShiftOut>:

static void RGBLedMatrix_ShiftOut(uint8_t* data, uint8_t size) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2140      	movs	r1, #64	; 0x40
 8000644:	4809      	ldr	r0, [pc, #36]	; (800066c <RGBLedMatrix_ShiftOut+0x38>)
 8000646:	f001 f8bb 	bl	80017c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, size, 1);
 800064a:	78fb      	ldrb	r3, [r7, #3]
 800064c:	b29a      	uxth	r2, r3
 800064e:	2301      	movs	r3, #1
 8000650:	6879      	ldr	r1, [r7, #4]
 8000652:	4807      	ldr	r0, [pc, #28]	; (8000670 <RGBLedMatrix_ShiftOut+0x3c>)
 8000654:	f003 fab2 	bl	8003bbc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	2140      	movs	r1, #64	; 0x40
 800065c:	4803      	ldr	r0, [pc, #12]	; (800066c <RGBLedMatrix_ShiftOut+0x38>)
 800065e:	f001 f8af 	bl	80017c0 <HAL_GPIO_WritePin>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40010800 	.word	0x40010800
 8000670:	20000198 	.word	0x20000198

08000674 <RGBLedMatrix_Display>:

static void RGBLedMatrix_Display(uint8_t mode, uint8_t* magnitude_levels) {
 8000674:	b490      	push	{r4, r7}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	6039      	str	r1, [r7, #0]
 800067e:	71fb      	strb	r3, [r7, #7]
	uint8_t mark;
	uint8_t marks[ROW_SIZE];
	uint8_t i, j;

	for (i = 0; i < ROW_SIZE; i++) {
 8000680:	2300      	movs	r3, #0
 8000682:	75fb      	strb	r3, [r7, #23]
 8000684:	e037      	b.n	80006f6 <RGBLedMatrix_Display+0x82>
		marks[ROW_SIZE - 1 - i] = 0x00;
 8000686:	7dfb      	ldrb	r3, [r7, #23]
 8000688:	f1c3 0307 	rsb	r3, r3, #7
 800068c:	3318      	adds	r3, #24
 800068e:	443b      	add	r3, r7
 8000690:	2200      	movs	r2, #0
 8000692:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for (j = 0; j < COL_SIZE; j++) {
 8000696:	2300      	movs	r3, #0
 8000698:	75bb      	strb	r3, [r7, #22]
 800069a:	e026      	b.n	80006ea <RGBLedMatrix_Display+0x76>
			mark = i < magnitude_levels[j] ? 0 : 1;
 800069c:	7dbb      	ldrb	r3, [r7, #22]
 800069e:	683a      	ldr	r2, [r7, #0]
 80006a0:	4413      	add	r3, r2
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	7dfa      	ldrb	r2, [r7, #23]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	bf2c      	ite	cs
 80006aa:	2301      	movcs	r3, #1
 80006ac:	2300      	movcc	r3, #0
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	757b      	strb	r3, [r7, #21]
			marks[ROW_SIZE - 1 - i] |= (mark << (7 - j));
 80006b2:	7dfb      	ldrb	r3, [r7, #23]
 80006b4:	f1c3 0307 	rsb	r3, r3, #7
 80006b8:	3318      	adds	r3, #24
 80006ba:	443b      	add	r3, r7
 80006bc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80006c0:	b25a      	sxtb	r2, r3
 80006c2:	7d79      	ldrb	r1, [r7, #21]
 80006c4:	7dbb      	ldrb	r3, [r7, #22]
 80006c6:	f1c3 0307 	rsb	r3, r3, #7
 80006ca:	fa01 f303 	lsl.w	r3, r1, r3
 80006ce:	b25b      	sxtb	r3, r3
 80006d0:	4313      	orrs	r3, r2
 80006d2:	b25a      	sxtb	r2, r3
 80006d4:	7dfb      	ldrb	r3, [r7, #23]
 80006d6:	f1c3 0307 	rsb	r3, r3, #7
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	3318      	adds	r3, #24
 80006de:	443b      	add	r3, r7
 80006e0:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for (j = 0; j < COL_SIZE; j++) {
 80006e4:	7dbb      	ldrb	r3, [r7, #22]
 80006e6:	3301      	adds	r3, #1
 80006e8:	75bb      	strb	r3, [r7, #22]
 80006ea:	7dbb      	ldrb	r3, [r7, #22]
 80006ec:	2b07      	cmp	r3, #7
 80006ee:	d9d5      	bls.n	800069c <RGBLedMatrix_Display+0x28>
	for (i = 0; i < ROW_SIZE; i++) {
 80006f0:	7dfb      	ldrb	r3, [r7, #23]
 80006f2:	3301      	adds	r3, #1
 80006f4:	75fb      	strb	r3, [r7, #23]
 80006f6:	7dfb      	ldrb	r3, [r7, #23]
 80006f8:	2b07      	cmp	r3, #7
 80006fa:	d9c4      	bls.n	8000686 <RGBLedMatrix_Display+0x12>
		}
	}

	switch(mode) {
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	2b03      	cmp	r3, #3
 8000700:	f000 81e6 	beq.w	8000ad0 <RGBLedMatrix_Display+0x45c>
 8000704:	2b03      	cmp	r3, #3
 8000706:	f300 83c1 	bgt.w	8000e8c <RGBLedMatrix_Display+0x818>
 800070a:	2b01      	cmp	r3, #1
 800070c:	d003      	beq.n	8000716 <RGBLedMatrix_Display+0xa2>
 800070e:	2b02      	cmp	r3, #2
 8000710:	f000 809e 	beq.w	8000850 <RGBLedMatrix_Display+0x1dc>
				}
			}
		}
		break;
	}
}
 8000714:	e3ba      	b.n	8000e8c <RGBLedMatrix_Display+0x818>
		for (i = 0; i < ROW_SIZE; i++){
 8000716:	2300      	movs	r3, #0
 8000718:	75fb      	strb	r3, [r7, #23]
 800071a:	e094      	b.n	8000846 <RGBLedMatrix_Display+0x1d2>
			for (j = 0; j < BIT_NUM; j++) {
 800071c:	2300      	movs	r3, #0
 800071e:	75bb      	strb	r3, [r7, #22]
 8000720:	e08a      	b.n	8000838 <RGBLedMatrix_Display+0x1c4>
				if ((primary_color.blue >> j) & 0x01) {
 8000722:	4bc2      	ldr	r3, [pc, #776]	; (8000a2c <RGBLedMatrix_Display+0x3b8>)
 8000724:	789b      	ldrb	r3, [r3, #2]
 8000726:	461a      	mov	r2, r3
 8000728:	7dbb      	ldrb	r3, [r7, #22]
 800072a:	fa42 f303 	asr.w	r3, r2, r3
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	2b00      	cmp	r3, #0
 8000734:	d013      	beq.n	800075e <RGBLedMatrix_Display+0xea>
					SPI_buffer[i][j][0] =  marks[i];
 8000736:	7dfa      	ldrb	r2, [r7, #23]
 8000738:	7df9      	ldrb	r1, [r7, #23]
 800073a:	7dbb      	ldrb	r3, [r7, #22]
 800073c:	3218      	adds	r2, #24
 800073e:	443a      	add	r2, r7
 8000740:	f812 4c0c 	ldrb.w	r4, [r2, #-12]
 8000744:	48ba      	ldr	r0, [pc, #744]	; (8000a30 <RGBLedMatrix_Display+0x3bc>)
 8000746:	461a      	mov	r2, r3
 8000748:	0052      	lsls	r2, r2, #1
 800074a:	441a      	add	r2, r3
 800074c:	460b      	mov	r3, r1
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	440b      	add	r3, r1
 8000752:	00db      	lsls	r3, r3, #3
 8000754:	4413      	add	r3, r2
 8000756:	4403      	add	r3, r0
 8000758:	4622      	mov	r2, r4
 800075a:	701a      	strb	r2, [r3, #0]
 800075c:	e00d      	b.n	800077a <RGBLedMatrix_Display+0x106>
					SPI_buffer[i][j][0] = 0xFF;
 800075e:	7df9      	ldrb	r1, [r7, #23]
 8000760:	7dbb      	ldrb	r3, [r7, #22]
 8000762:	48b3      	ldr	r0, [pc, #716]	; (8000a30 <RGBLedMatrix_Display+0x3bc>)
 8000764:	461a      	mov	r2, r3
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	441a      	add	r2, r3
 800076a:	460b      	mov	r3, r1
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	440b      	add	r3, r1
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	4413      	add	r3, r2
 8000774:	4403      	add	r3, r0
 8000776:	22ff      	movs	r2, #255	; 0xff
 8000778:	701a      	strb	r2, [r3, #0]
				if ((primary_color.green >> j) & 0x01) {
 800077a:	4bac      	ldr	r3, [pc, #688]	; (8000a2c <RGBLedMatrix_Display+0x3b8>)
 800077c:	785b      	ldrb	r3, [r3, #1]
 800077e:	461a      	mov	r2, r3
 8000780:	7dbb      	ldrb	r3, [r7, #22]
 8000782:	fa42 f303 	asr.w	r3, r2, r3
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	2b00      	cmp	r3, #0
 800078c:	d014      	beq.n	80007b8 <RGBLedMatrix_Display+0x144>
					SPI_buffer[i][j][1] =  marks[i];
 800078e:	7dfa      	ldrb	r2, [r7, #23]
 8000790:	7df9      	ldrb	r1, [r7, #23]
 8000792:	7dbb      	ldrb	r3, [r7, #22]
 8000794:	3218      	adds	r2, #24
 8000796:	443a      	add	r2, r7
 8000798:	f812 4c0c 	ldrb.w	r4, [r2, #-12]
 800079c:	48a4      	ldr	r0, [pc, #656]	; (8000a30 <RGBLedMatrix_Display+0x3bc>)
 800079e:	461a      	mov	r2, r3
 80007a0:	0052      	lsls	r2, r2, #1
 80007a2:	441a      	add	r2, r3
 80007a4:	460b      	mov	r3, r1
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	440b      	add	r3, r1
 80007aa:	00db      	lsls	r3, r3, #3
 80007ac:	4413      	add	r3, r2
 80007ae:	4403      	add	r3, r0
 80007b0:	3301      	adds	r3, #1
 80007b2:	4622      	mov	r2, r4
 80007b4:	701a      	strb	r2, [r3, #0]
 80007b6:	e00e      	b.n	80007d6 <RGBLedMatrix_Display+0x162>
					SPI_buffer[i][j][1] = 0xFF;
 80007b8:	7df9      	ldrb	r1, [r7, #23]
 80007ba:	7dbb      	ldrb	r3, [r7, #22]
 80007bc:	489c      	ldr	r0, [pc, #624]	; (8000a30 <RGBLedMatrix_Display+0x3bc>)
 80007be:	461a      	mov	r2, r3
 80007c0:	0052      	lsls	r2, r2, #1
 80007c2:	441a      	add	r2, r3
 80007c4:	460b      	mov	r3, r1
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	440b      	add	r3, r1
 80007ca:	00db      	lsls	r3, r3, #3
 80007cc:	4413      	add	r3, r2
 80007ce:	4403      	add	r3, r0
 80007d0:	3301      	adds	r3, #1
 80007d2:	22ff      	movs	r2, #255	; 0xff
 80007d4:	701a      	strb	r2, [r3, #0]
				if ((primary_color.red >> j) & 0x01) {
 80007d6:	4b95      	ldr	r3, [pc, #596]	; (8000a2c <RGBLedMatrix_Display+0x3b8>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	7dbb      	ldrb	r3, [r7, #22]
 80007de:	fa42 f303 	asr.w	r3, r2, r3
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d014      	beq.n	8000814 <RGBLedMatrix_Display+0x1a0>
					SPI_buffer[i][j][2] =  marks[i];
 80007ea:	7dfa      	ldrb	r2, [r7, #23]
 80007ec:	7df9      	ldrb	r1, [r7, #23]
 80007ee:	7dbb      	ldrb	r3, [r7, #22]
 80007f0:	3218      	adds	r2, #24
 80007f2:	443a      	add	r2, r7
 80007f4:	f812 4c0c 	ldrb.w	r4, [r2, #-12]
 80007f8:	488d      	ldr	r0, [pc, #564]	; (8000a30 <RGBLedMatrix_Display+0x3bc>)
 80007fa:	461a      	mov	r2, r3
 80007fc:	0052      	lsls	r2, r2, #1
 80007fe:	441a      	add	r2, r3
 8000800:	460b      	mov	r3, r1
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	440b      	add	r3, r1
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	4413      	add	r3, r2
 800080a:	4403      	add	r3, r0
 800080c:	3302      	adds	r3, #2
 800080e:	4622      	mov	r2, r4
 8000810:	701a      	strb	r2, [r3, #0]
 8000812:	e00e      	b.n	8000832 <RGBLedMatrix_Display+0x1be>
					SPI_buffer[i][j][2] = 0xFF;
 8000814:	7df9      	ldrb	r1, [r7, #23]
 8000816:	7dbb      	ldrb	r3, [r7, #22]
 8000818:	4885      	ldr	r0, [pc, #532]	; (8000a30 <RGBLedMatrix_Display+0x3bc>)
 800081a:	461a      	mov	r2, r3
 800081c:	0052      	lsls	r2, r2, #1
 800081e:	441a      	add	r2, r3
 8000820:	460b      	mov	r3, r1
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	440b      	add	r3, r1
 8000826:	00db      	lsls	r3, r3, #3
 8000828:	4413      	add	r3, r2
 800082a:	4403      	add	r3, r0
 800082c:	3302      	adds	r3, #2
 800082e:	22ff      	movs	r2, #255	; 0xff
 8000830:	701a      	strb	r2, [r3, #0]
			for (j = 0; j < BIT_NUM; j++) {
 8000832:	7dbb      	ldrb	r3, [r7, #22]
 8000834:	3301      	adds	r3, #1
 8000836:	75bb      	strb	r3, [r7, #22]
 8000838:	7dbb      	ldrb	r3, [r7, #22]
 800083a:	2b07      	cmp	r3, #7
 800083c:	f67f af71 	bls.w	8000722 <RGBLedMatrix_Display+0xae>
		for (i = 0; i < ROW_SIZE; i++){
 8000840:	7dfb      	ldrb	r3, [r7, #23]
 8000842:	3301      	adds	r3, #1
 8000844:	75fb      	strb	r3, [r7, #23]
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	2b07      	cmp	r3, #7
 800084a:	f67f af67 	bls.w	800071c <RGBLedMatrix_Display+0xa8>
		break;
 800084e:	e31d      	b.n	8000e8c <RGBLedMatrix_Display+0x818>
		for (i = 0; i < ROW_SIZE / 2; i++){
 8000850:	2300      	movs	r3, #0
 8000852:	75fb      	strb	r3, [r7, #23]
 8000854:	e094      	b.n	8000980 <RGBLedMatrix_Display+0x30c>
			for (j = 0; j < BIT_NUM; j++) {
 8000856:	2300      	movs	r3, #0
 8000858:	75bb      	strb	r3, [r7, #22]
 800085a:	e08a      	b.n	8000972 <RGBLedMatrix_Display+0x2fe>
				if ((secondary_color.blue >> j) & 0x01) {
 800085c:	4b75      	ldr	r3, [pc, #468]	; (8000a34 <RGBLedMatrix_Display+0x3c0>)
 800085e:	789b      	ldrb	r3, [r3, #2]
 8000860:	461a      	mov	r2, r3
 8000862:	7dbb      	ldrb	r3, [r7, #22]
 8000864:	fa42 f303 	asr.w	r3, r2, r3
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	2b00      	cmp	r3, #0
 800086e:	d013      	beq.n	8000898 <RGBLedMatrix_Display+0x224>
					SPI_buffer[i][j][0] =  marks[i];
 8000870:	7dfa      	ldrb	r2, [r7, #23]
 8000872:	7df9      	ldrb	r1, [r7, #23]
 8000874:	7dbb      	ldrb	r3, [r7, #22]
 8000876:	3218      	adds	r2, #24
 8000878:	443a      	add	r2, r7
 800087a:	f812 4c0c 	ldrb.w	r4, [r2, #-12]
 800087e:	486c      	ldr	r0, [pc, #432]	; (8000a30 <RGBLedMatrix_Display+0x3bc>)
 8000880:	461a      	mov	r2, r3
 8000882:	0052      	lsls	r2, r2, #1
 8000884:	441a      	add	r2, r3
 8000886:	460b      	mov	r3, r1
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	440b      	add	r3, r1
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	4413      	add	r3, r2
 8000890:	4403      	add	r3, r0
 8000892:	4622      	mov	r2, r4
 8000894:	701a      	strb	r2, [r3, #0]
 8000896:	e00d      	b.n	80008b4 <RGBLedMatrix_Display+0x240>
					SPI_buffer[i][j][0] = 0xFF;
 8000898:	7df9      	ldrb	r1, [r7, #23]
 800089a:	7dbb      	ldrb	r3, [r7, #22]
 800089c:	4864      	ldr	r0, [pc, #400]	; (8000a30 <RGBLedMatrix_Display+0x3bc>)
 800089e:	461a      	mov	r2, r3
 80008a0:	0052      	lsls	r2, r2, #1
 80008a2:	441a      	add	r2, r3
 80008a4:	460b      	mov	r3, r1
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	440b      	add	r3, r1
 80008aa:	00db      	lsls	r3, r3, #3
 80008ac:	4413      	add	r3, r2
 80008ae:	4403      	add	r3, r0
 80008b0:	22ff      	movs	r2, #255	; 0xff
 80008b2:	701a      	strb	r2, [r3, #0]
				if ((secondary_color.green >> j) & 0x01) {
 80008b4:	4b5f      	ldr	r3, [pc, #380]	; (8000a34 <RGBLedMatrix_Display+0x3c0>)
 80008b6:	785b      	ldrb	r3, [r3, #1]
 80008b8:	461a      	mov	r2, r3
 80008ba:	7dbb      	ldrb	r3, [r7, #22]
 80008bc:	fa42 f303 	asr.w	r3, r2, r3
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d014      	beq.n	80008f2 <RGBLedMatrix_Display+0x27e>
					SPI_buffer[i][j][1] =  marks[i];
 80008c8:	7dfa      	ldrb	r2, [r7, #23]
 80008ca:	7df9      	ldrb	r1, [r7, #23]
 80008cc:	7dbb      	ldrb	r3, [r7, #22]
 80008ce:	3218      	adds	r2, #24
 80008d0:	443a      	add	r2, r7
 80008d2:	f812 4c0c 	ldrb.w	r4, [r2, #-12]
 80008d6:	4856      	ldr	r0, [pc, #344]	; (8000a30 <RGBLedMatrix_Display+0x3bc>)
 80008d8:	461a      	mov	r2, r3
 80008da:	0052      	lsls	r2, r2, #1
 80008dc:	441a      	add	r2, r3
 80008de:	460b      	mov	r3, r1
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	440b      	add	r3, r1
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	4413      	add	r3, r2
 80008e8:	4403      	add	r3, r0
 80008ea:	3301      	adds	r3, #1
 80008ec:	4622      	mov	r2, r4
 80008ee:	701a      	strb	r2, [r3, #0]
 80008f0:	e00e      	b.n	8000910 <RGBLedMatrix_Display+0x29c>
					SPI_buffer[i][j][1] = 0xFF;
 80008f2:	7df9      	ldrb	r1, [r7, #23]
 80008f4:	7dbb      	ldrb	r3, [r7, #22]
 80008f6:	484e      	ldr	r0, [pc, #312]	; (8000a30 <RGBLedMatrix_Display+0x3bc>)
 80008f8:	461a      	mov	r2, r3
 80008fa:	0052      	lsls	r2, r2, #1
 80008fc:	441a      	add	r2, r3
 80008fe:	460b      	mov	r3, r1
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	440b      	add	r3, r1
 8000904:	00db      	lsls	r3, r3, #3
 8000906:	4413      	add	r3, r2
 8000908:	4403      	add	r3, r0
 800090a:	3301      	adds	r3, #1
 800090c:	22ff      	movs	r2, #255	; 0xff
 800090e:	701a      	strb	r2, [r3, #0]
				if ((secondary_color.red >> j) & 0x01) {
 8000910:	4b48      	ldr	r3, [pc, #288]	; (8000a34 <RGBLedMatrix_Display+0x3c0>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	7dbb      	ldrb	r3, [r7, #22]
 8000918:	fa42 f303 	asr.w	r3, r2, r3
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	2b00      	cmp	r3, #0
 8000922:	d014      	beq.n	800094e <RGBLedMatrix_Display+0x2da>
					SPI_buffer[i][j][2] =  marks[i];
 8000924:	7dfa      	ldrb	r2, [r7, #23]
 8000926:	7df9      	ldrb	r1, [r7, #23]
 8000928:	7dbb      	ldrb	r3, [r7, #22]
 800092a:	3218      	adds	r2, #24
 800092c:	443a      	add	r2, r7
 800092e:	f812 4c0c 	ldrb.w	r4, [r2, #-12]
 8000932:	483f      	ldr	r0, [pc, #252]	; (8000a30 <RGBLedMatrix_Display+0x3bc>)
 8000934:	461a      	mov	r2, r3
 8000936:	0052      	lsls	r2, r2, #1
 8000938:	441a      	add	r2, r3
 800093a:	460b      	mov	r3, r1
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	440b      	add	r3, r1
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	4413      	add	r3, r2
 8000944:	4403      	add	r3, r0
 8000946:	3302      	adds	r3, #2
 8000948:	4622      	mov	r2, r4
 800094a:	701a      	strb	r2, [r3, #0]
 800094c:	e00e      	b.n	800096c <RGBLedMatrix_Display+0x2f8>
					SPI_buffer[i][j][2] = 0xFF;
 800094e:	7df9      	ldrb	r1, [r7, #23]
 8000950:	7dbb      	ldrb	r3, [r7, #22]
 8000952:	4837      	ldr	r0, [pc, #220]	; (8000a30 <RGBLedMatrix_Display+0x3bc>)
 8000954:	461a      	mov	r2, r3
 8000956:	0052      	lsls	r2, r2, #1
 8000958:	441a      	add	r2, r3
 800095a:	460b      	mov	r3, r1
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	440b      	add	r3, r1
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	4413      	add	r3, r2
 8000964:	4403      	add	r3, r0
 8000966:	3302      	adds	r3, #2
 8000968:	22ff      	movs	r2, #255	; 0xff
 800096a:	701a      	strb	r2, [r3, #0]
			for (j = 0; j < BIT_NUM; j++) {
 800096c:	7dbb      	ldrb	r3, [r7, #22]
 800096e:	3301      	adds	r3, #1
 8000970:	75bb      	strb	r3, [r7, #22]
 8000972:	7dbb      	ldrb	r3, [r7, #22]
 8000974:	2b07      	cmp	r3, #7
 8000976:	f67f af71 	bls.w	800085c <RGBLedMatrix_Display+0x1e8>
		for (i = 0; i < ROW_SIZE / 2; i++){
 800097a:	7dfb      	ldrb	r3, [r7, #23]
 800097c:	3301      	adds	r3, #1
 800097e:	75fb      	strb	r3, [r7, #23]
 8000980:	7dfb      	ldrb	r3, [r7, #23]
 8000982:	2b03      	cmp	r3, #3
 8000984:	f67f af67 	bls.w	8000856 <RGBLedMatrix_Display+0x1e2>
		for (i = ROW_SIZE / 2; i < ROW_SIZE; i++){
 8000988:	2304      	movs	r3, #4
 800098a:	75fb      	strb	r3, [r7, #23]
 800098c:	e09b      	b.n	8000ac6 <RGBLedMatrix_Display+0x452>
			for (j = 0; j < BIT_NUM; j++) {
 800098e:	2300      	movs	r3, #0
 8000990:	75bb      	strb	r3, [r7, #22]
 8000992:	e091      	b.n	8000ab8 <RGBLedMatrix_Display+0x444>
				if ((primary_color.blue >> j) & 0x01) {
 8000994:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <RGBLedMatrix_Display+0x3b8>)
 8000996:	789b      	ldrb	r3, [r3, #2]
 8000998:	461a      	mov	r2, r3
 800099a:	7dbb      	ldrb	r3, [r7, #22]
 800099c:	fa42 f303 	asr.w	r3, r2, r3
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d013      	beq.n	80009d0 <RGBLedMatrix_Display+0x35c>
					SPI_buffer[i][j][0] =  marks[i];
 80009a8:	7dfa      	ldrb	r2, [r7, #23]
 80009aa:	7df9      	ldrb	r1, [r7, #23]
 80009ac:	7dbb      	ldrb	r3, [r7, #22]
 80009ae:	3218      	adds	r2, #24
 80009b0:	443a      	add	r2, r7
 80009b2:	f812 4c0c 	ldrb.w	r4, [r2, #-12]
 80009b6:	481e      	ldr	r0, [pc, #120]	; (8000a30 <RGBLedMatrix_Display+0x3bc>)
 80009b8:	461a      	mov	r2, r3
 80009ba:	0052      	lsls	r2, r2, #1
 80009bc:	441a      	add	r2, r3
 80009be:	460b      	mov	r3, r1
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	440b      	add	r3, r1
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	4413      	add	r3, r2
 80009c8:	4403      	add	r3, r0
 80009ca:	4622      	mov	r2, r4
 80009cc:	701a      	strb	r2, [r3, #0]
 80009ce:	e00d      	b.n	80009ec <RGBLedMatrix_Display+0x378>
					SPI_buffer[i][j][0] = 0xFF;
 80009d0:	7df9      	ldrb	r1, [r7, #23]
 80009d2:	7dbb      	ldrb	r3, [r7, #22]
 80009d4:	4816      	ldr	r0, [pc, #88]	; (8000a30 <RGBLedMatrix_Display+0x3bc>)
 80009d6:	461a      	mov	r2, r3
 80009d8:	0052      	lsls	r2, r2, #1
 80009da:	441a      	add	r2, r3
 80009dc:	460b      	mov	r3, r1
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	440b      	add	r3, r1
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	4413      	add	r3, r2
 80009e6:	4403      	add	r3, r0
 80009e8:	22ff      	movs	r2, #255	; 0xff
 80009ea:	701a      	strb	r2, [r3, #0]
				if ((primary_color.green >> j) & 0x01) {
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <RGBLedMatrix_Display+0x3b8>)
 80009ee:	785b      	ldrb	r3, [r3, #1]
 80009f0:	461a      	mov	r2, r3
 80009f2:	7dbb      	ldrb	r3, [r7, #22]
 80009f4:	fa42 f303 	asr.w	r3, r2, r3
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d01b      	beq.n	8000a38 <RGBLedMatrix_Display+0x3c4>
					SPI_buffer[i][j][1] =  marks[i];
 8000a00:	7dfa      	ldrb	r2, [r7, #23]
 8000a02:	7df9      	ldrb	r1, [r7, #23]
 8000a04:	7dbb      	ldrb	r3, [r7, #22]
 8000a06:	3218      	adds	r2, #24
 8000a08:	443a      	add	r2, r7
 8000a0a:	f812 4c0c 	ldrb.w	r4, [r2, #-12]
 8000a0e:	4808      	ldr	r0, [pc, #32]	; (8000a30 <RGBLedMatrix_Display+0x3bc>)
 8000a10:	461a      	mov	r2, r3
 8000a12:	0052      	lsls	r2, r2, #1
 8000a14:	441a      	add	r2, r3
 8000a16:	460b      	mov	r3, r1
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	440b      	add	r3, r1
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	4413      	add	r3, r2
 8000a20:	4403      	add	r3, r0
 8000a22:	3301      	adds	r3, #1
 8000a24:	4622      	mov	r2, r4
 8000a26:	701a      	strb	r2, [r3, #0]
 8000a28:	e015      	b.n	8000a56 <RGBLedMatrix_Display+0x3e2>
 8000a2a:	bf00      	nop
 8000a2c:	20000338 	.word	0x20000338
 8000a30:	20000278 	.word	0x20000278
 8000a34:	2000033c 	.word	0x2000033c
					SPI_buffer[i][j][1] = 0xFF;
 8000a38:	7df9      	ldrb	r1, [r7, #23]
 8000a3a:	7dbb      	ldrb	r3, [r7, #22]
 8000a3c:	48c2      	ldr	r0, [pc, #776]	; (8000d48 <RGBLedMatrix_Display+0x6d4>)
 8000a3e:	461a      	mov	r2, r3
 8000a40:	0052      	lsls	r2, r2, #1
 8000a42:	441a      	add	r2, r3
 8000a44:	460b      	mov	r3, r1
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	440b      	add	r3, r1
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	4413      	add	r3, r2
 8000a4e:	4403      	add	r3, r0
 8000a50:	3301      	adds	r3, #1
 8000a52:	22ff      	movs	r2, #255	; 0xff
 8000a54:	701a      	strb	r2, [r3, #0]
				if ((primary_color.red >> j) & 0x01) {
 8000a56:	4bbd      	ldr	r3, [pc, #756]	; (8000d4c <RGBLedMatrix_Display+0x6d8>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	7dbb      	ldrb	r3, [r7, #22]
 8000a5e:	fa42 f303 	asr.w	r3, r2, r3
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d014      	beq.n	8000a94 <RGBLedMatrix_Display+0x420>
					SPI_buffer[i][j][2] =  marks[i];
 8000a6a:	7dfa      	ldrb	r2, [r7, #23]
 8000a6c:	7df9      	ldrb	r1, [r7, #23]
 8000a6e:	7dbb      	ldrb	r3, [r7, #22]
 8000a70:	3218      	adds	r2, #24
 8000a72:	443a      	add	r2, r7
 8000a74:	f812 4c0c 	ldrb.w	r4, [r2, #-12]
 8000a78:	48b3      	ldr	r0, [pc, #716]	; (8000d48 <RGBLedMatrix_Display+0x6d4>)
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	0052      	lsls	r2, r2, #1
 8000a7e:	441a      	add	r2, r3
 8000a80:	460b      	mov	r3, r1
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	440b      	add	r3, r1
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	4413      	add	r3, r2
 8000a8a:	4403      	add	r3, r0
 8000a8c:	3302      	adds	r3, #2
 8000a8e:	4622      	mov	r2, r4
 8000a90:	701a      	strb	r2, [r3, #0]
 8000a92:	e00e      	b.n	8000ab2 <RGBLedMatrix_Display+0x43e>
					SPI_buffer[i][j][2] = 0xFF;
 8000a94:	7df9      	ldrb	r1, [r7, #23]
 8000a96:	7dbb      	ldrb	r3, [r7, #22]
 8000a98:	48ab      	ldr	r0, [pc, #684]	; (8000d48 <RGBLedMatrix_Display+0x6d4>)
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	0052      	lsls	r2, r2, #1
 8000a9e:	441a      	add	r2, r3
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	440b      	add	r3, r1
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4403      	add	r3, r0
 8000aac:	3302      	adds	r3, #2
 8000aae:	22ff      	movs	r2, #255	; 0xff
 8000ab0:	701a      	strb	r2, [r3, #0]
			for (j = 0; j < BIT_NUM; j++) {
 8000ab2:	7dbb      	ldrb	r3, [r7, #22]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	75bb      	strb	r3, [r7, #22]
 8000ab8:	7dbb      	ldrb	r3, [r7, #22]
 8000aba:	2b07      	cmp	r3, #7
 8000abc:	f67f af6a 	bls.w	8000994 <RGBLedMatrix_Display+0x320>
		for (i = ROW_SIZE / 2; i < ROW_SIZE; i++){
 8000ac0:	7dfb      	ldrb	r3, [r7, #23]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	75fb      	strb	r3, [r7, #23]
 8000ac6:	7dfb      	ldrb	r3, [r7, #23]
 8000ac8:	2b07      	cmp	r3, #7
 8000aca:	f67f af60 	bls.w	800098e <RGBLedMatrix_Display+0x31a>
		break;
 8000ace:	e1dd      	b.n	8000e8c <RGBLedMatrix_Display+0x818>
		for (i = 0; i < ROW_SIZE / 3; i++){
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	75fb      	strb	r3, [r7, #23]
 8000ad4:	e094      	b.n	8000c00 <RGBLedMatrix_Display+0x58c>
			for (j = 0; j < BIT_NUM; j++) {
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	75bb      	strb	r3, [r7, #22]
 8000ada:	e08a      	b.n	8000bf2 <RGBLedMatrix_Display+0x57e>
				if ((tertiary_color.blue >> j) & 0x01) {
 8000adc:	4b9c      	ldr	r3, [pc, #624]	; (8000d50 <RGBLedMatrix_Display+0x6dc>)
 8000ade:	789b      	ldrb	r3, [r3, #2]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	7dbb      	ldrb	r3, [r7, #22]
 8000ae4:	fa42 f303 	asr.w	r3, r2, r3
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d013      	beq.n	8000b18 <RGBLedMatrix_Display+0x4a4>
					SPI_buffer[i][j][0] =  marks[i];
 8000af0:	7dfa      	ldrb	r2, [r7, #23]
 8000af2:	7df9      	ldrb	r1, [r7, #23]
 8000af4:	7dbb      	ldrb	r3, [r7, #22]
 8000af6:	3218      	adds	r2, #24
 8000af8:	443a      	add	r2, r7
 8000afa:	f812 4c0c 	ldrb.w	r4, [r2, #-12]
 8000afe:	4892      	ldr	r0, [pc, #584]	; (8000d48 <RGBLedMatrix_Display+0x6d4>)
 8000b00:	461a      	mov	r2, r3
 8000b02:	0052      	lsls	r2, r2, #1
 8000b04:	441a      	add	r2, r3
 8000b06:	460b      	mov	r3, r1
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	440b      	add	r3, r1
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	4413      	add	r3, r2
 8000b10:	4403      	add	r3, r0
 8000b12:	4622      	mov	r2, r4
 8000b14:	701a      	strb	r2, [r3, #0]
 8000b16:	e00d      	b.n	8000b34 <RGBLedMatrix_Display+0x4c0>
					SPI_buffer[i][j][0] = 0xFF;
 8000b18:	7df9      	ldrb	r1, [r7, #23]
 8000b1a:	7dbb      	ldrb	r3, [r7, #22]
 8000b1c:	488a      	ldr	r0, [pc, #552]	; (8000d48 <RGBLedMatrix_Display+0x6d4>)
 8000b1e:	461a      	mov	r2, r3
 8000b20:	0052      	lsls	r2, r2, #1
 8000b22:	441a      	add	r2, r3
 8000b24:	460b      	mov	r3, r1
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	440b      	add	r3, r1
 8000b2a:	00db      	lsls	r3, r3, #3
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4403      	add	r3, r0
 8000b30:	22ff      	movs	r2, #255	; 0xff
 8000b32:	701a      	strb	r2, [r3, #0]
				if ((tertiary_color.green >> j) & 0x01) {
 8000b34:	4b86      	ldr	r3, [pc, #536]	; (8000d50 <RGBLedMatrix_Display+0x6dc>)
 8000b36:	785b      	ldrb	r3, [r3, #1]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	7dbb      	ldrb	r3, [r7, #22]
 8000b3c:	fa42 f303 	asr.w	r3, r2, r3
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d014      	beq.n	8000b72 <RGBLedMatrix_Display+0x4fe>
					SPI_buffer[i][j][1] =  marks[i];
 8000b48:	7dfa      	ldrb	r2, [r7, #23]
 8000b4a:	7df9      	ldrb	r1, [r7, #23]
 8000b4c:	7dbb      	ldrb	r3, [r7, #22]
 8000b4e:	3218      	adds	r2, #24
 8000b50:	443a      	add	r2, r7
 8000b52:	f812 4c0c 	ldrb.w	r4, [r2, #-12]
 8000b56:	487c      	ldr	r0, [pc, #496]	; (8000d48 <RGBLedMatrix_Display+0x6d4>)
 8000b58:	461a      	mov	r2, r3
 8000b5a:	0052      	lsls	r2, r2, #1
 8000b5c:	441a      	add	r2, r3
 8000b5e:	460b      	mov	r3, r1
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	440b      	add	r3, r1
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	4413      	add	r3, r2
 8000b68:	4403      	add	r3, r0
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	4622      	mov	r2, r4
 8000b6e:	701a      	strb	r2, [r3, #0]
 8000b70:	e00e      	b.n	8000b90 <RGBLedMatrix_Display+0x51c>
					SPI_buffer[i][j][1] = 0xFF;
 8000b72:	7df9      	ldrb	r1, [r7, #23]
 8000b74:	7dbb      	ldrb	r3, [r7, #22]
 8000b76:	4874      	ldr	r0, [pc, #464]	; (8000d48 <RGBLedMatrix_Display+0x6d4>)
 8000b78:	461a      	mov	r2, r3
 8000b7a:	0052      	lsls	r2, r2, #1
 8000b7c:	441a      	add	r2, r3
 8000b7e:	460b      	mov	r3, r1
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	440b      	add	r3, r1
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	4413      	add	r3, r2
 8000b88:	4403      	add	r3, r0
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	22ff      	movs	r2, #255	; 0xff
 8000b8e:	701a      	strb	r2, [r3, #0]
				if ((tertiary_color.red >> j) & 0x01) {
 8000b90:	4b6f      	ldr	r3, [pc, #444]	; (8000d50 <RGBLedMatrix_Display+0x6dc>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	7dbb      	ldrb	r3, [r7, #22]
 8000b98:	fa42 f303 	asr.w	r3, r2, r3
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d014      	beq.n	8000bce <RGBLedMatrix_Display+0x55a>
					SPI_buffer[i][j][2] =  marks[i];
 8000ba4:	7dfa      	ldrb	r2, [r7, #23]
 8000ba6:	7df9      	ldrb	r1, [r7, #23]
 8000ba8:	7dbb      	ldrb	r3, [r7, #22]
 8000baa:	3218      	adds	r2, #24
 8000bac:	443a      	add	r2, r7
 8000bae:	f812 4c0c 	ldrb.w	r4, [r2, #-12]
 8000bb2:	4865      	ldr	r0, [pc, #404]	; (8000d48 <RGBLedMatrix_Display+0x6d4>)
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	0052      	lsls	r2, r2, #1
 8000bb8:	441a      	add	r2, r3
 8000bba:	460b      	mov	r3, r1
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	440b      	add	r3, r1
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4403      	add	r3, r0
 8000bc6:	3302      	adds	r3, #2
 8000bc8:	4622      	mov	r2, r4
 8000bca:	701a      	strb	r2, [r3, #0]
 8000bcc:	e00e      	b.n	8000bec <RGBLedMatrix_Display+0x578>
					SPI_buffer[i][j][2] = 0xFF;
 8000bce:	7df9      	ldrb	r1, [r7, #23]
 8000bd0:	7dbb      	ldrb	r3, [r7, #22]
 8000bd2:	485d      	ldr	r0, [pc, #372]	; (8000d48 <RGBLedMatrix_Display+0x6d4>)
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	0052      	lsls	r2, r2, #1
 8000bd8:	441a      	add	r2, r3
 8000bda:	460b      	mov	r3, r1
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	440b      	add	r3, r1
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	4413      	add	r3, r2
 8000be4:	4403      	add	r3, r0
 8000be6:	3302      	adds	r3, #2
 8000be8:	22ff      	movs	r2, #255	; 0xff
 8000bea:	701a      	strb	r2, [r3, #0]
			for (j = 0; j < BIT_NUM; j++) {
 8000bec:	7dbb      	ldrb	r3, [r7, #22]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	75bb      	strb	r3, [r7, #22]
 8000bf2:	7dbb      	ldrb	r3, [r7, #22]
 8000bf4:	2b07      	cmp	r3, #7
 8000bf6:	f67f af71 	bls.w	8000adc <RGBLedMatrix_Display+0x468>
		for (i = 0; i < ROW_SIZE / 3; i++){
 8000bfa:	7dfb      	ldrb	r3, [r7, #23]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	75fb      	strb	r3, [r7, #23]
 8000c00:	7dfb      	ldrb	r3, [r7, #23]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	f67f af67 	bls.w	8000ad6 <RGBLedMatrix_Display+0x462>
		for (i = ROW_SIZE / 3; i <= ROW_SIZE / 2; i++){
 8000c08:	2302      	movs	r3, #2
 8000c0a:	75fb      	strb	r3, [r7, #23]
 8000c0c:	e094      	b.n	8000d38 <RGBLedMatrix_Display+0x6c4>
			for (j = 0; j < BIT_NUM; j++) {
 8000c0e:	2300      	movs	r3, #0
 8000c10:	75bb      	strb	r3, [r7, #22]
 8000c12:	e08a      	b.n	8000d2a <RGBLedMatrix_Display+0x6b6>
				if ((secondary_color.blue >> j) & 0x01) {
 8000c14:	4b4f      	ldr	r3, [pc, #316]	; (8000d54 <RGBLedMatrix_Display+0x6e0>)
 8000c16:	789b      	ldrb	r3, [r3, #2]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	7dbb      	ldrb	r3, [r7, #22]
 8000c1c:	fa42 f303 	asr.w	r3, r2, r3
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d013      	beq.n	8000c50 <RGBLedMatrix_Display+0x5dc>
					SPI_buffer[i][j][0] =  marks[i];
 8000c28:	7dfa      	ldrb	r2, [r7, #23]
 8000c2a:	7df9      	ldrb	r1, [r7, #23]
 8000c2c:	7dbb      	ldrb	r3, [r7, #22]
 8000c2e:	3218      	adds	r2, #24
 8000c30:	443a      	add	r2, r7
 8000c32:	f812 4c0c 	ldrb.w	r4, [r2, #-12]
 8000c36:	4844      	ldr	r0, [pc, #272]	; (8000d48 <RGBLedMatrix_Display+0x6d4>)
 8000c38:	461a      	mov	r2, r3
 8000c3a:	0052      	lsls	r2, r2, #1
 8000c3c:	441a      	add	r2, r3
 8000c3e:	460b      	mov	r3, r1
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	440b      	add	r3, r1
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	4413      	add	r3, r2
 8000c48:	4403      	add	r3, r0
 8000c4a:	4622      	mov	r2, r4
 8000c4c:	701a      	strb	r2, [r3, #0]
 8000c4e:	e00d      	b.n	8000c6c <RGBLedMatrix_Display+0x5f8>
					SPI_buffer[i][j][0] = 0xFF;
 8000c50:	7df9      	ldrb	r1, [r7, #23]
 8000c52:	7dbb      	ldrb	r3, [r7, #22]
 8000c54:	483c      	ldr	r0, [pc, #240]	; (8000d48 <RGBLedMatrix_Display+0x6d4>)
 8000c56:	461a      	mov	r2, r3
 8000c58:	0052      	lsls	r2, r2, #1
 8000c5a:	441a      	add	r2, r3
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	440b      	add	r3, r1
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	4413      	add	r3, r2
 8000c66:	4403      	add	r3, r0
 8000c68:	22ff      	movs	r2, #255	; 0xff
 8000c6a:	701a      	strb	r2, [r3, #0]
				if ((secondary_color.green >> j) & 0x01) {
 8000c6c:	4b39      	ldr	r3, [pc, #228]	; (8000d54 <RGBLedMatrix_Display+0x6e0>)
 8000c6e:	785b      	ldrb	r3, [r3, #1]
 8000c70:	461a      	mov	r2, r3
 8000c72:	7dbb      	ldrb	r3, [r7, #22]
 8000c74:	fa42 f303 	asr.w	r3, r2, r3
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d014      	beq.n	8000caa <RGBLedMatrix_Display+0x636>
					SPI_buffer[i][j][1] =  marks[i];
 8000c80:	7dfa      	ldrb	r2, [r7, #23]
 8000c82:	7df9      	ldrb	r1, [r7, #23]
 8000c84:	7dbb      	ldrb	r3, [r7, #22]
 8000c86:	3218      	adds	r2, #24
 8000c88:	443a      	add	r2, r7
 8000c8a:	f812 4c0c 	ldrb.w	r4, [r2, #-12]
 8000c8e:	482e      	ldr	r0, [pc, #184]	; (8000d48 <RGBLedMatrix_Display+0x6d4>)
 8000c90:	461a      	mov	r2, r3
 8000c92:	0052      	lsls	r2, r2, #1
 8000c94:	441a      	add	r2, r3
 8000c96:	460b      	mov	r3, r1
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	440b      	add	r3, r1
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4403      	add	r3, r0
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	4622      	mov	r2, r4
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	e00e      	b.n	8000cc8 <RGBLedMatrix_Display+0x654>
					SPI_buffer[i][j][1] = 0xFF;
 8000caa:	7df9      	ldrb	r1, [r7, #23]
 8000cac:	7dbb      	ldrb	r3, [r7, #22]
 8000cae:	4826      	ldr	r0, [pc, #152]	; (8000d48 <RGBLedMatrix_Display+0x6d4>)
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	441a      	add	r2, r3
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	440b      	add	r3, r1
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4403      	add	r3, r0
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	22ff      	movs	r2, #255	; 0xff
 8000cc6:	701a      	strb	r2, [r3, #0]
				if ((secondary_color.red >> j) & 0x01) {
 8000cc8:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <RGBLedMatrix_Display+0x6e0>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	7dbb      	ldrb	r3, [r7, #22]
 8000cd0:	fa42 f303 	asr.w	r3, r2, r3
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d014      	beq.n	8000d06 <RGBLedMatrix_Display+0x692>
					SPI_buffer[i][j][2] =  marks[i];
 8000cdc:	7dfa      	ldrb	r2, [r7, #23]
 8000cde:	7df9      	ldrb	r1, [r7, #23]
 8000ce0:	7dbb      	ldrb	r3, [r7, #22]
 8000ce2:	3218      	adds	r2, #24
 8000ce4:	443a      	add	r2, r7
 8000ce6:	f812 4c0c 	ldrb.w	r4, [r2, #-12]
 8000cea:	4817      	ldr	r0, [pc, #92]	; (8000d48 <RGBLedMatrix_Display+0x6d4>)
 8000cec:	461a      	mov	r2, r3
 8000cee:	0052      	lsls	r2, r2, #1
 8000cf0:	441a      	add	r2, r3
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	440b      	add	r3, r1
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4403      	add	r3, r0
 8000cfe:	3302      	adds	r3, #2
 8000d00:	4622      	mov	r2, r4
 8000d02:	701a      	strb	r2, [r3, #0]
 8000d04:	e00e      	b.n	8000d24 <RGBLedMatrix_Display+0x6b0>
					SPI_buffer[i][j][2] = 0xFF;
 8000d06:	7df9      	ldrb	r1, [r7, #23]
 8000d08:	7dbb      	ldrb	r3, [r7, #22]
 8000d0a:	480f      	ldr	r0, [pc, #60]	; (8000d48 <RGBLedMatrix_Display+0x6d4>)
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	0052      	lsls	r2, r2, #1
 8000d10:	441a      	add	r2, r3
 8000d12:	460b      	mov	r3, r1
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	440b      	add	r3, r1
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	4413      	add	r3, r2
 8000d1c:	4403      	add	r3, r0
 8000d1e:	3302      	adds	r3, #2
 8000d20:	22ff      	movs	r2, #255	; 0xff
 8000d22:	701a      	strb	r2, [r3, #0]
			for (j = 0; j < BIT_NUM; j++) {
 8000d24:	7dbb      	ldrb	r3, [r7, #22]
 8000d26:	3301      	adds	r3, #1
 8000d28:	75bb      	strb	r3, [r7, #22]
 8000d2a:	7dbb      	ldrb	r3, [r7, #22]
 8000d2c:	2b07      	cmp	r3, #7
 8000d2e:	f67f af71 	bls.w	8000c14 <RGBLedMatrix_Display+0x5a0>
		for (i = ROW_SIZE / 3; i <= ROW_SIZE / 2; i++){
 8000d32:	7dfb      	ldrb	r3, [r7, #23]
 8000d34:	3301      	adds	r3, #1
 8000d36:	75fb      	strb	r3, [r7, #23]
 8000d38:	7dfb      	ldrb	r3, [r7, #23]
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	f67f af67 	bls.w	8000c0e <RGBLedMatrix_Display+0x59a>
		for (i = ROW_SIZE / 2 + 1; i < ROW_SIZE; i++){
 8000d40:	2305      	movs	r3, #5
 8000d42:	75fb      	strb	r3, [r7, #23]
 8000d44:	e09d      	b.n	8000e82 <RGBLedMatrix_Display+0x80e>
 8000d46:	bf00      	nop
 8000d48:	20000278 	.word	0x20000278
 8000d4c:	20000338 	.word	0x20000338
 8000d50:	20000340 	.word	0x20000340
 8000d54:	2000033c 	.word	0x2000033c
			for (j = 0; j < BIT_NUM; j++) {
 8000d58:	2300      	movs	r3, #0
 8000d5a:	75bb      	strb	r3, [r7, #22]
 8000d5c:	e08a      	b.n	8000e74 <RGBLedMatrix_Display+0x800>
				if ((primary_color.blue >> j) & 0x01) {
 8000d5e:	4b4e      	ldr	r3, [pc, #312]	; (8000e98 <RGBLedMatrix_Display+0x824>)
 8000d60:	789b      	ldrb	r3, [r3, #2]
 8000d62:	461a      	mov	r2, r3
 8000d64:	7dbb      	ldrb	r3, [r7, #22]
 8000d66:	fa42 f303 	asr.w	r3, r2, r3
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d013      	beq.n	8000d9a <RGBLedMatrix_Display+0x726>
					SPI_buffer[i][j][0] =  marks[i];
 8000d72:	7dfa      	ldrb	r2, [r7, #23]
 8000d74:	7df9      	ldrb	r1, [r7, #23]
 8000d76:	7dbb      	ldrb	r3, [r7, #22]
 8000d78:	3218      	adds	r2, #24
 8000d7a:	443a      	add	r2, r7
 8000d7c:	f812 4c0c 	ldrb.w	r4, [r2, #-12]
 8000d80:	4846      	ldr	r0, [pc, #280]	; (8000e9c <RGBLedMatrix_Display+0x828>)
 8000d82:	461a      	mov	r2, r3
 8000d84:	0052      	lsls	r2, r2, #1
 8000d86:	441a      	add	r2, r3
 8000d88:	460b      	mov	r3, r1
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	440b      	add	r3, r1
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	4413      	add	r3, r2
 8000d92:	4403      	add	r3, r0
 8000d94:	4622      	mov	r2, r4
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	e00d      	b.n	8000db6 <RGBLedMatrix_Display+0x742>
					SPI_buffer[i][j][0] = 0xFF;
 8000d9a:	7df9      	ldrb	r1, [r7, #23]
 8000d9c:	7dbb      	ldrb	r3, [r7, #22]
 8000d9e:	483f      	ldr	r0, [pc, #252]	; (8000e9c <RGBLedMatrix_Display+0x828>)
 8000da0:	461a      	mov	r2, r3
 8000da2:	0052      	lsls	r2, r2, #1
 8000da4:	441a      	add	r2, r3
 8000da6:	460b      	mov	r3, r1
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	440b      	add	r3, r1
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	4413      	add	r3, r2
 8000db0:	4403      	add	r3, r0
 8000db2:	22ff      	movs	r2, #255	; 0xff
 8000db4:	701a      	strb	r2, [r3, #0]
				if ((primary_color.green >> j) & 0x01) {
 8000db6:	4b38      	ldr	r3, [pc, #224]	; (8000e98 <RGBLedMatrix_Display+0x824>)
 8000db8:	785b      	ldrb	r3, [r3, #1]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	7dbb      	ldrb	r3, [r7, #22]
 8000dbe:	fa42 f303 	asr.w	r3, r2, r3
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d014      	beq.n	8000df4 <RGBLedMatrix_Display+0x780>
					SPI_buffer[i][j][1] =  marks[i];
 8000dca:	7dfa      	ldrb	r2, [r7, #23]
 8000dcc:	7df9      	ldrb	r1, [r7, #23]
 8000dce:	7dbb      	ldrb	r3, [r7, #22]
 8000dd0:	3218      	adds	r2, #24
 8000dd2:	443a      	add	r2, r7
 8000dd4:	f812 4c0c 	ldrb.w	r4, [r2, #-12]
 8000dd8:	4830      	ldr	r0, [pc, #192]	; (8000e9c <RGBLedMatrix_Display+0x828>)
 8000dda:	461a      	mov	r2, r3
 8000ddc:	0052      	lsls	r2, r2, #1
 8000dde:	441a      	add	r2, r3
 8000de0:	460b      	mov	r3, r1
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	440b      	add	r3, r1
 8000de6:	00db      	lsls	r3, r3, #3
 8000de8:	4413      	add	r3, r2
 8000dea:	4403      	add	r3, r0
 8000dec:	3301      	adds	r3, #1
 8000dee:	4622      	mov	r2, r4
 8000df0:	701a      	strb	r2, [r3, #0]
 8000df2:	e00e      	b.n	8000e12 <RGBLedMatrix_Display+0x79e>
					SPI_buffer[i][j][1] = 0xFF;
 8000df4:	7df9      	ldrb	r1, [r7, #23]
 8000df6:	7dbb      	ldrb	r3, [r7, #22]
 8000df8:	4828      	ldr	r0, [pc, #160]	; (8000e9c <RGBLedMatrix_Display+0x828>)
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	0052      	lsls	r2, r2, #1
 8000dfe:	441a      	add	r2, r3
 8000e00:	460b      	mov	r3, r1
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	440b      	add	r3, r1
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	4413      	add	r3, r2
 8000e0a:	4403      	add	r3, r0
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	22ff      	movs	r2, #255	; 0xff
 8000e10:	701a      	strb	r2, [r3, #0]
				if ((primary_color.red >> j) & 0x01) {
 8000e12:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <RGBLedMatrix_Display+0x824>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	7dbb      	ldrb	r3, [r7, #22]
 8000e1a:	fa42 f303 	asr.w	r3, r2, r3
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d014      	beq.n	8000e50 <RGBLedMatrix_Display+0x7dc>
					SPI_buffer[i][j][2] =  marks[i];
 8000e26:	7dfa      	ldrb	r2, [r7, #23]
 8000e28:	7df9      	ldrb	r1, [r7, #23]
 8000e2a:	7dbb      	ldrb	r3, [r7, #22]
 8000e2c:	3218      	adds	r2, #24
 8000e2e:	443a      	add	r2, r7
 8000e30:	f812 4c0c 	ldrb.w	r4, [r2, #-12]
 8000e34:	4819      	ldr	r0, [pc, #100]	; (8000e9c <RGBLedMatrix_Display+0x828>)
 8000e36:	461a      	mov	r2, r3
 8000e38:	0052      	lsls	r2, r2, #1
 8000e3a:	441a      	add	r2, r3
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	440b      	add	r3, r1
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	4413      	add	r3, r2
 8000e46:	4403      	add	r3, r0
 8000e48:	3302      	adds	r3, #2
 8000e4a:	4622      	mov	r2, r4
 8000e4c:	701a      	strb	r2, [r3, #0]
 8000e4e:	e00e      	b.n	8000e6e <RGBLedMatrix_Display+0x7fa>
					SPI_buffer[i][j][2] = 0xFF;
 8000e50:	7df9      	ldrb	r1, [r7, #23]
 8000e52:	7dbb      	ldrb	r3, [r7, #22]
 8000e54:	4811      	ldr	r0, [pc, #68]	; (8000e9c <RGBLedMatrix_Display+0x828>)
 8000e56:	461a      	mov	r2, r3
 8000e58:	0052      	lsls	r2, r2, #1
 8000e5a:	441a      	add	r2, r3
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	440b      	add	r3, r1
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	4413      	add	r3, r2
 8000e66:	4403      	add	r3, r0
 8000e68:	3302      	adds	r3, #2
 8000e6a:	22ff      	movs	r2, #255	; 0xff
 8000e6c:	701a      	strb	r2, [r3, #0]
			for (j = 0; j < BIT_NUM; j++) {
 8000e6e:	7dbb      	ldrb	r3, [r7, #22]
 8000e70:	3301      	adds	r3, #1
 8000e72:	75bb      	strb	r3, [r7, #22]
 8000e74:	7dbb      	ldrb	r3, [r7, #22]
 8000e76:	2b07      	cmp	r3, #7
 8000e78:	f67f af71 	bls.w	8000d5e <RGBLedMatrix_Display+0x6ea>
		for (i = ROW_SIZE / 2 + 1; i < ROW_SIZE; i++){
 8000e7c:	7dfb      	ldrb	r3, [r7, #23]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	75fb      	strb	r3, [r7, #23]
 8000e82:	7dfb      	ldrb	r3, [r7, #23]
 8000e84:	2b07      	cmp	r3, #7
 8000e86:	f67f af67 	bls.w	8000d58 <RGBLedMatrix_Display+0x6e4>
		break;
 8000e8a:	bf00      	nop
}
 8000e8c:	bf00      	nop
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc90      	pop	{r4, r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000338 	.word	0x20000338
 8000e9c:	20000278 	.word	0x20000278

08000ea0 <CDC_ReceivedCallback>:

static void CDC_ReceivedCallback() {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
	uint8_t mode;
	uint8_t color_type;
	Color_t color;
	uint8_t i;

	for (i = 0; i < CDC_BUFFER_SIZE; i++) {
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	737b      	strb	r3, [r7, #13]
 8000eaa:	e055      	b.n	8000f58 <CDC_ReceivedCallback+0xb8>
		byte = RX_buffer[i];
 8000eac:	7b7b      	ldrb	r3, [r7, #13]
 8000eae:	4a45      	ldr	r2, [pc, #276]	; (8000fc4 <CDC_ReceivedCallback+0x124>)
 8000eb0:	5cd3      	ldrb	r3, [r2, r3]
 8000eb2:	733b      	strb	r3, [r7, #12]
		switch(i) {
 8000eb4:	7b7b      	ldrb	r3, [r7, #13]
 8000eb6:	2b07      	cmp	r3, #7
 8000eb8:	d84b      	bhi.n	8000f52 <CDC_ReceivedCallback+0xb2>
 8000eba:	a201      	add	r2, pc, #4	; (adr r2, 8000ec0 <CDC_ReceivedCallback+0x20>)
 8000ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec0:	08000ee1 	.word	0x08000ee1
 8000ec4:	08000ef1 	.word	0x08000ef1
 8000ec8:	08000f05 	.word	0x08000f05
 8000ecc:	08000f19 	.word	0x08000f19
 8000ed0:	08000f2d 	.word	0x08000f2d
 8000ed4:	08000f41 	.word	0x08000f41
 8000ed8:	08000f47 	.word	0x08000f47
 8000edc:	08000f4d 	.word	0x08000f4d
		case 0:
			mode = byte >> 4;
 8000ee0:	7b3b      	ldrb	r3, [r7, #12]
 8000ee2:	091b      	lsrs	r3, r3, #4
 8000ee4:	73fb      	strb	r3, [r7, #15]
			color_type = byte & 0x0F;
 8000ee6:	7b3b      	ldrb	r3, [r7, #12]
 8000ee8:	f003 030f 	and.w	r3, r3, #15
 8000eec:	73bb      	strb	r3, [r7, #14]
			break;
 8000eee:	e030      	b.n	8000f52 <CDC_ReceivedCallback+0xb2>
		case 1:
			magnitude_levels[0] = byte >> 4;
 8000ef0:	7b3b      	ldrb	r3, [r7, #12]
 8000ef2:	091b      	lsrs	r3, r3, #4
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	713b      	strb	r3, [r7, #4]
			magnitude_levels[1] = byte & 0x0F;
 8000ef8:	7b3b      	ldrb	r3, [r7, #12]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	717b      	strb	r3, [r7, #5]
			break;
 8000f02:	e026      	b.n	8000f52 <CDC_ReceivedCallback+0xb2>
		case 2:
			magnitude_levels[2] = byte >> 4;
 8000f04:	7b3b      	ldrb	r3, [r7, #12]
 8000f06:	091b      	lsrs	r3, r3, #4
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	71bb      	strb	r3, [r7, #6]
			magnitude_levels[3] = byte & 0x0F;
 8000f0c:	7b3b      	ldrb	r3, [r7, #12]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	71fb      	strb	r3, [r7, #7]
			break;
 8000f16:	e01c      	b.n	8000f52 <CDC_ReceivedCallback+0xb2>
		case 3:
			magnitude_levels[4] = byte >> 4;
 8000f18:	7b3b      	ldrb	r3, [r7, #12]
 8000f1a:	091b      	lsrs	r3, r3, #4
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	723b      	strb	r3, [r7, #8]
			magnitude_levels[5] = byte & 0x0F;
 8000f20:	7b3b      	ldrb	r3, [r7, #12]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	727b      	strb	r3, [r7, #9]
			break;
 8000f2a:	e012      	b.n	8000f52 <CDC_ReceivedCallback+0xb2>
		case 4:
			magnitude_levels[6] = byte >> 4;
 8000f2c:	7b3b      	ldrb	r3, [r7, #12]
 8000f2e:	091b      	lsrs	r3, r3, #4
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	72bb      	strb	r3, [r7, #10]
			magnitude_levels[7] = byte & 0x0F;
 8000f34:	7b3b      	ldrb	r3, [r7, #12]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	72fb      	strb	r3, [r7, #11]
			break;
 8000f3e:	e008      	b.n	8000f52 <CDC_ReceivedCallback+0xb2>
		case 5:
			color.red = byte;
 8000f40:	7b3b      	ldrb	r3, [r7, #12]
 8000f42:	703b      	strb	r3, [r7, #0]
			break;
 8000f44:	e005      	b.n	8000f52 <CDC_ReceivedCallback+0xb2>
		case 6:
			color.green = byte;
 8000f46:	7b3b      	ldrb	r3, [r7, #12]
 8000f48:	707b      	strb	r3, [r7, #1]
			break;
 8000f4a:	e002      	b.n	8000f52 <CDC_ReceivedCallback+0xb2>
		case 7:
			color.blue = byte;
 8000f4c:	7b3b      	ldrb	r3, [r7, #12]
 8000f4e:	70bb      	strb	r3, [r7, #2]
			break;
 8000f50:	bf00      	nop
	for (i = 0; i < CDC_BUFFER_SIZE; i++) {
 8000f52:	7b7b      	ldrb	r3, [r7, #13]
 8000f54:	3301      	adds	r3, #1
 8000f56:	737b      	strb	r3, [r7, #13]
 8000f58:	7b7b      	ldrb	r3, [r7, #13]
 8000f5a:	2b07      	cmp	r3, #7
 8000f5c:	d9a6      	bls.n	8000eac <CDC_ReceivedCallback+0xc>
		}
	}

	switch(color_type) {
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	2b03      	cmp	r3, #3
 8000f62:	d01a      	beq.n	8000f9a <CDC_ReceivedCallback+0xfa>
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	dc22      	bgt.n	8000fae <CDC_ReceivedCallback+0x10e>
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d002      	beq.n	8000f72 <CDC_ReceivedCallback+0xd2>
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d00a      	beq.n	8000f86 <CDC_ReceivedCallback+0xe6>
 8000f70:	e01d      	b.n	8000fae <CDC_ReceivedCallback+0x10e>
	case 1:
		primary_color.red = color.red;
 8000f72:	783a      	ldrb	r2, [r7, #0]
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <CDC_ReceivedCallback+0x128>)
 8000f76:	701a      	strb	r2, [r3, #0]
		primary_color.green = color.green;
 8000f78:	787a      	ldrb	r2, [r7, #1]
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <CDC_ReceivedCallback+0x128>)
 8000f7c:	705a      	strb	r2, [r3, #1]
		primary_color.blue = color.blue;
 8000f7e:	78ba      	ldrb	r2, [r7, #2]
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <CDC_ReceivedCallback+0x128>)
 8000f82:	709a      	strb	r2, [r3, #2]
		break;
 8000f84:	e013      	b.n	8000fae <CDC_ReceivedCallback+0x10e>
	case 2:
		secondary_color.red = color.red;
 8000f86:	783a      	ldrb	r2, [r7, #0]
 8000f88:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <CDC_ReceivedCallback+0x12c>)
 8000f8a:	701a      	strb	r2, [r3, #0]
		secondary_color.green = color.green;
 8000f8c:	787a      	ldrb	r2, [r7, #1]
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <CDC_ReceivedCallback+0x12c>)
 8000f90:	705a      	strb	r2, [r3, #1]
		secondary_color.blue = color.blue;
 8000f92:	78ba      	ldrb	r2, [r7, #2]
 8000f94:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <CDC_ReceivedCallback+0x12c>)
 8000f96:	709a      	strb	r2, [r3, #2]
		break;
 8000f98:	e009      	b.n	8000fae <CDC_ReceivedCallback+0x10e>
	case 3:
		tertiary_color.red = color.red;
 8000f9a:	783a      	ldrb	r2, [r7, #0]
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <CDC_ReceivedCallback+0x130>)
 8000f9e:	701a      	strb	r2, [r3, #0]
		tertiary_color.green = color.green;
 8000fa0:	787a      	ldrb	r2, [r7, #1]
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <CDC_ReceivedCallback+0x130>)
 8000fa4:	705a      	strb	r2, [r3, #1]
		tertiary_color.blue = color.blue;
 8000fa6:	78ba      	ldrb	r2, [r7, #2]
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <CDC_ReceivedCallback+0x130>)
 8000faa:	709a      	strb	r2, [r3, #2]
		break;
 8000fac:	bf00      	nop
	}

	RGBLedMatrix_Display(mode, magnitude_levels);
 8000fae:	1d3a      	adds	r2, r7, #4
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fb5d 	bl	8000674 <RGBLedMatrix_Display>
}
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000238 	.word	0x20000238
 8000fc8:	20000338 	.word	0x20000338
 8000fcc:	2000033c 	.word	0x2000033c
 8000fd0:	20000340 	.word	0x20000340

08000fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <Error_Handler+0x8>
	...

08000fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <HAL_MspInit+0x5c>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	4a14      	ldr	r2, [pc, #80]	; (800103c <HAL_MspInit+0x5c>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6193      	str	r3, [r2, #24]
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_MspInit+0x5c>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	; (800103c <HAL_MspInit+0x5c>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	4a0e      	ldr	r2, [pc, #56]	; (800103c <HAL_MspInit+0x5c>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001008:	61d3      	str	r3, [r2, #28]
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <HAL_MspInit+0x5c>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_MspInit+0x60>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_MspInit+0x60>)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	40021000 	.word	0x40021000
 8001040:	40010000 	.word	0x40010000

08001044 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a15      	ldr	r2, [pc, #84]	; (80010b4 <HAL_SPI_MspInit+0x70>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d123      	bne.n	80010ac <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <HAL_SPI_MspInit+0x74>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a13      	ldr	r2, [pc, #76]	; (80010b8 <HAL_SPI_MspInit+0x74>)
 800106a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <HAL_SPI_MspInit+0x74>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <HAL_SPI_MspInit+0x74>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <HAL_SPI_MspInit+0x74>)
 8001082:	f043 0304 	orr.w	r3, r3, #4
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_SPI_MspInit+0x74>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001094:	23a0      	movs	r3, #160	; 0xa0
 8001096:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	4619      	mov	r1, r3
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <HAL_SPI_MspInit+0x78>)
 80010a8:	f000 fa06 	bl	80014b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40013000 	.word	0x40013000
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010800 	.word	0x40010800

080010c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010d0:	d113      	bne.n	80010fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_TIM_Base_MspInit+0x44>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <HAL_TIM_Base_MspInit+0x44>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	61d3      	str	r3, [r2, #28]
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <HAL_TIM_Base_MspInit+0x44>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	201c      	movs	r0, #28
 80010f0:	f000 f9ab 	bl	800144a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010f4:	201c      	movs	r0, #28
 80010f6:	f000 f9c4 	bl	8001482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000

08001108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800110c:	e7fe      	b.n	800110c <NMI_Handler+0x4>

0800110e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <HardFault_Handler+0x4>

08001114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <MemManage_Handler+0x4>

0800111a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <BusFault_Handler+0x4>

08001120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <UsageFault_Handler+0x4>

08001126 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr

08001132 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr

0800113e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr

0800114a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114e:	f000 f889 	bl	8001264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800115e:	f000 fc78 	bl	8001a52 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000894 	.word	0x20000894

0800116c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <TIM2_IRQHandler+0x10>)
 8001172:	f002 ffa7 	bl	80040c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200001f0 	.word	0x200001f0

08001180 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800118e:	490d      	ldr	r1, [pc, #52]	; (80011c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011a4:	4c0a      	ldr	r4, [pc, #40]	; (80011d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011b2:	f7ff ffe5 	bl	8001180 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b6:	f008 f873 	bl	80092a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ba:	f7fe ffc7 	bl	800014c <main>
  bx lr
 80011be:	4770      	bx	lr
  ldr r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c4:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80011c8:	080093a4 	.word	0x080093a4
  ldr r2, =_sbss
 80011cc:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80011d0:	20000da0 	.word	0x20000da0

080011d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC1_2_IRQHandler>
	...

080011d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_Init+0x28>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <HAL_Init+0x28>)
 80011e2:	f043 0310 	orr.w	r3, r3, #16
 80011e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e8:	2003      	movs	r0, #3
 80011ea:	f000 f923 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ee:	200f      	movs	r0, #15
 80011f0:	f000 f808 	bl	8001204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f4:	f7ff fef4 	bl	8000fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40022000 	.word	0x40022000

08001204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_InitTick+0x54>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x58>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f93b 	bl	800149e <HAL_SYSTICK_Config>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00e      	b.n	8001250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d80a      	bhi.n	800124e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f000 f903 	bl	800144a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <HAL_InitTick+0x5c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000000 	.word	0x20000000
 800125c:	20000008 	.word	0x20000008
 8001260:	20000004 	.word	0x20000004

08001264 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_IncTick+0x1c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_IncTick+0x20>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a03      	ldr	r2, [pc, #12]	; (8001284 <HAL_IncTick+0x20>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	20000008 	.word	0x20000008
 8001284:	20000348 	.word	0x20000348

08001288 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return uwTick;
 800128c:	4b02      	ldr	r3, [pc, #8]	; (8001298 <HAL_GetTick+0x10>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	20000348 	.word	0x20000348

0800129c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b8:	4013      	ands	r3, r2
 80012ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ce:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	60d3      	str	r3, [r2, #12]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <__NVIC_GetPriorityGrouping+0x18>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	f003 0307 	and.w	r3, r3, #7
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	2b00      	cmp	r3, #0
 8001310:	db0b      	blt.n	800132a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	f003 021f 	and.w	r2, r3, #31
 8001318:	4906      	ldr	r1, [pc, #24]	; (8001334 <__NVIC_EnableIRQ+0x34>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	2001      	movs	r0, #1
 8001322:	fa00 f202 	lsl.w	r2, r0, r2
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	e000e100 	.word	0xe000e100

08001338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	db0a      	blt.n	8001362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	490c      	ldr	r1, [pc, #48]	; (8001384 <__NVIC_SetPriority+0x4c>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	440b      	add	r3, r1
 800135c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001360:	e00a      	b.n	8001378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4908      	ldr	r1, [pc, #32]	; (8001388 <__NVIC_SetPriority+0x50>)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	3b04      	subs	r3, #4
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	440b      	add	r3, r1
 8001376:	761a      	strb	r2, [r3, #24]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f1c3 0307 	rsb	r3, r3, #7
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	bf28      	it	cs
 80013aa:	2304      	movcs	r3, #4
 80013ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3304      	adds	r3, #4
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d902      	bls.n	80013bc <NVIC_EncodePriority+0x30>
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3b03      	subs	r3, #3
 80013ba:	e000      	b.n	80013be <NVIC_EncodePriority+0x32>
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43d9      	mvns	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	4313      	orrs	r3, r2
         );
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3724      	adds	r7, #36	; 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001400:	d301      	bcc.n	8001406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001402:	2301      	movs	r3, #1
 8001404:	e00f      	b.n	8001426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <SysTick_Config+0x40>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140e:	210f      	movs	r1, #15
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f7ff ff90 	bl	8001338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <SysTick_Config+0x40>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <SysTick_Config+0x40>)
 8001420:	2207      	movs	r2, #7
 8001422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	e000e010 	.word	0xe000e010

08001434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff2d 	bl	800129c <__NVIC_SetPriorityGrouping>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800145c:	f7ff ff42 	bl	80012e4 <__NVIC_GetPriorityGrouping>
 8001460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	6978      	ldr	r0, [r7, #20]
 8001468:	f7ff ff90 	bl	800138c <NVIC_EncodePriority>
 800146c:	4602      	mov	r2, r0
 800146e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff5f 	bl	8001338 <__NVIC_SetPriority>
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff35 	bl	8001300 <__NVIC_EnableIRQ>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ffa2 	bl	80013f0 <SysTick_Config>
 80014ac:	4603      	mov	r3, r0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b08b      	sub	sp, #44	; 0x2c
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ca:	e169      	b.n	80017a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014cc:	2201      	movs	r2, #1
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	69fa      	ldr	r2, [r7, #28]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	f040 8158 	bne.w	800179a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	4a9a      	ldr	r2, [pc, #616]	; (8001758 <HAL_GPIO_Init+0x2a0>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d05e      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 80014f4:	4a98      	ldr	r2, [pc, #608]	; (8001758 <HAL_GPIO_Init+0x2a0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d875      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 80014fa:	4a98      	ldr	r2, [pc, #608]	; (800175c <HAL_GPIO_Init+0x2a4>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d058      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 8001500:	4a96      	ldr	r2, [pc, #600]	; (800175c <HAL_GPIO_Init+0x2a4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d86f      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 8001506:	4a96      	ldr	r2, [pc, #600]	; (8001760 <HAL_GPIO_Init+0x2a8>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d052      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 800150c:	4a94      	ldr	r2, [pc, #592]	; (8001760 <HAL_GPIO_Init+0x2a8>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d869      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 8001512:	4a94      	ldr	r2, [pc, #592]	; (8001764 <HAL_GPIO_Init+0x2ac>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d04c      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 8001518:	4a92      	ldr	r2, [pc, #584]	; (8001764 <HAL_GPIO_Init+0x2ac>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d863      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 800151e:	4a92      	ldr	r2, [pc, #584]	; (8001768 <HAL_GPIO_Init+0x2b0>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d046      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
 8001524:	4a90      	ldr	r2, [pc, #576]	; (8001768 <HAL_GPIO_Init+0x2b0>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d85d      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 800152a:	2b12      	cmp	r3, #18
 800152c:	d82a      	bhi.n	8001584 <HAL_GPIO_Init+0xcc>
 800152e:	2b12      	cmp	r3, #18
 8001530:	d859      	bhi.n	80015e6 <HAL_GPIO_Init+0x12e>
 8001532:	a201      	add	r2, pc, #4	; (adr r2, 8001538 <HAL_GPIO_Init+0x80>)
 8001534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001538:	080015b3 	.word	0x080015b3
 800153c:	0800158d 	.word	0x0800158d
 8001540:	0800159f 	.word	0x0800159f
 8001544:	080015e1 	.word	0x080015e1
 8001548:	080015e7 	.word	0x080015e7
 800154c:	080015e7 	.word	0x080015e7
 8001550:	080015e7 	.word	0x080015e7
 8001554:	080015e7 	.word	0x080015e7
 8001558:	080015e7 	.word	0x080015e7
 800155c:	080015e7 	.word	0x080015e7
 8001560:	080015e7 	.word	0x080015e7
 8001564:	080015e7 	.word	0x080015e7
 8001568:	080015e7 	.word	0x080015e7
 800156c:	080015e7 	.word	0x080015e7
 8001570:	080015e7 	.word	0x080015e7
 8001574:	080015e7 	.word	0x080015e7
 8001578:	080015e7 	.word	0x080015e7
 800157c:	08001595 	.word	0x08001595
 8001580:	080015a9 	.word	0x080015a9
 8001584:	4a79      	ldr	r2, [pc, #484]	; (800176c <HAL_GPIO_Init+0x2b4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d013      	beq.n	80015b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800158a:	e02c      	b.n	80015e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	623b      	str	r3, [r7, #32]
          break;
 8001592:	e029      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	3304      	adds	r3, #4
 800159a:	623b      	str	r3, [r7, #32]
          break;
 800159c:	e024      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	3308      	adds	r3, #8
 80015a4:	623b      	str	r3, [r7, #32]
          break;
 80015a6:	e01f      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	330c      	adds	r3, #12
 80015ae:	623b      	str	r3, [r7, #32]
          break;
 80015b0:	e01a      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d102      	bne.n	80015c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ba:	2304      	movs	r3, #4
 80015bc:	623b      	str	r3, [r7, #32]
          break;
 80015be:	e013      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d105      	bne.n	80015d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c8:	2308      	movs	r3, #8
 80015ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	611a      	str	r2, [r3, #16]
          break;
 80015d2:	e009      	b.n	80015e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d4:	2308      	movs	r3, #8
 80015d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69fa      	ldr	r2, [r7, #28]
 80015dc:	615a      	str	r2, [r3, #20]
          break;
 80015de:	e003      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
          break;
 80015e4:	e000      	b.n	80015e8 <HAL_GPIO_Init+0x130>
          break;
 80015e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2bff      	cmp	r3, #255	; 0xff
 80015ec:	d801      	bhi.n	80015f2 <HAL_GPIO_Init+0x13a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	e001      	b.n	80015f6 <HAL_GPIO_Init+0x13e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3304      	adds	r3, #4
 80015f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	2bff      	cmp	r3, #255	; 0xff
 80015fc:	d802      	bhi.n	8001604 <HAL_GPIO_Init+0x14c>
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	e002      	b.n	800160a <HAL_GPIO_Init+0x152>
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	3b08      	subs	r3, #8
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	210f      	movs	r1, #15
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	fa01 f303 	lsl.w	r3, r1, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	401a      	ands	r2, r3
 800161c:	6a39      	ldr	r1, [r7, #32]
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	431a      	orrs	r2, r3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 80b1 	beq.w	800179a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001638:	4b4d      	ldr	r3, [pc, #308]	; (8001770 <HAL_GPIO_Init+0x2b8>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a4c      	ldr	r2, [pc, #304]	; (8001770 <HAL_GPIO_Init+0x2b8>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b4a      	ldr	r3, [pc, #296]	; (8001770 <HAL_GPIO_Init+0x2b8>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001650:	4a48      	ldr	r2, [pc, #288]	; (8001774 <HAL_GPIO_Init+0x2bc>)
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	3302      	adds	r3, #2
 8001658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	220f      	movs	r2, #15
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4013      	ands	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a40      	ldr	r2, [pc, #256]	; (8001778 <HAL_GPIO_Init+0x2c0>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d013      	beq.n	80016a4 <HAL_GPIO_Init+0x1ec>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a3f      	ldr	r2, [pc, #252]	; (800177c <HAL_GPIO_Init+0x2c4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d00d      	beq.n	80016a0 <HAL_GPIO_Init+0x1e8>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a3e      	ldr	r2, [pc, #248]	; (8001780 <HAL_GPIO_Init+0x2c8>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d007      	beq.n	800169c <HAL_GPIO_Init+0x1e4>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a3d      	ldr	r2, [pc, #244]	; (8001784 <HAL_GPIO_Init+0x2cc>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d101      	bne.n	8001698 <HAL_GPIO_Init+0x1e0>
 8001694:	2303      	movs	r3, #3
 8001696:	e006      	b.n	80016a6 <HAL_GPIO_Init+0x1ee>
 8001698:	2304      	movs	r3, #4
 800169a:	e004      	b.n	80016a6 <HAL_GPIO_Init+0x1ee>
 800169c:	2302      	movs	r3, #2
 800169e:	e002      	b.n	80016a6 <HAL_GPIO_Init+0x1ee>
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <HAL_GPIO_Init+0x1ee>
 80016a4:	2300      	movs	r3, #0
 80016a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a8:	f002 0203 	and.w	r2, r2, #3
 80016ac:	0092      	lsls	r2, r2, #2
 80016ae:	4093      	lsls	r3, r2
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016b6:	492f      	ldr	r1, [pc, #188]	; (8001774 <HAL_GPIO_Init+0x2bc>)
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	3302      	adds	r3, #2
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d006      	beq.n	80016de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016d0:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	492c      	ldr	r1, [pc, #176]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
 80016dc:	e006      	b.n	80016ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016de:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	4928      	ldr	r1, [pc, #160]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d006      	beq.n	8001706 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016f8:	4b23      	ldr	r3, [pc, #140]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	4922      	ldr	r1, [pc, #136]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
 8001704:	e006      	b.n	8001714 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	43db      	mvns	r3, r3
 800170e:	491e      	ldr	r1, [pc, #120]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001710:	4013      	ands	r3, r2
 8001712:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d006      	beq.n	800172e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	4918      	ldr	r1, [pc, #96]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	608b      	str	r3, [r1, #8]
 800172c:	e006      	b.n	800173c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	43db      	mvns	r3, r3
 8001736:	4914      	ldr	r1, [pc, #80]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 8001738:	4013      	ands	r3, r2
 800173a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d021      	beq.n	800178c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	490e      	ldr	r1, [pc, #56]	; (8001788 <HAL_GPIO_Init+0x2d0>)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	60cb      	str	r3, [r1, #12]
 8001754:	e021      	b.n	800179a <HAL_GPIO_Init+0x2e2>
 8001756:	bf00      	nop
 8001758:	10320000 	.word	0x10320000
 800175c:	10310000 	.word	0x10310000
 8001760:	10220000 	.word	0x10220000
 8001764:	10210000 	.word	0x10210000
 8001768:	10120000 	.word	0x10120000
 800176c:	10110000 	.word	0x10110000
 8001770:	40021000 	.word	0x40021000
 8001774:	40010000 	.word	0x40010000
 8001778:	40010800 	.word	0x40010800
 800177c:	40010c00 	.word	0x40010c00
 8001780:	40011000 	.word	0x40011000
 8001784:	40011400 	.word	0x40011400
 8001788:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_GPIO_Init+0x304>)
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	43db      	mvns	r3, r3
 8001794:	4909      	ldr	r1, [pc, #36]	; (80017bc <HAL_GPIO_Init+0x304>)
 8001796:	4013      	ands	r3, r2
 8001798:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	3301      	adds	r3, #1
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	fa22 f303 	lsr.w	r3, r2, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f47f ae8e 	bne.w	80014cc <HAL_GPIO_Init+0x14>
  }
}
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	372c      	adds	r7, #44	; 0x2c
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	40010400 	.word	0x40010400

080017c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]
 80017cc:	4613      	mov	r3, r2
 80017ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017d0:	787b      	ldrb	r3, [r7, #1]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017d6:	887a      	ldrh	r2, [r7, #2]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017dc:	e003      	b.n	80017e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	041a      	lsls	r2, r3, #16
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	611a      	str	r2, [r3, #16]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f2:	b08b      	sub	sp, #44	; 0x2c
 80017f4:	af06      	add	r7, sp, #24
 80017f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e0fd      	b.n	80019fe <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d106      	bne.n	800181c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f007 fa98 	bl	8008d4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2203      	movs	r2, #3
 8001820:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f002 ffc9 	bl	80047c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	687e      	ldr	r6, [r7, #4]
 8001836:	466d      	mov	r5, sp
 8001838:	f106 0410 	add.w	r4, r6, #16
 800183c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001840:	6823      	ldr	r3, [r4, #0]
 8001842:	602b      	str	r3, [r5, #0]
 8001844:	1d33      	adds	r3, r6, #4
 8001846:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001848:	6838      	ldr	r0, [r7, #0]
 800184a:	f002 ff93 	bl	8004774 <USB_CoreInit>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2202      	movs	r2, #2
 8001858:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0ce      	b.n	80019fe <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f002 ffc4 	bl	80047f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	e04c      	b.n	800190c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	440b      	add	r3, r1
 8001882:	3301      	adds	r3, #1
 8001884:	2201      	movs	r2, #1
 8001886:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	7bfa      	ldrb	r2, [r7, #15]
 800189a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800189c:	7bfa      	ldrb	r2, [r7, #15]
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	b298      	uxth	r0, r3
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	440b      	add	r3, r1
 80018ae:	3336      	adds	r3, #54	; 0x36
 80018b0:	4602      	mov	r2, r0
 80018b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	440b      	add	r3, r1
 80018c4:	3303      	adds	r3, #3
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018ca:	7bfa      	ldrb	r2, [r7, #15]
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	440b      	add	r3, r1
 80018d8:	3338      	adds	r3, #56	; 0x38
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018de:	7bfa      	ldrb	r2, [r7, #15]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	440b      	add	r3, r1
 80018ec:	333c      	adds	r3, #60	; 0x3c
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018f2:	7bfa      	ldrb	r2, [r7, #15]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	440b      	add	r3, r1
 8001900:	3340      	adds	r3, #64	; 0x40
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	3301      	adds	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
 800190c:	7bfa      	ldrb	r2, [r7, #15]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	429a      	cmp	r2, r3
 8001914:	d3ad      	bcc.n	8001872 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001916:	2300      	movs	r3, #0
 8001918:	73fb      	strb	r3, [r7, #15]
 800191a:	e044      	b.n	80019a6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800191c:	7bfa      	ldrb	r2, [r7, #15]
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	440b      	add	r3, r1
 800192a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	440b      	add	r3, r1
 8001940:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001944:	7bfa      	ldrb	r2, [r7, #15]
 8001946:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001948:	7bfa      	ldrb	r2, [r7, #15]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	440b      	add	r3, r1
 8001956:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800195e:	7bfa      	ldrb	r2, [r7, #15]
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	440b      	add	r3, r1
 800196c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	440b      	add	r3, r1
 8001982:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800198a:	7bfa      	ldrb	r2, [r7, #15]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	440b      	add	r3, r1
 8001998:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	3301      	adds	r3, #1
 80019a4:	73fb      	strb	r3, [r7, #15]
 80019a6:	7bfa      	ldrb	r2, [r7, #15]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d3b5      	bcc.n	800191c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	687e      	ldr	r6, [r7, #4]
 80019b8:	466d      	mov	r5, sp
 80019ba:	f106 0410 	add.w	r4, r6, #16
 80019be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c2:	6823      	ldr	r3, [r4, #0]
 80019c4:	602b      	str	r3, [r5, #0]
 80019c6:	1d33      	adds	r3, r6, #4
 80019c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ca:	6838      	ldr	r0, [r7, #0]
 80019cc:	f002 ff1e 	bl	800480c <USB_DevInit>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d005      	beq.n	80019e2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2202      	movs	r2, #2
 80019da:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e00d      	b.n	80019fe <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f005 fbd0 	bl	800719c <USB_DevDisconnect>

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a06 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <HAL_PCD_Start+0x16>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e016      	b.n	8001a4a <HAL_PCD_Start+0x44>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f002 feb3 	bl	8004794 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001a2e:	2101      	movs	r1, #1
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f007 fbfe 	bl	8009232 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f005 fba4 	bl	8007188 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b088      	sub	sp, #32
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f005 fba6 	bl	80071b0 <USB_ReadInterrupts>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a6e:	d102      	bne.n	8001a76 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 fb5f 	bl	8002134 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f005 fb98 	bl	80071b0 <USB_ReadInterrupts>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8a:	d112      	bne.n	8001ab2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a9e:	b292      	uxth	r2, r2
 8001aa0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f007 f9cc 	bl	8008e42 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001aaa:	2100      	movs	r1, #0
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 f923 	bl	8001cf8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f005 fb7a 	bl	80071b0 <USB_ReadInterrupts>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ac6:	d10b      	bne.n	8001ae0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ada:	b292      	uxth	r2, r2
 8001adc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f005 fb63 	bl	80071b0 <USB_ReadInterrupts>
 8001aea:	4603      	mov	r3, r0
 8001aec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001af4:	d10b      	bne.n	8001b0e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b08:	b292      	uxth	r2, r2
 8001b0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f005 fb4c 	bl	80071b0 <USB_ReadInterrupts>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b22:	d126      	bne.n	8001b72 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0204 	bic.w	r2, r2, #4
 8001b36:	b292      	uxth	r2, r2
 8001b38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0208 	bic.w	r2, r2, #8
 8001b4e:	b292      	uxth	r2, r2
 8001b50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f007 f9ad 	bl	8008eb4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b6c:	b292      	uxth	r2, r2
 8001b6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f005 fb1a 	bl	80071b0 <USB_ReadInterrupts>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b86:	f040 8082 	bne.w	8001c8e <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	77fb      	strb	r3, [r7, #31]
 8001b8e:	e010      	b.n	8001bb2 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	461a      	mov	r2, r3
 8001b96:	7ffb      	ldrb	r3, [r7, #31]
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	441a      	add	r2, r3
 8001b9c:	7ffb      	ldrb	r3, [r7, #31]
 8001b9e:	8812      	ldrh	r2, [r2, #0]
 8001ba0:	b292      	uxth	r2, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	3320      	adds	r3, #32
 8001ba6:	443b      	add	r3, r7
 8001ba8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001bac:	7ffb      	ldrb	r3, [r7, #31]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	77fb      	strb	r3, [r7, #31]
 8001bb2:	7ffb      	ldrb	r3, [r7, #31]
 8001bb4:	2b07      	cmp	r3, #7
 8001bb6:	d9eb      	bls.n	8001b90 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0201 	orr.w	r2, r2, #1
 8001bca:	b292      	uxth	r2, r2
 8001bcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	b292      	uxth	r2, r2
 8001be4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001be8:	bf00      	nop
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f6      	beq.n	8001bea <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c0e:	b292      	uxth	r2, r2
 8001c10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001c14:	2300      	movs	r3, #0
 8001c16:	77fb      	strb	r3, [r7, #31]
 8001c18:	e00f      	b.n	8001c3a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001c1a:	7ffb      	ldrb	r3, [r7, #31]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	4611      	mov	r1, r2
 8001c22:	7ffa      	ldrb	r2, [r7, #31]
 8001c24:	0092      	lsls	r2, r2, #2
 8001c26:	440a      	add	r2, r1
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	3320      	adds	r3, #32
 8001c2c:	443b      	add	r3, r7
 8001c2e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001c32:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001c34:	7ffb      	ldrb	r3, [r7, #31]
 8001c36:	3301      	adds	r3, #1
 8001c38:	77fb      	strb	r3, [r7, #31]
 8001c3a:	7ffb      	ldrb	r3, [r7, #31]
 8001c3c:	2b07      	cmp	r3, #7
 8001c3e:	d9ec      	bls.n	8001c1a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0208 	orr.w	r2, r2, #8
 8001c52:	b292      	uxth	r2, r2
 8001c54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c6a:	b292      	uxth	r2, r2
 8001c6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0204 	orr.w	r2, r2, #4
 8001c82:	b292      	uxth	r2, r2
 8001c84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f007 f8f9 	bl	8008e80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f005 fa8c 	bl	80071b0 <USB_ReadInterrupts>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ca2:	d10e      	bne.n	8001cc2 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001cb6:	b292      	uxth	r2, r2
 8001cb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f007 f8b2 	bl	8008e26 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f005 fa72 	bl	80071b0 <USB_ReadInterrupts>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd6:	d10b      	bne.n	8001cf0 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cea:	b292      	uxth	r2, r2
 8001cec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	3720      	adds	r7, #32
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_PCD_SetAddress+0x1a>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e013      	b.n	8001d3a <HAL_PCD_SetAddress+0x42>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	78fa      	ldrb	r2, [r7, #3]
 8001d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	78fa      	ldrb	r2, [r7, #3]
 8001d28:	4611      	mov	r1, r2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f005 fa19 	bl	8007162 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b084      	sub	sp, #16
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	4608      	mov	r0, r1
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4603      	mov	r3, r0
 8001d52:	70fb      	strb	r3, [r7, #3]
 8001d54:	460b      	mov	r3, r1
 8001d56:	803b      	strh	r3, [r7, #0]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	da0e      	bge.n	8001d86 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2201      	movs	r2, #1
 8001d82:	705a      	strb	r2, [r3, #1]
 8001d84:	e00e      	b.n	8001da4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	f003 0207 	and.w	r2, r3, #7
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001db0:	883a      	ldrh	r2, [r7, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	78ba      	ldrb	r2, [r7, #2]
 8001dba:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	785b      	ldrb	r3, [r3, #1]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d004      	beq.n	8001dce <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001dce:	78bb      	ldrb	r3, [r7, #2]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d102      	bne.n	8001dda <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_PCD_EP_Open+0xa6>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e00e      	b.n	8001e06 <HAL_PCD_EP_Open+0xc4>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68f9      	ldr	r1, [r7, #12]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f002 fd28 	bl	800484c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001e04:	7afb      	ldrb	r3, [r7, #11]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	460b      	mov	r3, r1
 8001e18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	da0e      	bge.n	8001e40 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	705a      	strb	r2, [r3, #1]
 8001e3e:	e00e      	b.n	8001e5e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	f003 0207 	and.w	r2, r3, #7
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_PCD_EP_Close+0x6a>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e00e      	b.n	8001e96 <HAL_PCD_EP_Close+0x88>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68f9      	ldr	r1, [r7, #12]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f003 f84a 	bl	8004f20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b086      	sub	sp, #24
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	603b      	str	r3, [r7, #0]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eae:	7afb      	ldrb	r3, [r7, #11]
 8001eb0:	f003 0207 	and.w	r2, r3, #7
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2200      	movs	r2, #0
 8001edc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ede:	7afb      	ldrb	r3, [r7, #11]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eea:	7afb      	ldrb	r3, [r7, #11]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d106      	bne.n	8001f02 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6979      	ldr	r1, [r7, #20]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 f9fc 	bl	80052f8 <USB_EPStartXfer>
 8001f00:	e005      	b.n	8001f0e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6979      	ldr	r1, [r7, #20]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f003 f9f5 	bl	80052f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	f003 0207 	and.w	r2, r3, #7
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	440b      	add	r3, r1
 8001f36:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	603b      	str	r3, [r7, #0]
 8001f52:	460b      	mov	r3, r1
 8001f54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f56:	7afb      	ldrb	r3, [r7, #11]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4413      	add	r3, r2
 8001f6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f92:	7afb      	ldrb	r3, [r7, #11]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f9e:	7afb      	ldrb	r3, [r7, #11]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d106      	bne.n	8001fb6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6979      	ldr	r1, [r7, #20]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f003 f9a2 	bl	80052f8 <USB_EPStartXfer>
 8001fb4:	e005      	b.n	8001fc2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6979      	ldr	r1, [r7, #20]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f003 f99b 	bl	80052f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	f003 0207 	and.w	r2, r3, #7
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d901      	bls.n	8001fea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e04c      	b.n	8002084 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	da0e      	bge.n	8002010 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2201      	movs	r2, #1
 800200c:	705a      	strb	r2, [r3, #1]
 800200e:	e00c      	b.n	800202a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002010:	78fa      	ldrb	r2, [r7, #3]
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2201      	movs	r2, #1
 800202e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	b2da      	uxtb	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_PCD_EP_SetStall+0x7e>
 8002046:	2302      	movs	r3, #2
 8002048:	e01c      	b.n	8002084 <HAL_PCD_EP_SetStall+0xb8>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68f9      	ldr	r1, [r7, #12]
 8002058:	4618      	mov	r0, r3
 800205a:	f004 ff85 	bl	8006f68 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800205e:	78fb      	ldrb	r3, [r7, #3]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	2b00      	cmp	r3, #0
 8002066:	d108      	bne.n	800207a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002072:	4619      	mov	r1, r3
 8002074:	4610      	mov	r0, r2
 8002076:	f005 f8aa 	bl	80071ce <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	f003 020f 	and.w	r2, r3, #15
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d901      	bls.n	80020aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e040      	b.n	800212c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	da0e      	bge.n	80020d0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020b2:	78fb      	ldrb	r3, [r7, #3]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2201      	movs	r2, #1
 80020cc:	705a      	strb	r2, [r3, #1]
 80020ce:	e00e      	b.n	80020ee <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	f003 0207 	and.w	r2, r3, #7
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_PCD_EP_ClrStall+0x82>
 800210a:	2302      	movs	r3, #2
 800210c:	e00e      	b.n	800212c <HAL_PCD_EP_ClrStall+0xa0>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68f9      	ldr	r1, [r7, #12]
 800211c:	4618      	mov	r0, r3
 800211e:	f004 ff73 	bl	8007008 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08e      	sub	sp, #56	; 0x38
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800213c:	e2ec      	b.n	8002718 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002146:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002148:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800214a:	b2db      	uxtb	r3, r3
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002154:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002158:	2b00      	cmp	r3, #0
 800215a:	f040 8161 	bne.w	8002420 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800215e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b00      	cmp	r3, #0
 8002166:	d152      	bne.n	800220e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	b29b      	uxth	r3, r3
 8002170:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002178:	81fb      	strh	r3, [r7, #14]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	89fb      	ldrh	r3, [r7, #14]
 8002180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002188:	b29b      	uxth	r3, r3
 800218a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3328      	adds	r3, #40	; 0x28
 8002190:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800219a:	b29b      	uxth	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4413      	add	r3, r2
 80021a6:	3302      	adds	r3, #2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6812      	ldr	r2, [r2, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	695a      	ldr	r2, [r3, #20]
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	441a      	add	r2, r3
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80021cc:	2100      	movs	r1, #0
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f006 fe0f 	bl	8008df2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 829b 	beq.w	8002718 <PCD_EP_ISR_Handler+0x5e4>
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f040 8296 	bne.w	8002718 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	b292      	uxth	r2, r2
 8002200:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800220c:	e284      	b.n	8002718 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800221e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002224:	2b00      	cmp	r3, #0
 8002226:	d034      	beq.n	8002292 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002230:	b29b      	uxth	r3, r3
 8002232:	461a      	mov	r2, r3
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4413      	add	r3, r2
 800223c:	3306      	adds	r3, #6
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	4413      	add	r3, r2
 8002246:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002266:	b29b      	uxth	r3, r3
 8002268:	f005 f801 	bl	800726e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	b29a      	uxth	r2, r3
 8002274:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002278:	4013      	ands	r3, r2
 800227a:	823b      	strh	r3, [r7, #16]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	8a3a      	ldrh	r2, [r7, #16]
 8002282:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002286:	b292      	uxth	r2, r2
 8002288:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f006 fd84 	bl	8008d98 <HAL_PCD_SetupStageCallback>
 8002290:	e242      	b.n	8002718 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002292:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002296:	2b00      	cmp	r3, #0
 8002298:	f280 823e 	bge.w	8002718 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022a8:	4013      	ands	r3, r2
 80022aa:	83bb      	strh	r3, [r7, #28]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	8bba      	ldrh	r2, [r7, #28]
 80022b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022b6:	b292      	uxth	r2, r2
 80022b8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	461a      	mov	r2, r3
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4413      	add	r3, r2
 80022ce:	3306      	adds	r3, #6
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d019      	beq.n	8002322 <PCD_EP_ISR_Handler+0x1ee>
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d015      	beq.n	8002322 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	6959      	ldr	r1, [r3, #20]
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002306:	b29b      	uxth	r3, r3
 8002308:	f004 ffb1 	bl	800726e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	441a      	add	r2, r3
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800231a:	2100      	movs	r1, #0
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f006 fd4d 	bl	8008dbc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	b29b      	uxth	r3, r3
 800232a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800232e:	2b00      	cmp	r3, #0
 8002330:	f040 81f2 	bne.w	8002718 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002342:	b29b      	uxth	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	4413      	add	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d112      	bne.n	8002382 <PCD_EP_ISR_Handler+0x24e>
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	b29b      	uxth	r3, r3
 8002362:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002366:	b29a      	uxth	r2, r3
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	801a      	strh	r2, [r3, #0]
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	b29b      	uxth	r3, r3
 8002372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800237a:	b29a      	uxth	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	801a      	strh	r2, [r3, #0]
 8002380:	e02f      	b.n	80023e2 <PCD_EP_ISR_Handler+0x2ae>
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	2b3e      	cmp	r3, #62	; 0x3e
 8002388:	d813      	bhi.n	80023b2 <PCD_EP_ISR_Handler+0x27e>
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	085b      	lsrs	r3, r3, #1
 8002390:	633b      	str	r3, [r7, #48]	; 0x30
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <PCD_EP_ISR_Handler+0x270>
 800239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a0:	3301      	adds	r3, #1
 80023a2:	633b      	str	r3, [r7, #48]	; 0x30
 80023a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	029b      	lsls	r3, r3, #10
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	801a      	strh	r2, [r3, #0]
 80023b0:	e017      	b.n	80023e2 <PCD_EP_ISR_Handler+0x2ae>
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	633b      	str	r3, [r7, #48]	; 0x30
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d102      	bne.n	80023cc <PCD_EP_ISR_Handler+0x298>
 80023c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c8:	3b01      	subs	r3, #1
 80023ca:	633b      	str	r3, [r7, #48]	; 0x30
 80023cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	029b      	lsls	r3, r3, #10
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023dc:	b29a      	uxth	r2, r3
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f2:	827b      	strh	r3, [r7, #18]
 80023f4:	8a7b      	ldrh	r3, [r7, #18]
 80023f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80023fa:	827b      	strh	r3, [r7, #18]
 80023fc:	8a7b      	ldrh	r3, [r7, #18]
 80023fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002402:	827b      	strh	r3, [r7, #18]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	8a7b      	ldrh	r3, [r7, #18]
 800240a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800240e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800241a:	b29b      	uxth	r3, r3
 800241c:	8013      	strh	r3, [r2, #0]
 800241e:	e17b      	b.n	8002718 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002432:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002436:	2b00      	cmp	r3, #0
 8002438:	f280 80ea 	bge.w	8002610 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	b29a      	uxth	r2, r3
 800244e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002452:	4013      	ands	r3, r2
 8002454:	853b      	strh	r3, [r7, #40]	; 0x28
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002466:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800246a:	b292      	uxth	r2, r2
 800246c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800246e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	7b1b      	ldrb	r3, [r3, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d122      	bne.n	80024d2 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002494:	b29b      	uxth	r3, r3
 8002496:	461a      	mov	r2, r3
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4413      	add	r3, r2
 80024a0:	3306      	adds	r3, #6
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024b4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80024b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 8087 	beq.w	80025cc <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	6959      	ldr	r1, [r3, #20]
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	88da      	ldrh	r2, [r3, #6]
 80024ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024cc:	f004 fecf 	bl	800726e <USB_ReadPMA>
 80024d0:	e07c      	b.n	80025cc <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	78db      	ldrb	r3, [r3, #3]
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d108      	bne.n	80024ec <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80024da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024dc:	461a      	mov	r2, r3
 80024de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f927 	bl	8002734 <HAL_PCD_EP_DB_Receive>
 80024e6:	4603      	mov	r3, r0
 80024e8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80024ea:	e06f      	b.n	80025cc <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002506:	847b      	strh	r3, [r7, #34]	; 0x22
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	441a      	add	r2, r3
 8002516:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800251c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002524:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002528:	b29b      	uxth	r3, r3
 800252a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	b29b      	uxth	r3, r3
 800253e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d021      	beq.n	800258a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800254e:	b29b      	uxth	r3, r3
 8002550:	461a      	mov	r2, r3
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	3302      	adds	r3, #2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	4413      	add	r3, r2
 8002564:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800256e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002570:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002572:	2b00      	cmp	r3, #0
 8002574:	d02a      	beq.n	80025cc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	6959      	ldr	r1, [r3, #20]
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	891a      	ldrh	r2, [r3, #8]
 8002582:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002584:	f004 fe73 	bl	800726e <USB_ReadPMA>
 8002588:	e020      	b.n	80025cc <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002592:	b29b      	uxth	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4413      	add	r3, r2
 800259e:	3306      	adds	r3, #6
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025b2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80025b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d008      	beq.n	80025cc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	6959      	ldr	r1, [r3, #20]
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	895a      	ldrh	r2, [r3, #10]
 80025c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025c8:	f004 fe51 	bl	800726e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	69da      	ldr	r2, [r3, #28]
 80025d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025d2:	441a      	add	r2, r3
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	695a      	ldr	r2, [r3, #20]
 80025dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025de:	441a      	add	r2, r3
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d004      	beq.n	80025f6 <PCD_EP_ISR_Handler+0x4c2>
 80025ec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d206      	bcs.n	8002604 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	4619      	mov	r1, r3
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f006 fbdd 	bl	8008dbc <HAL_PCD_DataOutStageCallback>
 8002602:	e005      	b.n	8002610 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800260a:	4618      	mov	r0, r3
 800260c:	f002 fe74 	bl	80052f8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002610:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002616:	2b00      	cmp	r3, #0
 8002618:	d07e      	beq.n	8002718 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800261a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	4413      	add	r3, r2
 800262c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	b29b      	uxth	r3, r3
 8002640:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002648:	843b      	strh	r3, [r7, #32]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	441a      	add	r2, r3
 8002658:	8c3b      	ldrh	r3, [r7, #32]
 800265a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800265e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002662:	b29b      	uxth	r3, r3
 8002664:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	78db      	ldrb	r3, [r3, #3]
 800266a:	2b03      	cmp	r3, #3
 800266c:	d00c      	beq.n	8002688 <PCD_EP_ISR_Handler+0x554>
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	78db      	ldrb	r3, [r3, #3]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d008      	beq.n	8002688 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800267a:	2b02      	cmp	r3, #2
 800267c:	d146      	bne.n	800270c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800267e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d141      	bne.n	800270c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002690:	b29b      	uxth	r3, r3
 8002692:	461a      	mov	r2, r3
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4413      	add	r3, r2
 800269c:	3302      	adds	r3, #2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026b0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	699a      	ldr	r2, [r3, #24]
 80026b6:	8bfb      	ldrh	r3, [r7, #30]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d906      	bls.n	80026ca <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	699a      	ldr	r2, [r3, #24]
 80026c0:	8bfb      	ldrh	r3, [r7, #30]
 80026c2:	1ad2      	subs	r2, r2, r3
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	619a      	str	r2, [r3, #24]
 80026c8:	e002      	b.n	80026d0 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	2200      	movs	r2, #0
 80026ce:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d106      	bne.n	80026e6 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	4619      	mov	r1, r3
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f006 fb87 	bl	8008df2 <HAL_PCD_DataInStageCallback>
 80026e4:	e018      	b.n	8002718 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	8bfb      	ldrh	r3, [r7, #30]
 80026ec:	441a      	add	r2, r3
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	69da      	ldr	r2, [r3, #28]
 80026f6:	8bfb      	ldrh	r3, [r7, #30]
 80026f8:	441a      	add	r2, r3
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002704:	4618      	mov	r0, r3
 8002706:	f002 fdf7 	bl	80052f8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800270a:	e005      	b.n	8002718 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800270c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800270e:	461a      	mov	r2, r3
 8002710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f91b 	bl	800294e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002720:	b29b      	uxth	r3, r3
 8002722:	b21b      	sxth	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	f6ff ad0a 	blt.w	800213e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3738      	adds	r7, #56	; 0x38
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	4613      	mov	r3, r2
 8002740:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002742:	88fb      	ldrh	r3, [r7, #6]
 8002744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d07e      	beq.n	800284a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002754:	b29b      	uxth	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4413      	add	r3, r2
 8002760:	3302      	adds	r3, #2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	4413      	add	r3, r2
 800276a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002774:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	699a      	ldr	r2, [r3, #24]
 800277a:	8b7b      	ldrh	r3, [r7, #26]
 800277c:	429a      	cmp	r2, r3
 800277e:	d306      	bcc.n	800278e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	699a      	ldr	r2, [r3, #24]
 8002784:	8b7b      	ldrh	r3, [r7, #26]
 8002786:	1ad2      	subs	r2, r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	619a      	str	r2, [r3, #24]
 800278c:	e002      	b.n	8002794 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d123      	bne.n	80027e4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b6:	833b      	strh	r3, [r7, #24]
 80027b8:	8b3b      	ldrh	r3, [r7, #24]
 80027ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027be:	833b      	strh	r3, [r7, #24]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	441a      	add	r2, r3
 80027ce:	8b3b      	ldrh	r3, [r7, #24]
 80027d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01f      	beq.n	800282e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002808:	82fb      	strh	r3, [r7, #22]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	461a      	mov	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	441a      	add	r2, r3
 8002818:	8afb      	ldrh	r3, [r7, #22]
 800281a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800281e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002826:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800282a:	b29b      	uxth	r3, r3
 800282c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800282e:	8b7b      	ldrh	r3, [r7, #26]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8087 	beq.w	8002944 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	6959      	ldr	r1, [r3, #20]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	891a      	ldrh	r2, [r3, #8]
 8002842:	8b7b      	ldrh	r3, [r7, #26]
 8002844:	f004 fd13 	bl	800726e <USB_ReadPMA>
 8002848:	e07c      	b.n	8002944 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002852:	b29b      	uxth	r3, r3
 8002854:	461a      	mov	r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	4413      	add	r3, r2
 800285e:	3306      	adds	r3, #6
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	6812      	ldr	r2, [r2, #0]
 8002866:	4413      	add	r3, r2
 8002868:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002872:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	699a      	ldr	r2, [r3, #24]
 8002878:	8b7b      	ldrh	r3, [r7, #26]
 800287a:	429a      	cmp	r2, r3
 800287c:	d306      	bcc.n	800288c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	699a      	ldr	r2, [r3, #24]
 8002882:	8b7b      	ldrh	r3, [r7, #26]
 8002884:	1ad2      	subs	r2, r2, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	619a      	str	r2, [r3, #24]
 800288a:	e002      	b.n	8002892 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2200      	movs	r2, #0
 8002890:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d123      	bne.n	80028e2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b4:	83fb      	strh	r3, [r7, #30]
 80028b6:	8bfb      	ldrh	r3, [r7, #30]
 80028b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028bc:	83fb      	strh	r3, [r7, #30]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	441a      	add	r2, r3
 80028cc:	8bfb      	ldrh	r3, [r7, #30]
 80028ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028de:	b29b      	uxth	r3, r3
 80028e0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80028e2:	88fb      	ldrh	r3, [r7, #6]
 80028e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d11f      	bne.n	800292c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002906:	83bb      	strh	r3, [r7, #28]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	441a      	add	r2, r3
 8002916:	8bbb      	ldrh	r3, [r7, #28]
 8002918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800291c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002924:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002928:	b29b      	uxth	r3, r3
 800292a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800292c:	8b7b      	ldrh	r3, [r7, #26]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d008      	beq.n	8002944 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	6959      	ldr	r1, [r3, #20]
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	895a      	ldrh	r2, [r3, #10]
 800293e:	8b7b      	ldrh	r3, [r7, #26]
 8002940:	f004 fc95 	bl	800726e <USB_ReadPMA>
    }
  }

  return count;
 8002944:	8b7b      	ldrh	r3, [r7, #26]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3720      	adds	r7, #32
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b0a2      	sub	sp, #136	; 0x88
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	4613      	mov	r3, r2
 800295a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800295c:	88fb      	ldrh	r3, [r7, #6]
 800295e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 81c7 	beq.w	8002cf6 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002970:	b29b      	uxth	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4413      	add	r3, r2
 800297c:	3302      	adds	r3, #2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	4413      	add	r3, r2
 8002986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002990:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	699a      	ldr	r2, [r3, #24]
 8002998:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800299c:	429a      	cmp	r2, r3
 800299e:	d907      	bls.n	80029b0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	699a      	ldr	r2, [r3, #24]
 80029a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029a8:	1ad2      	subs	r2, r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	619a      	str	r2, [r3, #24]
 80029ae:	e002      	b.n	80029b6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2200      	movs	r2, #0
 80029b4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 80b9 	bne.w	8002b32 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	785b      	ldrb	r3, [r3, #1]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d126      	bne.n	8002a16 <HAL_PCD_EP_DB_Transmit+0xc8>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	461a      	mov	r2, r3
 80029da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029dc:	4413      	add	r3, r2
 80029de:	62bb      	str	r3, [r7, #40]	; 0x28
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	011a      	lsls	r2, r3, #4
 80029e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e8:	4413      	add	r3, r2
 80029ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	801a      	strh	r2, [r3, #0]
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	801a      	strh	r2, [r3, #0]
 8002a14:	e01a      	b.n	8002a4c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	785b      	ldrb	r3, [r3, #1]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d116      	bne.n	8002a4c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	633b      	str	r3, [r7, #48]	; 0x30
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	461a      	mov	r2, r3
 8002a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a32:	4413      	add	r3, r2
 8002a34:	633b      	str	r3, [r7, #48]	; 0x30
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	011a      	lsls	r2, r3, #4
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3e:	4413      	add	r3, r2
 8002a40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a48:	2200      	movs	r2, #0
 8002a4a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	623b      	str	r3, [r7, #32]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	785b      	ldrb	r3, [r3, #1]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d126      	bne.n	8002aa8 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	61bb      	str	r3, [r7, #24]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	4413      	add	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	011a      	lsls	r2, r3, #4
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	801a      	strh	r2, [r3, #0]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	801a      	strh	r2, [r3, #0]
 8002aa6:	e017      	b.n	8002ad8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	785b      	ldrb	r3, [r3, #1]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d113      	bne.n	8002ad8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	4413      	add	r3, r2
 8002ac0:	623b      	str	r3, [r7, #32]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	011a      	lsls	r2, r3, #4
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	4413      	add	r3, r2
 8002acc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	4619      	mov	r1, r3
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f006 f987 	bl	8008df2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ae4:	88fb      	ldrh	r3, [r7, #6]
 8002ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 82d4 	beq.w	8003098 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0a:	827b      	strh	r3, [r7, #18]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	441a      	add	r2, r3
 8002b1a:	8a7b      	ldrh	r3, [r7, #18]
 8002b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	8013      	strh	r3, [r2, #0]
 8002b30:	e2b2      	b.n	8003098 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d021      	beq.n	8002b80 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b56:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	441a      	add	r2, r3
 8002b68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	f040 8286 	bne.w	8003098 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	695a      	ldr	r2, [r3, #20]
 8002b90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b94:	441a      	add	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	69da      	ldr	r2, [r3, #28]
 8002b9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ba2:	441a      	add	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	6a1a      	ldr	r2, [r3, #32]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d309      	bcc.n	8002bc8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	6a1a      	ldr	r2, [r3, #32]
 8002bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc0:	1ad2      	subs	r2, r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	621a      	str	r2, [r3, #32]
 8002bc6:	e015      	b.n	8002bf4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d107      	bne.n	8002be0 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002bd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bd4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002bde:	e009      	b.n	8002bf4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	785b      	ldrb	r3, [r3, #1]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d155      	bne.n	8002ca8 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c10:	4413      	add	r3, r2
 8002c12:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	011a      	lsls	r2, r3, #4
 8002c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c22:	637b      	str	r3, [r7, #52]	; 0x34
 8002c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d112      	bne.n	8002c50 <HAL_PCD_EP_DB_Transmit+0x302>
 8002c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c38:	801a      	strh	r2, [r3, #0]
 8002c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4c:	801a      	strh	r2, [r3, #0]
 8002c4e:	e047      	b.n	8002ce0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c52:	2b3e      	cmp	r3, #62	; 0x3e
 8002c54:	d811      	bhi.n	8002c7a <HAL_PCD_EP_DB_Transmit+0x32c>
 8002c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c58:	085b      	lsrs	r3, r3, #1
 8002c5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d002      	beq.n	8002c6c <HAL_PCD_EP_DB_Transmit+0x31e>
 8002c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c68:	3301      	adds	r3, #1
 8002c6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	029b      	lsls	r3, r3, #10
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c76:	801a      	strh	r2, [r3, #0]
 8002c78:	e032      	b.n	8002ce0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d102      	bne.n	8002c90 <HAL_PCD_EP_DB_Transmit+0x342>
 8002c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	029b      	lsls	r3, r3, #10
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca4:	801a      	strh	r2, [r3, #0]
 8002ca6:	e01b      	b.n	8002ce0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	785b      	ldrb	r3, [r3, #1]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d117      	bne.n	8002ce0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	643b      	str	r3, [r7, #64]	; 0x40
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cc4:	4413      	add	r3, r2
 8002cc6:	643b      	str	r3, [r7, #64]	; 0x40
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	011a      	lsls	r2, r3, #4
 8002cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cde:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	6959      	ldr	r1, [r3, #20]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	891a      	ldrh	r2, [r3, #8]
 8002cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	f004 fa78 	bl	80071e4 <USB_WritePMA>
 8002cf4:	e1d0      	b.n	8003098 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4413      	add	r3, r2
 8002d0a:	3306      	adds	r3, #6
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	6812      	ldr	r2, [r2, #0]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	699a      	ldr	r2, [r3, #24]
 8002d26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d307      	bcc.n	8002d3e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	699a      	ldr	r2, [r3, #24]
 8002d32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d36:	1ad2      	subs	r2, r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	619a      	str	r2, [r3, #24]
 8002d3c:	e002      	b.n	8002d44 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2200      	movs	r2, #0
 8002d42:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f040 80c4 	bne.w	8002ed6 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	785b      	ldrb	r3, [r3, #1]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d126      	bne.n	8002da4 <HAL_PCD_EP_DB_Transmit+0x456>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	461a      	mov	r2, r3
 8002d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d6a:	4413      	add	r3, r2
 8002d6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	011a      	lsls	r2, r3, #4
 8002d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d76:	4413      	add	r3, r2
 8002d78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d8c:	801a      	strh	r2, [r3, #0]
 8002d8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002da0:	801a      	strh	r2, [r3, #0]
 8002da2:	e01a      	b.n	8002dda <HAL_PCD_EP_DB_Transmit+0x48c>
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	785b      	ldrb	r3, [r3, #1]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d116      	bne.n	8002dda <HAL_PCD_EP_DB_Transmit+0x48c>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	677b      	str	r3, [r7, #116]	; 0x74
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dc0:	4413      	add	r3, r2
 8002dc2:	677b      	str	r3, [r7, #116]	; 0x74
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	011a      	lsls	r2, r3, #4
 8002dca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dcc:	4413      	add	r3, r2
 8002dce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002dd2:	673b      	str	r3, [r7, #112]	; 0x70
 8002dd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	67bb      	str	r3, [r7, #120]	; 0x78
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	785b      	ldrb	r3, [r3, #1]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d12f      	bne.n	8002e48 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e00:	4413      	add	r3, r2
 8002e02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	011a      	lsls	r2, r3, #4
 8002e0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e10:	4413      	add	r3, r2
 8002e12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e2c:	801a      	strh	r2, [r3, #0]
 8002e2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e44:	801a      	strh	r2, [r3, #0]
 8002e46:	e017      	b.n	8002e78 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	785b      	ldrb	r3, [r3, #1]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d113      	bne.n	8002e78 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e5e:	4413      	add	r3, r2
 8002e60:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	011a      	lsls	r2, r3, #4
 8002e68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e74:	2200      	movs	r2, #0
 8002e76:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f005 ffb7 	bl	8008df2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f040 8104 	bne.w	8003098 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eaa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	441a      	add	r2, r3
 8002ebc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ec8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	8013      	strh	r3, [r2, #0]
 8002ed4:	e0e0      	b.n	8003098 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d121      	bne.n	8002f24 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	461a      	mov	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	441a      	add	r2, r3
 8002f0c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	f040 80b4 	bne.w	8003098 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f38:	441a      	add	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	69da      	ldr	r2, [r3, #28]
 8002f42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f46:	441a      	add	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	6a1a      	ldr	r2, [r3, #32]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d309      	bcc.n	8002f6c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	6a1a      	ldr	r2, [r3, #32]
 8002f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f64:	1ad2      	subs	r2, r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	621a      	str	r2, [r3, #32]
 8002f6a:	e015      	b.n	8002f98 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d107      	bne.n	8002f84 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002f74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f78:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f82:	e009      	b.n	8002f98 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	667b      	str	r3, [r7, #100]	; 0x64
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	785b      	ldrb	r3, [r3, #1]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d155      	bne.n	8003052 <HAL_PCD_EP_DB_Transmit+0x704>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fba:	4413      	add	r3, r2
 8002fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	011a      	lsls	r2, r3, #4
 8002fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d112      	bne.n	8002ffa <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002fd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fe2:	801a      	strh	r2, [r3, #0]
 8002fe4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ff6:	801a      	strh	r2, [r3, #0]
 8002ff8:	e044      	b.n	8003084 <HAL_PCD_EP_DB_Transmit+0x736>
 8002ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ffc:	2b3e      	cmp	r3, #62	; 0x3e
 8002ffe:	d811      	bhi.n	8003024 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003002:	085b      	lsrs	r3, r3, #1
 8003004:	657b      	str	r3, [r7, #84]	; 0x54
 8003006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003012:	3301      	adds	r3, #1
 8003014:	657b      	str	r3, [r7, #84]	; 0x54
 8003016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003018:	b29b      	uxth	r3, r3
 800301a:	029b      	lsls	r3, r3, #10
 800301c:	b29a      	uxth	r2, r3
 800301e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003020:	801a      	strh	r2, [r3, #0]
 8003022:	e02f      	b.n	8003084 <HAL_PCD_EP_DB_Transmit+0x736>
 8003024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	657b      	str	r3, [r7, #84]	; 0x54
 800302a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800302c:	f003 031f 	and.w	r3, r3, #31
 8003030:	2b00      	cmp	r3, #0
 8003032:	d102      	bne.n	800303a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003036:	3b01      	subs	r3, #1
 8003038:	657b      	str	r3, [r7, #84]	; 0x54
 800303a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800303c:	b29b      	uxth	r3, r3
 800303e:	029b      	lsls	r3, r3, #10
 8003040:	b29b      	uxth	r3, r3
 8003042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800304a:	b29a      	uxth	r2, r3
 800304c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800304e:	801a      	strh	r2, [r3, #0]
 8003050:	e018      	b.n	8003084 <HAL_PCD_EP_DB_Transmit+0x736>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	785b      	ldrb	r3, [r3, #1]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d114      	bne.n	8003084 <HAL_PCD_EP_DB_Transmit+0x736>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003062:	b29b      	uxth	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003068:	4413      	add	r3, r2
 800306a:	667b      	str	r3, [r7, #100]	; 0x64
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	011a      	lsls	r2, r3, #4
 8003072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003074:	4413      	add	r3, r2
 8003076:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800307a:	663b      	str	r3, [r7, #96]	; 0x60
 800307c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800307e:	b29a      	uxth	r2, r3
 8003080:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003082:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	6959      	ldr	r1, [r3, #20]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	895a      	ldrh	r2, [r3, #10]
 8003090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003092:	b29b      	uxth	r3, r3
 8003094:	f004 f8a6 	bl	80071e4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030b2:	823b      	strh	r3, [r7, #16]
 80030b4:	8a3b      	ldrh	r3, [r7, #16]
 80030b6:	f083 0310 	eor.w	r3, r3, #16
 80030ba:	823b      	strh	r3, [r7, #16]
 80030bc:	8a3b      	ldrh	r3, [r7, #16]
 80030be:	f083 0320 	eor.w	r3, r3, #32
 80030c2:	823b      	strh	r3, [r7, #16]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	441a      	add	r2, r3
 80030d2:	8a3b      	ldrh	r3, [r7, #16]
 80030d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3788      	adds	r7, #136	; 0x88
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b087      	sub	sp, #28
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	607b      	str	r3, [r7, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	817b      	strh	r3, [r7, #10]
 8003100:	4613      	mov	r3, r2
 8003102:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003104:	897b      	ldrh	r3, [r7, #10]
 8003106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00b      	beq.n	8003128 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003110:	897b      	ldrh	r3, [r7, #10]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4413      	add	r3, r2
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	e009      	b.n	800313c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003128:	897a      	ldrh	r2, [r7, #10]
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	4413      	add	r3, r2
 800313a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800313c:	893b      	ldrh	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d107      	bne.n	8003152 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2200      	movs	r2, #0
 8003146:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	b29a      	uxth	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	80da      	strh	r2, [r3, #6]
 8003150:	e00b      	b.n	800316a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2201      	movs	r2, #1
 8003156:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	b29a      	uxth	r2, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	0c1b      	lsrs	r3, r3, #16
 8003164:	b29a      	uxth	r2, r3
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	371c      	adds	r7, #28
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr
	...

08003178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e272      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 8087 	beq.w	80032a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003198:	4b92      	ldr	r3, [pc, #584]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 030c 	and.w	r3, r3, #12
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d00c      	beq.n	80031be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031a4:	4b8f      	ldr	r3, [pc, #572]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 030c 	and.w	r3, r3, #12
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d112      	bne.n	80031d6 <HAL_RCC_OscConfig+0x5e>
 80031b0:	4b8c      	ldr	r3, [pc, #560]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031bc:	d10b      	bne.n	80031d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031be:	4b89      	ldr	r3, [pc, #548]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d06c      	beq.n	80032a4 <HAL_RCC_OscConfig+0x12c>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d168      	bne.n	80032a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e24c      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031de:	d106      	bne.n	80031ee <HAL_RCC_OscConfig+0x76>
 80031e0:	4b80      	ldr	r3, [pc, #512]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a7f      	ldr	r2, [pc, #508]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80031e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	e02e      	b.n	800324c <HAL_RCC_OscConfig+0xd4>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10c      	bne.n	8003210 <HAL_RCC_OscConfig+0x98>
 80031f6:	4b7b      	ldr	r3, [pc, #492]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a7a      	ldr	r2, [pc, #488]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	4b78      	ldr	r3, [pc, #480]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a77      	ldr	r2, [pc, #476]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003208:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	e01d      	b.n	800324c <HAL_RCC_OscConfig+0xd4>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0xbc>
 800321a:	4b72      	ldr	r3, [pc, #456]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a71      	ldr	r2, [pc, #452]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	4b6f      	ldr	r3, [pc, #444]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a6e      	ldr	r2, [pc, #440]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	e00b      	b.n	800324c <HAL_RCC_OscConfig+0xd4>
 8003234:	4b6b      	ldr	r3, [pc, #428]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a6a      	ldr	r2, [pc, #424]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 800323a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	4b68      	ldr	r3, [pc, #416]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a67      	ldr	r2, [pc, #412]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800324a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d013      	beq.n	800327c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003254:	f7fe f818 	bl	8001288 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800325c:	f7fe f814 	bl	8001288 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b64      	cmp	r3, #100	; 0x64
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e200      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326e:	4b5d      	ldr	r3, [pc, #372]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0xe4>
 800327a:	e014      	b.n	80032a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7fe f804 	bl	8001288 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003284:	f7fe f800 	bl	8001288 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b64      	cmp	r3, #100	; 0x64
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e1ec      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003296:	4b53      	ldr	r3, [pc, #332]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0x10c>
 80032a2:	e000      	b.n	80032a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d063      	beq.n	800337a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032b2:	4b4c      	ldr	r3, [pc, #304]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00b      	beq.n	80032d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032be:	4b49      	ldr	r3, [pc, #292]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d11c      	bne.n	8003304 <HAL_RCC_OscConfig+0x18c>
 80032ca:	4b46      	ldr	r3, [pc, #280]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d116      	bne.n	8003304 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032d6:	4b43      	ldr	r3, [pc, #268]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d005      	beq.n	80032ee <HAL_RCC_OscConfig+0x176>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d001      	beq.n	80032ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e1c0      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ee:	4b3d      	ldr	r3, [pc, #244]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4939      	ldr	r1, [pc, #228]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003302:	e03a      	b.n	800337a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d020      	beq.n	800334e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800330c:	4b36      	ldr	r3, [pc, #216]	; (80033e8 <HAL_RCC_OscConfig+0x270>)
 800330e:	2201      	movs	r2, #1
 8003310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003312:	f7fd ffb9 	bl	8001288 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800331a:	f7fd ffb5 	bl	8001288 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e1a1      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332c:	4b2d      	ldr	r3, [pc, #180]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f0      	beq.n	800331a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003338:	4b2a      	ldr	r3, [pc, #168]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4927      	ldr	r1, [pc, #156]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003348:	4313      	orrs	r3, r2
 800334a:	600b      	str	r3, [r1, #0]
 800334c:	e015      	b.n	800337a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800334e:	4b26      	ldr	r3, [pc, #152]	; (80033e8 <HAL_RCC_OscConfig+0x270>)
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7fd ff98 	bl	8001288 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800335c:	f7fd ff94 	bl	8001288 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e180      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336e:	4b1d      	ldr	r3, [pc, #116]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d03a      	beq.n	80033fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d019      	beq.n	80033c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800338e:	4b17      	ldr	r3, [pc, #92]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 8003390:	2201      	movs	r2, #1
 8003392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003394:	f7fd ff78 	bl	8001288 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800339c:	f7fd ff74 	bl	8001288 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e160      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ae:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033ba:	2001      	movs	r0, #1
 80033bc:	f000 faa6 	bl	800390c <RCC_Delay>
 80033c0:	e01c      	b.n	80033fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033c2:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c8:	f7fd ff5e 	bl	8001288 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ce:	e00f      	b.n	80033f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d0:	f7fd ff5a 	bl	8001288 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d908      	bls.n	80033f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e146      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
 80033e2:	bf00      	nop
 80033e4:	40021000 	.word	0x40021000
 80033e8:	42420000 	.word	0x42420000
 80033ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f0:	4b92      	ldr	r3, [pc, #584]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1e9      	bne.n	80033d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 80a6 	beq.w	8003556 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800340a:	2300      	movs	r3, #0
 800340c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800340e:	4b8b      	ldr	r3, [pc, #556]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10d      	bne.n	8003436 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800341a:	4b88      	ldr	r3, [pc, #544]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	4a87      	ldr	r2, [pc, #540]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 8003420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003424:	61d3      	str	r3, [r2, #28]
 8003426:	4b85      	ldr	r3, [pc, #532]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003432:	2301      	movs	r3, #1
 8003434:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003436:	4b82      	ldr	r3, [pc, #520]	; (8003640 <HAL_RCC_OscConfig+0x4c8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	2b00      	cmp	r3, #0
 8003440:	d118      	bne.n	8003474 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003442:	4b7f      	ldr	r3, [pc, #508]	; (8003640 <HAL_RCC_OscConfig+0x4c8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a7e      	ldr	r2, [pc, #504]	; (8003640 <HAL_RCC_OscConfig+0x4c8>)
 8003448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800344e:	f7fd ff1b 	bl	8001288 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003456:	f7fd ff17 	bl	8001288 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b64      	cmp	r3, #100	; 0x64
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e103      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003468:	4b75      	ldr	r3, [pc, #468]	; (8003640 <HAL_RCC_OscConfig+0x4c8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d106      	bne.n	800348a <HAL_RCC_OscConfig+0x312>
 800347c:	4b6f      	ldr	r3, [pc, #444]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	4a6e      	ldr	r2, [pc, #440]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	6213      	str	r3, [r2, #32]
 8003488:	e02d      	b.n	80034e6 <HAL_RCC_OscConfig+0x36e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10c      	bne.n	80034ac <HAL_RCC_OscConfig+0x334>
 8003492:	4b6a      	ldr	r3, [pc, #424]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	4a69      	ldr	r2, [pc, #420]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 8003498:	f023 0301 	bic.w	r3, r3, #1
 800349c:	6213      	str	r3, [r2, #32]
 800349e:	4b67      	ldr	r3, [pc, #412]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	4a66      	ldr	r2, [pc, #408]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80034a4:	f023 0304 	bic.w	r3, r3, #4
 80034a8:	6213      	str	r3, [r2, #32]
 80034aa:	e01c      	b.n	80034e6 <HAL_RCC_OscConfig+0x36e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	2b05      	cmp	r3, #5
 80034b2:	d10c      	bne.n	80034ce <HAL_RCC_OscConfig+0x356>
 80034b4:	4b61      	ldr	r3, [pc, #388]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	4a60      	ldr	r2, [pc, #384]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80034ba:	f043 0304 	orr.w	r3, r3, #4
 80034be:	6213      	str	r3, [r2, #32]
 80034c0:	4b5e      	ldr	r3, [pc, #376]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	4a5d      	ldr	r2, [pc, #372]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	6213      	str	r3, [r2, #32]
 80034cc:	e00b      	b.n	80034e6 <HAL_RCC_OscConfig+0x36e>
 80034ce:	4b5b      	ldr	r3, [pc, #364]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	4a5a      	ldr	r2, [pc, #360]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	f023 0301 	bic.w	r3, r3, #1
 80034d8:	6213      	str	r3, [r2, #32]
 80034da:	4b58      	ldr	r3, [pc, #352]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	4a57      	ldr	r2, [pc, #348]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80034e0:	f023 0304 	bic.w	r3, r3, #4
 80034e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d015      	beq.n	800351a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ee:	f7fd fecb 	bl	8001288 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f4:	e00a      	b.n	800350c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f6:	f7fd fec7 	bl	8001288 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	f241 3288 	movw	r2, #5000	; 0x1388
 8003504:	4293      	cmp	r3, r2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e0b1      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350c:	4b4b      	ldr	r3, [pc, #300]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0ee      	beq.n	80034f6 <HAL_RCC_OscConfig+0x37e>
 8003518:	e014      	b.n	8003544 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351a:	f7fd feb5 	bl	8001288 <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003520:	e00a      	b.n	8003538 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003522:	f7fd feb1 	bl	8001288 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003530:	4293      	cmp	r3, r2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e09b      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003538:	4b40      	ldr	r3, [pc, #256]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1ee      	bne.n	8003522 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003544:	7dfb      	ldrb	r3, [r7, #23]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d105      	bne.n	8003556 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354a:	4b3c      	ldr	r3, [pc, #240]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	4a3b      	ldr	r2, [pc, #236]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 8003550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003554:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 8087 	beq.w	800366e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003560:	4b36      	ldr	r3, [pc, #216]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 030c 	and.w	r3, r3, #12
 8003568:	2b08      	cmp	r3, #8
 800356a:	d061      	beq.n	8003630 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d146      	bne.n	8003602 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003574:	4b33      	ldr	r3, [pc, #204]	; (8003644 <HAL_RCC_OscConfig+0x4cc>)
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357a:	f7fd fe85 	bl	8001288 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003582:	f7fd fe81 	bl	8001288 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e06d      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003594:	4b29      	ldr	r3, [pc, #164]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1f0      	bne.n	8003582 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a8:	d108      	bne.n	80035bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035aa:	4b24      	ldr	r3, [pc, #144]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	4921      	ldr	r1, [pc, #132]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035bc:	4b1f      	ldr	r3, [pc, #124]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a19      	ldr	r1, [r3, #32]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	430b      	orrs	r3, r1
 80035ce:	491b      	ldr	r1, [pc, #108]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d4:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <HAL_RCC_OscConfig+0x4cc>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035da:	f7fd fe55 	bl	8001288 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e2:	f7fd fe51 	bl	8001288 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e03d      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCC_OscConfig+0x46a>
 8003600:	e035      	b.n	800366e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003602:	4b10      	ldr	r3, [pc, #64]	; (8003644 <HAL_RCC_OscConfig+0x4cc>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003608:	f7fd fe3e 	bl	8001288 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003610:	f7fd fe3a 	bl	8001288 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e026      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003622:	4b06      	ldr	r3, [pc, #24]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x498>
 800362e:	e01e      	b.n	800366e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d107      	bne.n	8003648 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e019      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
 800363c:	40021000 	.word	0x40021000
 8003640:	40007000 	.word	0x40007000
 8003644:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <HAL_RCC_OscConfig+0x500>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	429a      	cmp	r2, r3
 800365a:	d106      	bne.n	800366a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d001      	beq.n	800366e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40021000 	.word	0x40021000

0800367c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0d0      	b.n	8003832 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003690:	4b6a      	ldr	r3, [pc, #424]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d910      	bls.n	80036c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369e:	4b67      	ldr	r3, [pc, #412]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 0207 	bic.w	r2, r3, #7
 80036a6:	4965      	ldr	r1, [pc, #404]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b63      	ldr	r3, [pc, #396]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0b8      	b.n	8003832 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d020      	beq.n	800370e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d8:	4b59      	ldr	r3, [pc, #356]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4a58      	ldr	r2, [pc, #352]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 80036de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f0:	4b53      	ldr	r3, [pc, #332]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	4a52      	ldr	r2, [pc, #328]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 80036f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036fc:	4b50      	ldr	r3, [pc, #320]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	494d      	ldr	r1, [pc, #308]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 800370a:	4313      	orrs	r3, r2
 800370c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d040      	beq.n	800379c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d107      	bne.n	8003732 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d115      	bne.n	800375a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e07f      	b.n	8003832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373a:	4b41      	ldr	r3, [pc, #260]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e073      	b.n	8003832 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374a:	4b3d      	ldr	r3, [pc, #244]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e06b      	b.n	8003832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800375a:	4b39      	ldr	r3, [pc, #228]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f023 0203 	bic.w	r2, r3, #3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4936      	ldr	r1, [pc, #216]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 8003768:	4313      	orrs	r3, r2
 800376a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800376c:	f7fd fd8c 	bl	8001288 <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003772:	e00a      	b.n	800378a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003774:	f7fd fd88 	bl	8001288 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e053      	b.n	8003832 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378a:	4b2d      	ldr	r3, [pc, #180]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f003 020c 	and.w	r2, r3, #12
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	429a      	cmp	r2, r3
 800379a:	d1eb      	bne.n	8003774 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800379c:	4b27      	ldr	r3, [pc, #156]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d210      	bcs.n	80037cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037aa:	4b24      	ldr	r3, [pc, #144]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 0207 	bic.w	r2, r3, #7
 80037b2:	4922      	ldr	r1, [pc, #136]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b20      	ldr	r3, [pc, #128]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e032      	b.n	8003832 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4916      	ldr	r1, [pc, #88]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037f6:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	490e      	ldr	r1, [pc, #56]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 8003806:	4313      	orrs	r3, r2
 8003808:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800380a:	f000 f821 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 800380e:	4602      	mov	r2, r0
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	490a      	ldr	r1, [pc, #40]	; (8003844 <HAL_RCC_ClockConfig+0x1c8>)
 800381c:	5ccb      	ldrb	r3, [r1, r3]
 800381e:	fa22 f303 	lsr.w	r3, r2, r3
 8003822:	4a09      	ldr	r2, [pc, #36]	; (8003848 <HAL_RCC_ClockConfig+0x1cc>)
 8003824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003826:	4b09      	ldr	r3, [pc, #36]	; (800384c <HAL_RCC_ClockConfig+0x1d0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7fd fcea 	bl	8001204 <HAL_InitTick>

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40022000 	.word	0x40022000
 8003840:	40021000 	.word	0x40021000
 8003844:	0800938c 	.word	0x0800938c
 8003848:	20000000 	.word	0x20000000
 800384c:	20000004 	.word	0x20000004

08003850 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003850:	b490      	push	{r4, r7}
 8003852:	b08a      	sub	sp, #40	; 0x28
 8003854:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003856:	4b29      	ldr	r3, [pc, #164]	; (80038fc <HAL_RCC_GetSysClockFreq+0xac>)
 8003858:	1d3c      	adds	r4, r7, #4
 800385a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800385c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003860:	f240 2301 	movw	r3, #513	; 0x201
 8003864:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003866:	2300      	movs	r3, #0
 8003868:	61fb      	str	r3, [r7, #28]
 800386a:	2300      	movs	r3, #0
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	2300      	movs	r3, #0
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800387a:	4b21      	ldr	r3, [pc, #132]	; (8003900 <HAL_RCC_GetSysClockFreq+0xb0>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	2b04      	cmp	r3, #4
 8003888:	d002      	beq.n	8003890 <HAL_RCC_GetSysClockFreq+0x40>
 800388a:	2b08      	cmp	r3, #8
 800388c:	d003      	beq.n	8003896 <HAL_RCC_GetSysClockFreq+0x46>
 800388e:	e02b      	b.n	80038e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003890:	4b1c      	ldr	r3, [pc, #112]	; (8003904 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003892:	623b      	str	r3, [r7, #32]
      break;
 8003894:	e02b      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	0c9b      	lsrs	r3, r3, #18
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	3328      	adds	r3, #40	; 0x28
 80038a0:	443b      	add	r3, r7
 80038a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d012      	beq.n	80038d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038b2:	4b13      	ldr	r3, [pc, #76]	; (8003900 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	0c5b      	lsrs	r3, r3, #17
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	3328      	adds	r3, #40	; 0x28
 80038be:	443b      	add	r3, r7
 80038c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	4a0e      	ldr	r2, [pc, #56]	; (8003904 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038ca:	fb03 f202 	mul.w	r2, r3, r2
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
 80038d6:	e004      	b.n	80038e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	4a0b      	ldr	r2, [pc, #44]	; (8003908 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	623b      	str	r3, [r7, #32]
      break;
 80038e6:	e002      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038e8:	4b06      	ldr	r3, [pc, #24]	; (8003904 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038ea:	623b      	str	r3, [r7, #32]
      break;
 80038ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ee:	6a3b      	ldr	r3, [r7, #32]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3728      	adds	r7, #40	; 0x28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc90      	pop	{r4, r7}
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	0800932c 	.word	0x0800932c
 8003900:	40021000 	.word	0x40021000
 8003904:	007a1200 	.word	0x007a1200
 8003908:	003d0900 	.word	0x003d0900

0800390c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003914:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <RCC_Delay+0x34>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a0a      	ldr	r2, [pc, #40]	; (8003944 <RCC_Delay+0x38>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	0a5b      	lsrs	r3, r3, #9
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	fb02 f303 	mul.w	r3, r2, r3
 8003926:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003928:	bf00      	nop
  }
  while (Delay --);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1e5a      	subs	r2, r3, #1
 800392e:	60fa      	str	r2, [r7, #12]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1f9      	bne.n	8003928 <RCC_Delay+0x1c>
}
 8003934:	bf00      	nop
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr
 8003940:	20000000 	.word	0x20000000
 8003944:	10624dd3 	.word	0x10624dd3

08003948 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d07d      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003964:	2300      	movs	r3, #0
 8003966:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003968:	4b4f      	ldr	r3, [pc, #316]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10d      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003974:	4b4c      	ldr	r3, [pc, #304]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	4a4b      	ldr	r2, [pc, #300]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800397a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397e:	61d3      	str	r3, [r2, #28]
 8003980:	4b49      	ldr	r3, [pc, #292]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003988:	60bb      	str	r3, [r7, #8]
 800398a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800398c:	2301      	movs	r3, #1
 800398e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003990:	4b46      	ldr	r3, [pc, #280]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d118      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800399c:	4b43      	ldr	r3, [pc, #268]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a42      	ldr	r2, [pc, #264]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a8:	f7fd fc6e 	bl	8001288 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ae:	e008      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b0:	f7fd fc6a 	bl	8001288 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b64      	cmp	r3, #100	; 0x64
 80039bc:	d901      	bls.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e06d      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c2:	4b3a      	ldr	r3, [pc, #232]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039ce:	4b36      	ldr	r3, [pc, #216]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d02e      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d027      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039ec:	4b2e      	ldr	r3, [pc, #184]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039f6:	4b2e      	ldr	r3, [pc, #184]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039f8:	2201      	movs	r2, #1
 80039fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039fc:	4b2c      	ldr	r3, [pc, #176]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a02:	4a29      	ldr	r2, [pc, #164]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d014      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a12:	f7fd fc39 	bl	8001288 <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a18:	e00a      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a1a:	f7fd fc35 	bl	8001288 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e036      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a30:	4b1d      	ldr	r3, [pc, #116]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0ee      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a3c:	4b1a      	ldr	r3, [pc, #104]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	4917      	ldr	r1, [pc, #92]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a4e:	7dfb      	ldrb	r3, [r7, #23]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d105      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a54:	4b14      	ldr	r3, [pc, #80]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	4a13      	ldr	r2, [pc, #76]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a6c:	4b0e      	ldr	r3, [pc, #56]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	490b      	ldr	r1, [pc, #44]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0310 	and.w	r3, r3, #16
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d008      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a8a:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	4904      	ldr	r1, [pc, #16]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	40007000 	.word	0x40007000
 8003ab0:	42420440 	.word	0x42420440

08003ab4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e076      	b.n	8003bb4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d108      	bne.n	8003ae0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ad6:	d009      	beq.n	8003aec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	61da      	str	r2, [r3, #28]
 8003ade:	e005      	b.n	8003aec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d106      	bne.n	8003b0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fd fa9c 	bl	8001044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b70:	ea42 0103 	orr.w	r1, r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	0c1a      	lsrs	r2, r3, #16
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f002 0204 	and.w	r2, r2, #4
 8003b92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	69da      	ldr	r2, [r3, #28]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ba2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	603b      	str	r3, [r7, #0]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d101      	bne.n	8003bde <HAL_SPI_Transmit+0x22>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e126      	b.n	8003e2c <HAL_SPI_Transmit+0x270>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003be6:	f7fd fb4f 	bl	8001288 <HAL_GetTick>
 8003bea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003bec:	88fb      	ldrh	r3, [r7, #6]
 8003bee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d002      	beq.n	8003c02 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c00:	e10b      	b.n	8003e1a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <HAL_SPI_Transmit+0x52>
 8003c08:	88fb      	ldrh	r3, [r7, #6]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d102      	bne.n	8003c14 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c12:	e102      	b.n	8003e1a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2203      	movs	r2, #3
 8003c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	88fa      	ldrh	r2, [r7, #6]
 8003c2c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	88fa      	ldrh	r2, [r7, #6]
 8003c32:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c5a:	d10f      	bne.n	8003c7c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c7a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c86:	2b40      	cmp	r3, #64	; 0x40
 8003c88:	d007      	beq.n	8003c9a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca2:	d14b      	bne.n	8003d3c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <HAL_SPI_Transmit+0xf6>
 8003cac:	8afb      	ldrh	r3, [r7, #22]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d13e      	bne.n	8003d30 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	881a      	ldrh	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	1c9a      	adds	r2, r3, #2
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cd6:	e02b      	b.n	8003d30 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d112      	bne.n	8003d0c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	881a      	ldrh	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	1c9a      	adds	r2, r3, #2
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d0a:	e011      	b.n	8003d30 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d0c:	f7fd fabc 	bl	8001288 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d803      	bhi.n	8003d24 <HAL_SPI_Transmit+0x168>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d22:	d102      	bne.n	8003d2a <HAL_SPI_Transmit+0x16e>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d102      	bne.n	8003d30 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d2e:	e074      	b.n	8003e1a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1ce      	bne.n	8003cd8 <HAL_SPI_Transmit+0x11c>
 8003d3a:	e04c      	b.n	8003dd6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <HAL_SPI_Transmit+0x18e>
 8003d44:	8afb      	ldrh	r3, [r7, #22]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d140      	bne.n	8003dcc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	330c      	adds	r3, #12
 8003d54:	7812      	ldrb	r2, [r2, #0]
 8003d56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d70:	e02c      	b.n	8003dcc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d113      	bne.n	8003da8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	330c      	adds	r3, #12
 8003d8a:	7812      	ldrb	r2, [r2, #0]
 8003d8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	86da      	strh	r2, [r3, #54]	; 0x36
 8003da6:	e011      	b.n	8003dcc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003da8:	f7fd fa6e 	bl	8001288 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d803      	bhi.n	8003dc0 <HAL_SPI_Transmit+0x204>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbe:	d102      	bne.n	8003dc6 <HAL_SPI_Transmit+0x20a>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d102      	bne.n	8003dcc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003dca:	e026      	b.n	8003e1a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1cd      	bne.n	8003d72 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	6839      	ldr	r1, [r7, #0]
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 f8b2 	bl	8003f44 <SPI_EndRxTxTransaction>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10a      	bne.n	8003e0a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003df4:	2300      	movs	r3, #0
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	613b      	str	r3, [r7, #16]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	613b      	str	r3, [r7, #16]
 8003e08:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	77fb      	strb	r3, [r7, #31]
 8003e16:	e000      	b.n	8003e1a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003e18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3720      	adds	r7, #32
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	4613      	mov	r3, r2
 8003e42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e44:	f7fd fa20 	bl	8001288 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	4413      	add	r3, r2
 8003e52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e54:	f7fd fa18 	bl	8001288 <HAL_GetTick>
 8003e58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e5a:	4b39      	ldr	r3, [pc, #228]	; (8003f40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	015b      	lsls	r3, r3, #5
 8003e60:	0d1b      	lsrs	r3, r3, #20
 8003e62:	69fa      	ldr	r2, [r7, #28]
 8003e64:	fb02 f303 	mul.w	r3, r2, r3
 8003e68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e6a:	e054      	b.n	8003f16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e72:	d050      	beq.n	8003f16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e74:	f7fd fa08 	bl	8001288 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	69fa      	ldr	r2, [r7, #28]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d902      	bls.n	8003e8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d13d      	bne.n	8003f06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ea2:	d111      	bne.n	8003ec8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eac:	d004      	beq.n	8003eb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb6:	d107      	bne.n	8003ec8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ec6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed0:	d10f      	bne.n	8003ef2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ef0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e017      	b.n	8003f36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	bf0c      	ite	eq
 8003f26:	2301      	moveq	r3, #1
 8003f28:	2300      	movne	r3, #0
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d19b      	bne.n	8003e6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3720      	adds	r7, #32
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	20000000 	.word	0x20000000

08003f44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2200      	movs	r2, #0
 8003f58:	2180      	movs	r1, #128	; 0x80
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f7ff ff6a 	bl	8003e34 <SPI_WaitFlagStateUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d007      	beq.n	8003f76 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6a:	f043 0220 	orr.w	r2, r3, #32
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e000      	b.n	8003f78 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e041      	b.n	8004016 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fd f88a 	bl	80010c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	f000 fa70 	bl	80044a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b01      	cmp	r3, #1
 8004032:	d001      	beq.n	8004038 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e03a      	b.n	80040ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a18      	ldr	r2, [pc, #96]	; (80040b8 <HAL_TIM_Base_Start_IT+0x98>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00e      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x58>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004062:	d009      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x58>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a14      	ldr	r2, [pc, #80]	; (80040bc <HAL_TIM_Base_Start_IT+0x9c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d004      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x58>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a13      	ldr	r2, [pc, #76]	; (80040c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d111      	bne.n	800409c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b06      	cmp	r3, #6
 8004088:	d010      	beq.n	80040ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0201 	orr.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800409a:	e007      	b.n	80040ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr
 80040b8:	40012c00 	.word	0x40012c00
 80040bc:	40000400 	.word	0x40000400
 80040c0:	40000800 	.word	0x40000800

080040c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d122      	bne.n	8004120 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d11b      	bne.n	8004120 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f06f 0202 	mvn.w	r2, #2
 80040f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f9b1 	bl	800446e <HAL_TIM_IC_CaptureCallback>
 800410c:	e005      	b.n	800411a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f9a4 	bl	800445c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f9b3 	bl	8004480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	2b04      	cmp	r3, #4
 800412c:	d122      	bne.n	8004174 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b04      	cmp	r3, #4
 800413a:	d11b      	bne.n	8004174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f06f 0204 	mvn.w	r2, #4
 8004144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2202      	movs	r2, #2
 800414a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f987 	bl	800446e <HAL_TIM_IC_CaptureCallback>
 8004160:	e005      	b.n	800416e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f97a 	bl	800445c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f989 	bl	8004480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b08      	cmp	r3, #8
 8004180:	d122      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b08      	cmp	r3, #8
 800418e:	d11b      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0208 	mvn.w	r2, #8
 8004198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2204      	movs	r2, #4
 800419e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f95d 	bl	800446e <HAL_TIM_IC_CaptureCallback>
 80041b4:	e005      	b.n	80041c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f950 	bl	800445c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f95f 	bl	8004480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0310 	and.w	r3, r3, #16
 80041d2:	2b10      	cmp	r3, #16
 80041d4:	d122      	bne.n	800421c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 0310 	and.w	r3, r3, #16
 80041e0:	2b10      	cmp	r3, #16
 80041e2:	d11b      	bne.n	800421c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0210 	mvn.w	r2, #16
 80041ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2208      	movs	r2, #8
 80041f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f933 	bl	800446e <HAL_TIM_IC_CaptureCallback>
 8004208:	e005      	b.n	8004216 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f926 	bl	800445c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f935 	bl	8004480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b01      	cmp	r3, #1
 8004228:	d10e      	bne.n	8004248 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b01      	cmp	r3, #1
 8004236:	d107      	bne.n	8004248 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f06f 0201 	mvn.w	r2, #1
 8004240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7fc f8e2 	bl	800040c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004252:	2b80      	cmp	r3, #128	; 0x80
 8004254:	d10e      	bne.n	8004274 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004260:	2b80      	cmp	r3, #128	; 0x80
 8004262:	d107      	bne.n	8004274 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800426c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fa77 	bl	8004762 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427e:	2b40      	cmp	r3, #64	; 0x40
 8004280:	d10e      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428c:	2b40      	cmp	r3, #64	; 0x40
 800428e:	d107      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f8f9 	bl	8004492 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	d10e      	bne.n	80042cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d107      	bne.n	80042cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0220 	mvn.w	r2, #32
 80042c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fa42 	bl	8004750 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042cc:	bf00      	nop
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_TIM_ConfigClockSource+0x18>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e0b3      	b.n	8004454 <HAL_TIM_ConfigClockSource+0x180>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800430a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004312:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004324:	d03e      	beq.n	80043a4 <HAL_TIM_ConfigClockSource+0xd0>
 8004326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800432a:	f200 8087 	bhi.w	800443c <HAL_TIM_ConfigClockSource+0x168>
 800432e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004332:	f000 8085 	beq.w	8004440 <HAL_TIM_ConfigClockSource+0x16c>
 8004336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433a:	d87f      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x168>
 800433c:	2b70      	cmp	r3, #112	; 0x70
 800433e:	d01a      	beq.n	8004376 <HAL_TIM_ConfigClockSource+0xa2>
 8004340:	2b70      	cmp	r3, #112	; 0x70
 8004342:	d87b      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x168>
 8004344:	2b60      	cmp	r3, #96	; 0x60
 8004346:	d050      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x116>
 8004348:	2b60      	cmp	r3, #96	; 0x60
 800434a:	d877      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x168>
 800434c:	2b50      	cmp	r3, #80	; 0x50
 800434e:	d03c      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0xf6>
 8004350:	2b50      	cmp	r3, #80	; 0x50
 8004352:	d873      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x168>
 8004354:	2b40      	cmp	r3, #64	; 0x40
 8004356:	d058      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x136>
 8004358:	2b40      	cmp	r3, #64	; 0x40
 800435a:	d86f      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x168>
 800435c:	2b30      	cmp	r3, #48	; 0x30
 800435e:	d064      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x156>
 8004360:	2b30      	cmp	r3, #48	; 0x30
 8004362:	d86b      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x168>
 8004364:	2b20      	cmp	r3, #32
 8004366:	d060      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x156>
 8004368:	2b20      	cmp	r3, #32
 800436a:	d867      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x168>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d05c      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x156>
 8004370:	2b10      	cmp	r3, #16
 8004372:	d05a      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004374:	e062      	b.n	800443c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6818      	ldr	r0, [r3, #0]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6899      	ldr	r1, [r3, #8]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f000 f966 	bl	8004656 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004398:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	609a      	str	r2, [r3, #8]
      break;
 80043a2:	e04e      	b.n	8004442 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	6899      	ldr	r1, [r3, #8]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f000 f94f 	bl	8004656 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043c6:	609a      	str	r2, [r3, #8]
      break;
 80043c8:	e03b      	b.n	8004442 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6859      	ldr	r1, [r3, #4]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	461a      	mov	r2, r3
 80043d8:	f000 f8c6 	bl	8004568 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2150      	movs	r1, #80	; 0x50
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 f91d 	bl	8004622 <TIM_ITRx_SetConfig>
      break;
 80043e8:	e02b      	b.n	8004442 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6859      	ldr	r1, [r3, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	461a      	mov	r2, r3
 80043f8:	f000 f8e4 	bl	80045c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2160      	movs	r1, #96	; 0x60
 8004402:	4618      	mov	r0, r3
 8004404:	f000 f90d 	bl	8004622 <TIM_ITRx_SetConfig>
      break;
 8004408:	e01b      	b.n	8004442 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	6859      	ldr	r1, [r3, #4]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	461a      	mov	r2, r3
 8004418:	f000 f8a6 	bl	8004568 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2140      	movs	r1, #64	; 0x40
 8004422:	4618      	mov	r0, r3
 8004424:	f000 f8fd 	bl	8004622 <TIM_ITRx_SetConfig>
      break;
 8004428:	e00b      	b.n	8004442 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4619      	mov	r1, r3
 8004434:	4610      	mov	r0, r2
 8004436:	f000 f8f4 	bl	8004622 <TIM_ITRx_SetConfig>
        break;
 800443a:	e002      	b.n	8004442 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800443c:	bf00      	nop
 800443e:	e000      	b.n	8004442 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004440:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	bc80      	pop	{r7}
 800446c:	4770      	bx	lr

0800446e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	bc80      	pop	{r7}
 800447e:	4770      	bx	lr

08004480 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	bc80      	pop	{r7}
 8004490:	4770      	bx	lr

08004492 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr

080044a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a29      	ldr	r2, [pc, #164]	; (800455c <TIM_Base_SetConfig+0xb8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d00b      	beq.n	80044d4 <TIM_Base_SetConfig+0x30>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c2:	d007      	beq.n	80044d4 <TIM_Base_SetConfig+0x30>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a26      	ldr	r2, [pc, #152]	; (8004560 <TIM_Base_SetConfig+0xbc>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d003      	beq.n	80044d4 <TIM_Base_SetConfig+0x30>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a25      	ldr	r2, [pc, #148]	; (8004564 <TIM_Base_SetConfig+0xc0>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d108      	bne.n	80044e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a1c      	ldr	r2, [pc, #112]	; (800455c <TIM_Base_SetConfig+0xb8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d00b      	beq.n	8004506 <TIM_Base_SetConfig+0x62>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f4:	d007      	beq.n	8004506 <TIM_Base_SetConfig+0x62>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a19      	ldr	r2, [pc, #100]	; (8004560 <TIM_Base_SetConfig+0xbc>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d003      	beq.n	8004506 <TIM_Base_SetConfig+0x62>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a18      	ldr	r2, [pc, #96]	; (8004564 <TIM_Base_SetConfig+0xc0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d108      	bne.n	8004518 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800450c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	4313      	orrs	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a07      	ldr	r2, [pc, #28]	; (800455c <TIM_Base_SetConfig+0xb8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d103      	bne.n	800454c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	615a      	str	r2, [r3, #20]
}
 8004552:	bf00      	nop
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr
 800455c:	40012c00 	.word	0x40012c00
 8004560:	40000400 	.word	0x40000400
 8004564:	40000800 	.word	0x40000800

08004568 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	f023 0201 	bic.w	r2, r3, #1
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f023 030a 	bic.w	r3, r3, #10
 80045a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	621a      	str	r2, [r3, #32]
}
 80045ba:	bf00      	nop
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr

080045c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	f023 0210 	bic.w	r2, r3, #16
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	031b      	lsls	r3, r3, #12
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004600:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	621a      	str	r2, [r3, #32]
}
 8004618:	bf00      	nop
 800461a:	371c      	adds	r7, #28
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr

08004622 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004622:	b480      	push	{r7}
 8004624:	b085      	sub	sp, #20
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004638:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	f043 0307 	orr.w	r3, r3, #7
 8004644:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	609a      	str	r2, [r3, #8]
}
 800464c:	bf00      	nop
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	bc80      	pop	{r7}
 8004654:	4770      	bx	lr

08004656 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004656:	b480      	push	{r7}
 8004658:	b087      	sub	sp, #28
 800465a:	af00      	add	r7, sp, #0
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
 8004662:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004670:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	021a      	lsls	r2, r3, #8
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	431a      	orrs	r2, r3
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	4313      	orrs	r3, r2
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	4313      	orrs	r3, r2
 8004682:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	609a      	str	r2, [r3, #8]
}
 800468a:	bf00      	nop
 800468c:	371c      	adds	r7, #28
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr

08004694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e046      	b.n	800473a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	4313      	orrs	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a16      	ldr	r2, [pc, #88]	; (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d00e      	beq.n	800470e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f8:	d009      	beq.n	800470e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a12      	ldr	r2, [pc, #72]	; (8004748 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d004      	beq.n	800470e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a10      	ldr	r2, [pc, #64]	; (800474c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d10c      	bne.n	8004728 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004714:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	4313      	orrs	r3, r2
 800471e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	bc80      	pop	{r7}
 8004742:	4770      	bx	lr
 8004744:	40012c00 	.word	0x40012c00
 8004748:	40000400 	.word	0x40000400
 800474c:	40000800 	.word	0x40000800

08004750 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr

08004762 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr

08004774 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004774:	b084      	sub	sp, #16
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	f107 0014 	add.w	r0, r7, #20
 8004782:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	b004      	add	sp, #16
 8004792:	4770      	bx	lr

08004794 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80047a4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80047a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bc80      	pop	{r7}
 80047be:	4770      	bx	lr

080047c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80047c8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80047cc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	b29b      	uxth	r3, r3
 80047da:	43db      	mvns	r3, r3
 80047dc:	b29b      	uxth	r3, r3
 80047de:	4013      	ands	r3, r2
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr

080047f4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	bc80      	pop	{r7}
 800480a:	4770      	bx	lr

0800480c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800480c:	b084      	sub	sp, #16
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	f107 0014 	add.w	r0, r7, #20
 800481a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	b004      	add	sp, #16
 800484a:	4770      	bx	lr

0800484c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800484c:	b480      	push	{r7}
 800484e:	b09b      	sub	sp, #108	; 0x6c
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	b29b      	uxth	r3, r3
 800486a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800486e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004872:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	78db      	ldrb	r3, [r3, #3]
 800487a:	2b03      	cmp	r3, #3
 800487c:	d81f      	bhi.n	80048be <USB_ActivateEndpoint+0x72>
 800487e:	a201      	add	r2, pc, #4	; (adr r2, 8004884 <USB_ActivateEndpoint+0x38>)
 8004880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004884:	08004895 	.word	0x08004895
 8004888:	080048b1 	.word	0x080048b1
 800488c:	080048c7 	.word	0x080048c7
 8004890:	080048a3 	.word	0x080048a3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004894:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004898:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800489c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80048a0:	e012      	b.n	80048c8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80048a2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80048a6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80048aa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80048ae:	e00b      	b.n	80048c8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80048b0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80048b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048b8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80048bc:	e004      	b.n	80048c8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80048c4:	e000      	b.n	80048c8 <USB_ActivateEndpoint+0x7c>
      break;
 80048c6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	441a      	add	r2, r3
 80048d2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80048d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	881b      	ldrh	r3, [r3, #0]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004900:	b29a      	uxth	r2, r3
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	b29b      	uxth	r3, r3
 8004908:	4313      	orrs	r3, r2
 800490a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	441a      	add	r2, r3
 8004918:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800491c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800492c:	b29b      	uxth	r3, r3
 800492e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	7b1b      	ldrb	r3, [r3, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	f040 8149 	bne.w	8004bcc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	785b      	ldrb	r3, [r3, #1]
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 8084 	beq.w	8004a4c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	617b      	str	r3, [r7, #20]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800494e:	b29b      	uxth	r3, r3
 8004950:	461a      	mov	r2, r3
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	4413      	add	r3, r2
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	011a      	lsls	r2, r3, #4
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	88db      	ldrh	r3, [r3, #6]
 800496c:	085b      	lsrs	r3, r3, #1
 800496e:	b29b      	uxth	r3, r3
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	81fb      	strh	r3, [r7, #14]
 8004986:	89fb      	ldrh	r3, [r7, #14]
 8004988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01b      	beq.n	80049c8 <USB_ActivateEndpoint+0x17c>
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	b29b      	uxth	r3, r3
 800499e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a6:	81bb      	strh	r3, [r7, #12]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	441a      	add	r2, r3
 80049b2:	89bb      	ldrh	r3, [r7, #12]
 80049b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	78db      	ldrb	r3, [r3, #3]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d020      	beq.n	8004a12 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	881b      	ldrh	r3, [r3, #0]
 80049dc:	b29b      	uxth	r3, r3
 80049de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e6:	813b      	strh	r3, [r7, #8]
 80049e8:	893b      	ldrh	r3, [r7, #8]
 80049ea:	f083 0320 	eor.w	r3, r3, #32
 80049ee:	813b      	strh	r3, [r7, #8]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	441a      	add	r2, r3
 80049fa:	893b      	ldrh	r3, [r7, #8]
 80049fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	8013      	strh	r3, [r2, #0]
 8004a10:	e27f      	b.n	8004f12 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a28:	817b      	strh	r3, [r7, #10]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	441a      	add	r2, r3
 8004a34:	897b      	ldrh	r3, [r7, #10]
 8004a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	8013      	strh	r3, [r2, #0]
 8004a4a:	e262      	b.n	8004f12 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	461a      	mov	r2, r3
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	4413      	add	r3, r2
 8004a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	011a      	lsls	r2, r3, #4
 8004a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	88db      	ldrh	r3, [r3, #6]
 8004a74:	085b      	lsrs	r3, r3, #1
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	4413      	add	r3, r2
 8004a92:	627b      	str	r3, [r7, #36]	; 0x24
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	011a      	lsls	r2, r3, #4
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004aa2:	623b      	str	r3, [r7, #32]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d112      	bne.n	8004ad2 <USB_ActivateEndpoint+0x286>
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	801a      	strh	r2, [r3, #0]
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ac6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	801a      	strh	r2, [r3, #0]
 8004ad0:	e02f      	b.n	8004b32 <USB_ActivateEndpoint+0x2e6>
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	2b3e      	cmp	r3, #62	; 0x3e
 8004ad8:	d813      	bhi.n	8004b02 <USB_ActivateEndpoint+0x2b6>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	085b      	lsrs	r3, r3, #1
 8004ae0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <USB_ActivateEndpoint+0x2a8>
 8004aee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004af0:	3301      	adds	r3, #1
 8004af2:	663b      	str	r3, [r7, #96]	; 0x60
 8004af4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	029b      	lsls	r3, r3, #10
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	801a      	strh	r2, [r3, #0]
 8004b00:	e017      	b.n	8004b32 <USB_ActivateEndpoint+0x2e6>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	663b      	str	r3, [r7, #96]	; 0x60
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f003 031f 	and.w	r3, r3, #31
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d102      	bne.n	8004b1c <USB_ActivateEndpoint+0x2d0>
 8004b16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	663b      	str	r3, [r7, #96]	; 0x60
 8004b1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	029b      	lsls	r3, r3, #10
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	83fb      	strh	r3, [r7, #30]
 8004b40:	8bfb      	ldrh	r3, [r7, #30]
 8004b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d01b      	beq.n	8004b82 <USB_ActivateEndpoint+0x336>
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b60:	83bb      	strh	r3, [r7, #28]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	441a      	add	r2, r3
 8004b6c:	8bbb      	ldrh	r3, [r7, #28]
 8004b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b98:	837b      	strh	r3, [r7, #26]
 8004b9a:	8b7b      	ldrh	r3, [r7, #26]
 8004b9c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ba0:	837b      	strh	r3, [r7, #26]
 8004ba2:	8b7b      	ldrh	r3, [r7, #26]
 8004ba4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ba8:	837b      	strh	r3, [r7, #26]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	441a      	add	r2, r3
 8004bb4:	8b7b      	ldrh	r3, [r7, #26]
 8004bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	8013      	strh	r3, [r2, #0]
 8004bca:	e1a2      	b.n	8004f12 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	441a      	add	r2, r3
 8004bf0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004bf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bfc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c18:	4413      	add	r3, r2
 8004c1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	011a      	lsls	r2, r3, #4
 8004c22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c2a:	657b      	str	r3, [r7, #84]	; 0x54
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	891b      	ldrh	r3, [r3, #8]
 8004c30:	085b      	lsrs	r3, r3, #1
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c3a:	801a      	strh	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	653b      	str	r3, [r7, #80]	; 0x50
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	461a      	mov	r2, r3
 8004c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c4c:	4413      	add	r3, r2
 8004c4e:	653b      	str	r3, [r7, #80]	; 0x50
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	011a      	lsls	r2, r3, #4
 8004c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	895b      	ldrh	r3, [r3, #10]
 8004c64:	085b      	lsrs	r3, r3, #1
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c6e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	785b      	ldrb	r3, [r3, #1]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f040 8091 	bne.w	8004d9c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004c88:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01b      	beq.n	8004cca <USB_ActivateEndpoint+0x47e>
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	441a      	add	r2, r3
 8004cb4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	873b      	strh	r3, [r7, #56]	; 0x38
 8004cd8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d01b      	beq.n	8004d1a <USB_ActivateEndpoint+0x4ce>
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	441a      	add	r2, r3
 8004d04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d30:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004d32:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004d34:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004d38:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004d3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004d3c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d40:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	441a      	add	r2, r3
 8004d4c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d78:	867b      	strh	r3, [r7, #50]	; 0x32
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	441a      	add	r2, r3
 8004d84:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	8013      	strh	r3, [r2, #0]
 8004d9a:	e0ba      	b.n	8004f12 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004dac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d01d      	beq.n	8004df4 <USB_ActivateEndpoint+0x5a8>
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dce:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	441a      	add	r2, r3
 8004ddc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004de8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004e04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01d      	beq.n	8004e4c <USB_ActivateEndpoint+0x600>
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e26:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	441a      	add	r2, r3
 8004e34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	78db      	ldrb	r3, [r3, #3]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d024      	beq.n	8004e9e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004e6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004e72:	f083 0320 	eor.w	r3, r3, #32
 8004e76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	441a      	add	r2, r3
 8004e84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004e88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	8013      	strh	r3, [r2, #0]
 8004e9c:	e01d      	b.n	8004eda <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eb4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	441a      	add	r2, r3
 8004ec2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	441a      	add	r2, r3
 8004efc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004f12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	376c      	adds	r7, #108	; 0x6c
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr

08004f20 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b08d      	sub	sp, #52	; 0x34
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	7b1b      	ldrb	r3, [r3, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f040 808e 	bne.w	8005050 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	785b      	ldrb	r3, [r3, #1]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d044      	beq.n	8004fc6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	81bb      	strh	r3, [r7, #12]
 8004f4a:	89bb      	ldrh	r3, [r7, #12]
 8004f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d01b      	beq.n	8004f8c <USB_DeactivateEndpoint+0x6c>
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6a:	817b      	strh	r3, [r7, #10]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	441a      	add	r2, r3
 8004f76:	897b      	ldrh	r3, [r7, #10]
 8004f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fa2:	813b      	strh	r3, [r7, #8]
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	441a      	add	r2, r3
 8004fae:	893b      	ldrh	r3, [r7, #8]
 8004fb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	8013      	strh	r3, [r2, #0]
 8004fc4:	e192      	b.n	80052ec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	827b      	strh	r3, [r7, #18]
 8004fd4:	8a7b      	ldrh	r3, [r7, #18]
 8004fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d01b      	beq.n	8005016 <USB_DeactivateEndpoint+0xf6>
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff4:	823b      	strh	r3, [r7, #16]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	441a      	add	r2, r3
 8005000:	8a3b      	ldrh	r3, [r7, #16]
 8005002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800500a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800500e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005012:	b29b      	uxth	r3, r3
 8005014:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	b29b      	uxth	r3, r3
 8005024:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502c:	81fb      	strh	r3, [r7, #14]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	441a      	add	r2, r3
 8005038:	89fb      	ldrh	r3, [r7, #14]
 800503a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800503e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800504a:	b29b      	uxth	r3, r3
 800504c:	8013      	strh	r3, [r2, #0]
 800504e:	e14d      	b.n	80052ec <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	785b      	ldrb	r3, [r3, #1]
 8005054:	2b00      	cmp	r3, #0
 8005056:	f040 80a5 	bne.w	80051a4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	843b      	strh	r3, [r7, #32]
 8005068:	8c3b      	ldrh	r3, [r7, #32]
 800506a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d01b      	beq.n	80050aa <USB_DeactivateEndpoint+0x18a>
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	b29b      	uxth	r3, r3
 8005080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005088:	83fb      	strh	r3, [r7, #30]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	441a      	add	r2, r3
 8005094:	8bfb      	ldrh	r3, [r7, #30]
 8005096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800509a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800509e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	83bb      	strh	r3, [r7, #28]
 80050b8:	8bbb      	ldrh	r3, [r7, #28]
 80050ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d01b      	beq.n	80050fa <USB_DeactivateEndpoint+0x1da>
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d8:	837b      	strh	r3, [r7, #26]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	441a      	add	r2, r3
 80050e4:	8b7b      	ldrh	r3, [r7, #26]
 80050e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	b29b      	uxth	r3, r3
 8005108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005110:	833b      	strh	r3, [r7, #24]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	441a      	add	r2, r3
 800511c:	8b3b      	ldrh	r3, [r7, #24]
 800511e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800512a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800512e:	b29b      	uxth	r3, r3
 8005130:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	b29b      	uxth	r3, r3
 8005140:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005148:	82fb      	strh	r3, [r7, #22]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	441a      	add	r2, r3
 8005154:	8afb      	ldrh	r3, [r7, #22]
 8005156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800515a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800515e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005166:	b29b      	uxth	r3, r3
 8005168:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	b29b      	uxth	r3, r3
 8005178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800517c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005180:	82bb      	strh	r3, [r7, #20]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	441a      	add	r2, r3
 800518c:	8abb      	ldrh	r3, [r7, #20]
 800518e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800519a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800519e:	b29b      	uxth	r3, r3
 80051a0:	8013      	strh	r3, [r2, #0]
 80051a2:	e0a3      	b.n	80052ec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80051b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01b      	beq.n	80051f4 <USB_DeactivateEndpoint+0x2d4>
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	441a      	add	r2, r3
 80051de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80051e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005202:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01b      	beq.n	8005244 <USB_DeactivateEndpoint+0x324>
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	881b      	ldrh	r3, [r3, #0]
 8005218:	b29b      	uxth	r3, r3
 800521a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800521e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005222:	853b      	strh	r3, [r7, #40]	; 0x28
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	441a      	add	r2, r3
 800522e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005230:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005234:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800523c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005240:	b29b      	uxth	r3, r3
 8005242:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	b29b      	uxth	r3, r3
 8005252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	441a      	add	r2, r3
 8005266:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800526c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005270:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005278:	b29b      	uxth	r3, r3
 800527a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	b29b      	uxth	r3, r3
 800528a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800528e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005292:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	441a      	add	r2, r3
 800529e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	441a      	add	r2, r3
 80052d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80052d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3734      	adds	r7, #52	; 0x34
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bc80      	pop	{r7}
 80052f6:	4770      	bx	lr

080052f8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b0cc      	sub	sp, #304	; 0x130
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005302:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005306:	6018      	str	r0, [r3, #0]
 8005308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800530c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005310:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005316:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	785b      	ldrb	r3, [r3, #1]
 800531e:	2b01      	cmp	r3, #1
 8005320:	f041 817d 	bne.w	800661e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005328:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	699a      	ldr	r2, [r3, #24]
 8005330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005334:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	429a      	cmp	r2, r3
 800533e:	d908      	bls.n	8005352 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005344:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005350:	e007      	b.n	8005362 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005356:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	7b1b      	ldrb	r3, [r3, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d152      	bne.n	8005418 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005376:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6959      	ldr	r1, [r3, #20]
 800537e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005382:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	88da      	ldrh	r2, [r3, #6]
 800538a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800538e:	b29b      	uxth	r3, r3
 8005390:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005394:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005398:	6800      	ldr	r0, [r0, #0]
 800539a:	f001 ff23 	bl	80071e4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800539e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80053a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80053aa:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80053ae:	6812      	ldr	r2, [r2, #0]
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	4619      	mov	r1, r3
 80053c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80053cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80053d0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80053d4:	6812      	ldr	r2, [r2, #0]
 80053d6:	440a      	add	r2, r1
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	011a      	lsls	r2, r3, #4
 80053e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4413      	add	r3, r2
 80053f4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80053f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053fc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005406:	b29a      	uxth	r2, r3
 8005408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800540c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	801a      	strh	r2, [r3, #0]
 8005414:	f001 b8b5 	b.w	8006582 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800541c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	78db      	ldrb	r3, [r3, #3]
 8005424:	2b02      	cmp	r3, #2
 8005426:	f040 84c6 	bne.w	8005db6 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800542a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6a1a      	ldr	r2, [r3, #32]
 8005436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	429a      	cmp	r2, r3
 8005444:	f240 8443 	bls.w	8005cce <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800544c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	b29b      	uxth	r3, r3
 8005466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800546a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005476:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005480:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	441a      	add	r2, r3
 800548c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005498:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800549c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80054a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6a1a      	ldr	r2, [r3, #32]
 80054b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054b4:	1ad2      	subs	r2, r2, r3
 80054b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80054c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4413      	add	r3, r2
 80054dc:	881b      	ldrh	r3, [r3, #0]
 80054de:	b29b      	uxth	r3, r3
 80054e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 823e 	beq.w	8005966 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ee:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80054f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80054f6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80054fa:	6812      	ldr	r2, [r2, #0]
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005502:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	785b      	ldrb	r3, [r3, #1]
 800550a:	2b00      	cmp	r3, #0
 800550c:	f040 809a 	bne.w	8005644 <USB_EPStartXfer+0x34c>
 8005510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005518:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800551c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005520:	6812      	ldr	r2, [r2, #0]
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005528:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005532:	b29b      	uxth	r3, r3
 8005534:	4619      	mov	r1, r3
 8005536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800553a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800553e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005542:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005546:	6812      	ldr	r2, [r2, #0]
 8005548:	440a      	add	r2, r1
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005550:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	011a      	lsls	r2, r3, #4
 800555a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800555e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4413      	add	r3, r2
 8005566:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800556a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800556e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005578:	2b00      	cmp	r3, #0
 800557a:	d122      	bne.n	80055c2 <USB_EPStartXfer+0x2ca>
 800557c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005580:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	b29b      	uxth	r3, r3
 800558a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800558e:	b29a      	uxth	r2, r3
 8005590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005594:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	801a      	strh	r2, [r3, #0]
 800559c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	801a      	strh	r2, [r3, #0]
 80055c0:	e079      	b.n	80056b6 <USB_EPStartXfer+0x3be>
 80055c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055c6:	2b3e      	cmp	r3, #62	; 0x3e
 80055c8:	d81b      	bhi.n	8005602 <USB_EPStartXfer+0x30a>
 80055ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ce:	085b      	lsrs	r3, r3, #1
 80055d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80055d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d004      	beq.n	80055ea <USB_EPStartXfer+0x2f2>
 80055e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80055e4:	3301      	adds	r3, #1
 80055e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80055ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	029b      	lsls	r3, r3, #10
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	801a      	strh	r2, [r3, #0]
 8005600:	e059      	b.n	80056b6 <USB_EPStartXfer+0x3be>
 8005602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005606:	095b      	lsrs	r3, r3, #5
 8005608:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800560c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005610:	f003 031f 	and.w	r3, r3, #31
 8005614:	2b00      	cmp	r3, #0
 8005616:	d104      	bne.n	8005622 <USB_EPStartXfer+0x32a>
 8005618:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800561c:	3b01      	subs	r3, #1
 800561e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005622:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005626:	b29b      	uxth	r3, r3
 8005628:	029b      	lsls	r3, r3, #10
 800562a:	b29b      	uxth	r3, r3
 800562c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005634:	b29a      	uxth	r2, r3
 8005636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800563a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	801a      	strh	r2, [r3, #0]
 8005642:	e038      	b.n	80056b6 <USB_EPStartXfer+0x3be>
 8005644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005648:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	785b      	ldrb	r3, [r3, #1]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d130      	bne.n	80056b6 <USB_EPStartXfer+0x3be>
 8005654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005658:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005662:	b29b      	uxth	r3, r3
 8005664:	4619      	mov	r1, r3
 8005666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800566e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005672:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005676:	6812      	ldr	r2, [r2, #0]
 8005678:	440a      	add	r2, r1
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005680:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	011a      	lsls	r2, r3, #4
 800568a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800568e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4413      	add	r3, r2
 8005696:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800569a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80056b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	895b      	ldrh	r3, [r3, #10]
 80056c2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6959      	ldr	r1, [r3, #20]
 80056d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80056dc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80056e0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80056e4:	6800      	ldr	r0, [r0, #0]
 80056e6:	f001 fd7d 	bl	80071e4 <USB_WritePMA>
            ep->xfer_buff += len;
 80056ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	695a      	ldr	r2, [r3, #20]
 80056f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056fa:	441a      	add	r2, r3
 80056fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005700:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800570c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6a1a      	ldr	r2, [r3, #32]
 8005714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005718:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	429a      	cmp	r2, r3
 8005722:	d90f      	bls.n	8005744 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005728:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6a1a      	ldr	r2, [r3, #32]
 8005730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005734:	1ad2      	subs	r2, r2, r3
 8005736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800573a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	621a      	str	r2, [r3, #32]
 8005742:	e00e      	b.n	8005762 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2200      	movs	r2, #0
 8005760:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	785b      	ldrb	r3, [r3, #1]
 800576e:	2b00      	cmp	r3, #0
 8005770:	f040 809a 	bne.w	80058a8 <USB_EPStartXfer+0x5b0>
 8005774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005778:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800577c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005780:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005784:	6812      	ldr	r2, [r2, #0]
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005796:	b29b      	uxth	r3, r3
 8005798:	4619      	mov	r1, r3
 800579a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800579e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80057a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80057a6:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80057aa:	6812      	ldr	r2, [r2, #0]
 80057ac:	440a      	add	r2, r1
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	011a      	lsls	r2, r3, #4
 80057be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057c2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4413      	add	r3, r2
 80057ca:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80057ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d122      	bne.n	8005826 <USB_EPStartXfer+0x52e>
 80057e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	801a      	strh	r2, [r3, #0]
 8005800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005804:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	b29b      	uxth	r3, r3
 800580e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005816:	b29a      	uxth	r2, r3
 8005818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800581c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	801a      	strh	r2, [r3, #0]
 8005824:	e083      	b.n	800592e <USB_EPStartXfer+0x636>
 8005826:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800582a:	2b3e      	cmp	r3, #62	; 0x3e
 800582c:	d81b      	bhi.n	8005866 <USB_EPStartXfer+0x56e>
 800582e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005832:	085b      	lsrs	r3, r3, #1
 8005834:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005838:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d004      	beq.n	800584e <USB_EPStartXfer+0x556>
 8005844:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005848:	3301      	adds	r3, #1
 800584a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800584e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005852:	b29b      	uxth	r3, r3
 8005854:	029b      	lsls	r3, r3, #10
 8005856:	b29a      	uxth	r2, r3
 8005858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	801a      	strh	r2, [r3, #0]
 8005864:	e063      	b.n	800592e <USB_EPStartXfer+0x636>
 8005866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800586a:	095b      	lsrs	r3, r3, #5
 800586c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005870:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005874:	f003 031f 	and.w	r3, r3, #31
 8005878:	2b00      	cmp	r3, #0
 800587a:	d104      	bne.n	8005886 <USB_EPStartXfer+0x58e>
 800587c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005880:	3b01      	subs	r3, #1
 8005882:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005886:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800588a:	b29b      	uxth	r3, r3
 800588c:	029b      	lsls	r3, r3, #10
 800588e:	b29b      	uxth	r3, r3
 8005890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005898:	b29a      	uxth	r2, r3
 800589a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	801a      	strh	r2, [r3, #0]
 80058a6:	e042      	b.n	800592e <USB_EPStartXfer+0x636>
 80058a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	785b      	ldrb	r3, [r3, #1]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d13a      	bne.n	800592e <USB_EPStartXfer+0x636>
 80058b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80058c0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058c4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80058c8:	6812      	ldr	r2, [r2, #0]
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058da:	b29b      	uxth	r3, r3
 80058dc:	4619      	mov	r1, r3
 80058de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80058e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058ea:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80058ee:	6812      	ldr	r2, [r2, #0]
 80058f0:	440a      	add	r2, r1
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	011a      	lsls	r2, r3, #4
 8005902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005906:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4413      	add	r3, r2
 800590e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005916:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005920:	b29a      	uxth	r2, r3
 8005922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005926:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800592e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005932:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	891b      	ldrh	r3, [r3, #8]
 800593a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800593e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005942:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6959      	ldr	r1, [r3, #20]
 800594a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800594e:	b29b      	uxth	r3, r3
 8005950:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005954:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005958:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800595c:	6800      	ldr	r0, [r0, #0]
 800595e:	f001 fc41 	bl	80071e4 <USB_WritePMA>
 8005962:	f000 be0e 	b.w	8006582 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800596a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	785b      	ldrb	r3, [r3, #1]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d16d      	bne.n	8005a52 <USB_EPStartXfer+0x75a>
 8005976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800597a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	64bb      	str	r3, [r7, #72]	; 0x48
 8005982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005986:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005990:	b29b      	uxth	r3, r3
 8005992:	461a      	mov	r2, r3
 8005994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005996:	4413      	add	r3, r2
 8005998:	64bb      	str	r3, [r7, #72]	; 0x48
 800599a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	011a      	lsls	r2, r3, #4
 80059a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059aa:	4413      	add	r3, r2
 80059ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059b0:	647b      	str	r3, [r7, #68]	; 0x44
 80059b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d112      	bne.n	80059e0 <USB_EPStartXfer+0x6e8>
 80059ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	b29b      	uxth	r3, r3
 80059c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c8:	801a      	strh	r2, [r3, #0]
 80059ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059d8:	b29a      	uxth	r2, r3
 80059da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059dc:	801a      	strh	r2, [r3, #0]
 80059de:	e063      	b.n	8005aa8 <USB_EPStartXfer+0x7b0>
 80059e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059e4:	2b3e      	cmp	r3, #62	; 0x3e
 80059e6:	d817      	bhi.n	8005a18 <USB_EPStartXfer+0x720>
 80059e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ec:	085b      	lsrs	r3, r3, #1
 80059ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80059f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d004      	beq.n	8005a08 <USB_EPStartXfer+0x710>
 80059fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005a02:	3301      	adds	r3, #1
 8005a04:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005a08:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	029b      	lsls	r3, r3, #10
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a14:	801a      	strh	r2, [r3, #0]
 8005a16:	e047      	b.n	8005aa8 <USB_EPStartXfer+0x7b0>
 8005a18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a1c:	095b      	lsrs	r3, r3, #5
 8005a1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a26:	f003 031f 	and.w	r3, r3, #31
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d104      	bne.n	8005a38 <USB_EPStartXfer+0x740>
 8005a2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005a32:	3b01      	subs	r3, #1
 8005a34:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005a38:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	029b      	lsls	r3, r3, #10
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a4e:	801a      	strh	r2, [r3, #0]
 8005a50:	e02a      	b.n	8005aa8 <USB_EPStartXfer+0x7b0>
 8005a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	785b      	ldrb	r3, [r3, #1]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d122      	bne.n	8005aa8 <USB_EPStartXfer+0x7b0>
 8005a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	653b      	str	r3, [r7, #80]	; 0x50
 8005a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	461a      	mov	r2, r3
 8005a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a82:	4413      	add	r3, r2
 8005a84:	653b      	str	r3, [r7, #80]	; 0x50
 8005a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	011a      	lsls	r2, r3, #4
 8005a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a96:	4413      	add	r3, r2
 8005a98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	891b      	ldrh	r3, [r3, #8]
 8005ab4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005abc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6959      	ldr	r1, [r3, #20]
 8005ac4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ace:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005ad2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005ad6:	6800      	ldr	r0, [r0, #0]
 8005ad8:	f001 fb84 	bl	80071e4 <USB_WritePMA>
            ep->xfer_buff += len;
 8005adc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	695a      	ldr	r2, [r3, #20]
 8005ae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aec:	441a      	add	r2, r3
 8005aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6a1a      	ldr	r2, [r3, #32]
 8005b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d90f      	bls.n	8005b36 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6a1a      	ldr	r2, [r3, #32]
 8005b22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b26:	1ad2      	subs	r2, r2, r3
 8005b28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	621a      	str	r2, [r3, #32]
 8005b34:	e00e      	b.n	8005b54 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2200      	movs	r2, #0
 8005b52:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	643b      	str	r3, [r7, #64]	; 0x40
 8005b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	785b      	ldrb	r3, [r3, #1]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d16d      	bne.n	8005c4c <USB_EPStartXfer+0x954>
 8005b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b90:	4413      	add	r3, r2
 8005b92:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	011a      	lsls	r2, r3, #4
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005baa:	637b      	str	r3, [r7, #52]	; 0x34
 8005bac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d112      	bne.n	8005bda <USB_EPStartXfer+0x8e2>
 8005bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc2:	801a      	strh	r2, [r3, #0]
 8005bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd6:	801a      	strh	r2, [r3, #0]
 8005bd8:	e05d      	b.n	8005c96 <USB_EPStartXfer+0x99e>
 8005bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bde:	2b3e      	cmp	r3, #62	; 0x3e
 8005be0:	d817      	bhi.n	8005c12 <USB_EPStartXfer+0x91a>
 8005be2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be6:	085b      	lsrs	r3, r3, #1
 8005be8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d004      	beq.n	8005c02 <USB_EPStartXfer+0x90a>
 8005bf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	029b      	lsls	r3, r3, #10
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c0e:	801a      	strh	r2, [r3, #0]
 8005c10:	e041      	b.n	8005c96 <USB_EPStartXfer+0x99e>
 8005c12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c16:	095b      	lsrs	r3, r3, #5
 8005c18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c20:	f003 031f 	and.w	r3, r3, #31
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d104      	bne.n	8005c32 <USB_EPStartXfer+0x93a>
 8005c28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	029b      	lsls	r3, r3, #10
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c48:	801a      	strh	r2, [r3, #0]
 8005c4a:	e024      	b.n	8005c96 <USB_EPStartXfer+0x99e>
 8005c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	785b      	ldrb	r3, [r3, #1]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d11c      	bne.n	8005c96 <USB_EPStartXfer+0x99e>
 8005c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c70:	4413      	add	r3, r2
 8005c72:	643b      	str	r3, [r7, #64]	; 0x40
 8005c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	011a      	lsls	r2, r3, #4
 8005c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c84:	4413      	add	r3, r2
 8005c86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	895b      	ldrh	r3, [r3, #10]
 8005ca2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005caa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6959      	ldr	r1, [r3, #20]
 8005cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005cbc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005cc0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005cc4:	6800      	ldr	r0, [r0, #0]
 8005cc6:	f001 fa8d 	bl	80071e4 <USB_WritePMA>
 8005cca:	f000 bc5a 	b.w	8006582 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d04:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005d08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	441a      	add	r2, r3
 8005d22:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005d26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	461a      	mov	r2, r3
 8005d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d5a:	4413      	add	r3, r2
 8005d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	011a      	lsls	r2, r3, #4
 8005d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d6e:	4413      	add	r3, r2
 8005d70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d74:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d7e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	891b      	ldrh	r3, [r3, #8]
 8005d8c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6959      	ldr	r1, [r3, #20]
 8005d9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005da6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005daa:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005dae:	6800      	ldr	r0, [r0, #0]
 8005db0:	f001 fa18 	bl	80071e4 <USB_WritePMA>
 8005db4:	e3e5      	b.n	8006582 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ddc:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	441a      	add	r2, r3
 8005dfa:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e06:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6a1a      	ldr	r2, [r3, #32]
 8005e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e22:	1ad2      	subs	r2, r2, r3
 8005e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 81bc 	beq.w	80061d0 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	785b      	ldrb	r3, [r3, #1]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d16d      	bne.n	8005f52 <USB_EPStartXfer+0xc5a>
 8005e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	461a      	mov	r2, r3
 8005e94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e96:	4413      	add	r3, r2
 8005e98:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	011a      	lsls	r2, r3, #4
 8005ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eaa:	4413      	add	r3, r2
 8005eac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005eb0:	677b      	str	r3, [r7, #116]	; 0x74
 8005eb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d112      	bne.n	8005ee0 <USB_EPStartXfer+0xbe8>
 8005eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ec8:	801a      	strh	r2, [r3, #0]
 8005eca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005edc:	801a      	strh	r2, [r3, #0]
 8005ede:	e060      	b.n	8005fa2 <USB_EPStartXfer+0xcaa>
 8005ee0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ee4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ee6:	d817      	bhi.n	8005f18 <USB_EPStartXfer+0xc20>
 8005ee8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eec:	085b      	lsrs	r3, r3, #1
 8005eee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d004      	beq.n	8005f08 <USB_EPStartXfer+0xc10>
 8005efe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f02:	3301      	adds	r3, #1
 8005f04:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f08:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	029b      	lsls	r3, r3, #10
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f14:	801a      	strh	r2, [r3, #0]
 8005f16:	e044      	b.n	8005fa2 <USB_EPStartXfer+0xcaa>
 8005f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f1c:	095b      	lsrs	r3, r3, #5
 8005f1e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f26:	f003 031f 	and.w	r3, r3, #31
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d104      	bne.n	8005f38 <USB_EPStartXfer+0xc40>
 8005f2e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f32:	3b01      	subs	r3, #1
 8005f34:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f38:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	029b      	lsls	r3, r3, #10
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f4e:	801a      	strh	r2, [r3, #0]
 8005f50:	e027      	b.n	8005fa2 <USB_EPStartXfer+0xcaa>
 8005f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	785b      	ldrb	r3, [r3, #1]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d11f      	bne.n	8005fa2 <USB_EPStartXfer+0xcaa>
 8005f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	461a      	mov	r2, r3
 8005f74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f78:	4413      	add	r3, r2
 8005f7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	011a      	lsls	r2, r3, #4
 8005f8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f90:	4413      	add	r3, r2
 8005f92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f96:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fa0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	895b      	ldrh	r3, [r3, #10]
 8005fae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6959      	ldr	r1, [r3, #20]
 8005fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005fc8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005fcc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005fd0:	6800      	ldr	r0, [r0, #0]
 8005fd2:	f001 f907 	bl	80071e4 <USB_WritePMA>
          ep->xfer_buff += len;
 8005fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	695a      	ldr	r2, [r3, #20]
 8005fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fe6:	441a      	add	r2, r3
 8005fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6a1a      	ldr	r2, [r3, #32]
 8006000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006004:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	429a      	cmp	r2, r3
 800600e:	d90f      	bls.n	8006030 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8006010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6a1a      	ldr	r2, [r3, #32]
 800601c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006020:	1ad2      	subs	r2, r2, r3
 8006022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006026:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	621a      	str	r2, [r3, #32]
 800602e:	e00e      	b.n	800604e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006034:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006044:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2200      	movs	r2, #0
 800604c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800604e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 8295 	beq.w	8006582 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800605c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	785b      	ldrb	r3, [r3, #1]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d16d      	bne.n	8006144 <USB_EPStartXfer+0xe4c>
 8006068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800606c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	66bb      	str	r3, [r7, #104]	; 0x68
 8006074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006078:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006082:	b29b      	uxth	r3, r3
 8006084:	461a      	mov	r2, r3
 8006086:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006088:	4413      	add	r3, r2
 800608a:	66bb      	str	r3, [r7, #104]	; 0x68
 800608c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006090:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	011a      	lsls	r2, r3, #4
 800609a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800609c:	4413      	add	r3, r2
 800609e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060a2:	667b      	str	r3, [r7, #100]	; 0x64
 80060a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d112      	bne.n	80060d2 <USB_EPStartXfer+0xdda>
 80060ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060ba:	801a      	strh	r2, [r3, #0]
 80060bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060be:	881b      	ldrh	r3, [r3, #0]
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060ce:	801a      	strh	r2, [r3, #0]
 80060d0:	e063      	b.n	800619a <USB_EPStartXfer+0xea2>
 80060d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060d6:	2b3e      	cmp	r3, #62	; 0x3e
 80060d8:	d817      	bhi.n	800610a <USB_EPStartXfer+0xe12>
 80060da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060de:	085b      	lsrs	r3, r3, #1
 80060e0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80060e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d004      	beq.n	80060fa <USB_EPStartXfer+0xe02>
 80060f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060f4:	3301      	adds	r3, #1
 80060f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80060fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060fe:	b29b      	uxth	r3, r3
 8006100:	029b      	lsls	r3, r3, #10
 8006102:	b29a      	uxth	r2, r3
 8006104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006106:	801a      	strh	r2, [r3, #0]
 8006108:	e047      	b.n	800619a <USB_EPStartXfer+0xea2>
 800610a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800610e:	095b      	lsrs	r3, r3, #5
 8006110:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006118:	f003 031f 	and.w	r3, r3, #31
 800611c:	2b00      	cmp	r3, #0
 800611e:	d104      	bne.n	800612a <USB_EPStartXfer+0xe32>
 8006120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006124:	3b01      	subs	r3, #1
 8006126:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800612a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800612e:	b29b      	uxth	r3, r3
 8006130:	029b      	lsls	r3, r3, #10
 8006132:	b29b      	uxth	r3, r3
 8006134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800613c:	b29a      	uxth	r2, r3
 800613e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006140:	801a      	strh	r2, [r3, #0]
 8006142:	e02a      	b.n	800619a <USB_EPStartXfer+0xea2>
 8006144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006148:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	785b      	ldrb	r3, [r3, #1]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d122      	bne.n	800619a <USB_EPStartXfer+0xea2>
 8006154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006158:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	673b      	str	r3, [r7, #112]	; 0x70
 8006160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006164:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800616e:	b29b      	uxth	r3, r3
 8006170:	461a      	mov	r2, r3
 8006172:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006174:	4413      	add	r3, r2
 8006176:	673b      	str	r3, [r7, #112]	; 0x70
 8006178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800617c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	011a      	lsls	r2, r3, #4
 8006186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006188:	4413      	add	r3, r2
 800618a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800618e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006190:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006194:	b29a      	uxth	r2, r3
 8006196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006198:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800619a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800619e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	891b      	ldrh	r3, [r3, #8]
 80061a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6959      	ldr	r1, [r3, #20]
 80061b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80061c0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80061c4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80061c8:	6800      	ldr	r0, [r0, #0]
 80061ca:	f001 f80b 	bl	80071e4 <USB_WritePMA>
 80061ce:	e1d8      	b.n	8006582 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	785b      	ldrb	r3, [r3, #1]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d178      	bne.n	80062d2 <USB_EPStartXfer+0xfda>
 80061e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	461a      	mov	r2, r3
 8006200:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006204:	4413      	add	r3, r2
 8006206:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800620a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800620e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	011a      	lsls	r2, r3, #4
 8006218:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800621c:	4413      	add	r3, r2
 800621e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006222:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006226:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800622a:	2b00      	cmp	r3, #0
 800622c:	d116      	bne.n	800625c <USB_EPStartXfer+0xf64>
 800622e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	b29b      	uxth	r3, r3
 8006236:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800623a:	b29a      	uxth	r2, r3
 800623c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006240:	801a      	strh	r2, [r3, #0]
 8006242:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	b29b      	uxth	r3, r3
 800624a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800624e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006252:	b29a      	uxth	r2, r3
 8006254:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006258:	801a      	strh	r2, [r3, #0]
 800625a:	e06b      	b.n	8006334 <USB_EPStartXfer+0x103c>
 800625c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006260:	2b3e      	cmp	r3, #62	; 0x3e
 8006262:	d818      	bhi.n	8006296 <USB_EPStartXfer+0xf9e>
 8006264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006268:	085b      	lsrs	r3, r3, #1
 800626a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800626e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d004      	beq.n	8006284 <USB_EPStartXfer+0xf8c>
 800627a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800627e:	3301      	adds	r3, #1
 8006280:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006284:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006288:	b29b      	uxth	r3, r3
 800628a:	029b      	lsls	r3, r3, #10
 800628c:	b29a      	uxth	r2, r3
 800628e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006292:	801a      	strh	r2, [r3, #0]
 8006294:	e04e      	b.n	8006334 <USB_EPStartXfer+0x103c>
 8006296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800629a:	095b      	lsrs	r3, r3, #5
 800629c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80062a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062a4:	f003 031f 	and.w	r3, r3, #31
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d104      	bne.n	80062b6 <USB_EPStartXfer+0xfbe>
 80062ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80062b0:	3b01      	subs	r3, #1
 80062b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80062b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	029b      	lsls	r3, r3, #10
 80062be:	b29b      	uxth	r3, r3
 80062c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062ce:	801a      	strh	r2, [r3, #0]
 80062d0:	e030      	b.n	8006334 <USB_EPStartXfer+0x103c>
 80062d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	785b      	ldrb	r3, [r3, #1]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d128      	bne.n	8006334 <USB_EPStartXfer+0x103c>
 80062e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80062f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062fe:	b29b      	uxth	r3, r3
 8006300:	461a      	mov	r2, r3
 8006302:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006306:	4413      	add	r3, r2
 8006308:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800630c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006310:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	011a      	lsls	r2, r3, #4
 800631a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800631e:	4413      	add	r3, r2
 8006320:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006324:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006328:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800632c:	b29a      	uxth	r2, r3
 800632e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006332:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006338:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	891b      	ldrh	r3, [r3, #8]
 8006340:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006348:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6959      	ldr	r1, [r3, #20]
 8006350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006354:	b29b      	uxth	r3, r3
 8006356:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800635a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800635e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006362:	6800      	ldr	r0, [r0, #0]
 8006364:	f000 ff3e 	bl	80071e4 <USB_WritePMA>
          ep->xfer_buff += len;
 8006368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800636c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	695a      	ldr	r2, [r3, #20]
 8006374:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006378:	441a      	add	r2, r3
 800637a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800637e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800638a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6a1a      	ldr	r2, [r3, #32]
 8006392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006396:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d90f      	bls.n	80063c2 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80063a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6a1a      	ldr	r2, [r3, #32]
 80063ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063b2:	1ad2      	subs	r2, r2, r3
 80063b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	621a      	str	r2, [r3, #32]
 80063c0:	e00e      	b.n	80063e0 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80063c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80063d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2200      	movs	r2, #0
 80063de:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80063e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 80cc 	beq.w	8006582 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	785b      	ldrb	r3, [r3, #1]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d178      	bne.n	80064fa <USB_EPStartXfer+0x1202>
 8006408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800640c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800641a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006424:	b29b      	uxth	r3, r3
 8006426:	461a      	mov	r2, r3
 8006428:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800642c:	4413      	add	r3, r2
 800642e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	011a      	lsls	r2, r3, #4
 8006440:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006444:	4413      	add	r3, r2
 8006446:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800644a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800644e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006452:	2b00      	cmp	r3, #0
 8006454:	d116      	bne.n	8006484 <USB_EPStartXfer+0x118c>
 8006456:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	b29b      	uxth	r3, r3
 800645e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006462:	b29a      	uxth	r2, r3
 8006464:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006468:	801a      	strh	r2, [r3, #0]
 800646a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	b29b      	uxth	r3, r3
 8006472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800647a:	b29a      	uxth	r2, r3
 800647c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006480:	801a      	strh	r2, [r3, #0]
 8006482:	e064      	b.n	800654e <USB_EPStartXfer+0x1256>
 8006484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006488:	2b3e      	cmp	r3, #62	; 0x3e
 800648a:	d818      	bhi.n	80064be <USB_EPStartXfer+0x11c6>
 800648c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006490:	085b      	lsrs	r3, r3, #1
 8006492:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006496:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d004      	beq.n	80064ac <USB_EPStartXfer+0x11b4>
 80064a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064a6:	3301      	adds	r3, #1
 80064a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80064ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	029b      	lsls	r3, r3, #10
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064ba:	801a      	strh	r2, [r3, #0]
 80064bc:	e047      	b.n	800654e <USB_EPStartXfer+0x1256>
 80064be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064c2:	095b      	lsrs	r3, r3, #5
 80064c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80064c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064cc:	f003 031f 	and.w	r3, r3, #31
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d104      	bne.n	80064de <USB_EPStartXfer+0x11e6>
 80064d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064d8:	3b01      	subs	r3, #1
 80064da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80064de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	029b      	lsls	r3, r3, #10
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064f6:	801a      	strh	r2, [r3, #0]
 80064f8:	e029      	b.n	800654e <USB_EPStartXfer+0x1256>
 80064fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	785b      	ldrb	r3, [r3, #1]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d121      	bne.n	800654e <USB_EPStartXfer+0x1256>
 800650a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800650e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006518:	b29b      	uxth	r3, r3
 800651a:	461a      	mov	r2, r3
 800651c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006520:	4413      	add	r3, r2
 8006522:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800652a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	011a      	lsls	r2, r3, #4
 8006534:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006538:	4413      	add	r3, r2
 800653a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800653e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006542:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006546:	b29a      	uxth	r2, r3
 8006548:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800654c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800654e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	895b      	ldrh	r3, [r3, #10]
 800655a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800655e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006562:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6959      	ldr	r1, [r3, #20]
 800656a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800656e:	b29b      	uxth	r3, r3
 8006570:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006574:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006578:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800657c:	6800      	ldr	r0, [r0, #0]
 800657e:	f000 fe31 	bl	80071e4 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006586:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006590:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	b29b      	uxth	r3, r3
 80065a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80065a4:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80065a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065b0:	8013      	strh	r3, [r2, #0]
 80065b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80065ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80065be:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80065c2:	8812      	ldrh	r2, [r2, #0]
 80065c4:	f082 0210 	eor.w	r2, r2, #16
 80065c8:	801a      	strh	r2, [r3, #0]
 80065ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ce:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80065d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80065d6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80065da:	8812      	ldrh	r2, [r2, #0]
 80065dc:	f082 0220 	eor.w	r2, r2, #32
 80065e0:	801a      	strh	r2, [r3, #0]
 80065e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	441a      	add	r2, r3
 80065fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006600:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800660a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800660e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006616:	b29b      	uxth	r3, r3
 8006618:	8013      	strh	r3, [r2, #0]
 800661a:	f000 bc9f 	b.w	8006f5c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800661e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006622:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	7b1b      	ldrb	r3, [r3, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	f040 80ae 	bne.w	800678c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006634:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	699a      	ldr	r2, [r3, #24]
 800663c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006640:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	429a      	cmp	r2, r3
 800664a:	d917      	bls.n	800667c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800664c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006650:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800665c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006660:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	699a      	ldr	r2, [r3, #24]
 8006668:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800666c:	1ad2      	subs	r2, r2, r3
 800666e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006672:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	619a      	str	r2, [r3, #24]
 800667a:	e00e      	b.n	800669a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800667c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006680:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800668c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006690:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2200      	movs	r2, #0
 8006698:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800669a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800669e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	461a      	mov	r2, r3
 80066ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80066be:	4413      	add	r3, r2
 80066c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	011a      	lsls	r2, r3, #4
 80066d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80066d6:	4413      	add	r3, r2
 80066d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d116      	bne.n	8006716 <USB_EPStartXfer+0x141e>
 80066e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066fa:	801a      	strh	r2, [r3, #0]
 80066fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	b29b      	uxth	r3, r3
 8006704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800670c:	b29a      	uxth	r2, r3
 800670e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006712:	801a      	strh	r2, [r3, #0]
 8006714:	e3e8      	b.n	8006ee8 <USB_EPStartXfer+0x1bf0>
 8006716:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800671a:	2b3e      	cmp	r3, #62	; 0x3e
 800671c:	d818      	bhi.n	8006750 <USB_EPStartXfer+0x1458>
 800671e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006722:	085b      	lsrs	r3, r3, #1
 8006724:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006728:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b00      	cmp	r3, #0
 8006732:	d004      	beq.n	800673e <USB_EPStartXfer+0x1446>
 8006734:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006738:	3301      	adds	r3, #1
 800673a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800673e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006742:	b29b      	uxth	r3, r3
 8006744:	029b      	lsls	r3, r3, #10
 8006746:	b29a      	uxth	r2, r3
 8006748:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800674c:	801a      	strh	r2, [r3, #0]
 800674e:	e3cb      	b.n	8006ee8 <USB_EPStartXfer+0x1bf0>
 8006750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006754:	095b      	lsrs	r3, r3, #5
 8006756:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800675a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800675e:	f003 031f 	and.w	r3, r3, #31
 8006762:	2b00      	cmp	r3, #0
 8006764:	d104      	bne.n	8006770 <USB_EPStartXfer+0x1478>
 8006766:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800676a:	3b01      	subs	r3, #1
 800676c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006770:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006774:	b29b      	uxth	r3, r3
 8006776:	029b      	lsls	r3, r3, #10
 8006778:	b29b      	uxth	r3, r3
 800677a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800677e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006782:	b29a      	uxth	r2, r3
 8006784:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006788:	801a      	strh	r2, [r3, #0]
 800678a:	e3ad      	b.n	8006ee8 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800678c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006790:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	78db      	ldrb	r3, [r3, #3]
 8006798:	2b02      	cmp	r3, #2
 800679a:	f040 8200 	bne.w	8006b9e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800679e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	785b      	ldrb	r3, [r3, #1]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f040 8091 	bne.w	80068d2 <USB_EPStartXfer+0x15da>
 80067b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	461a      	mov	r2, r3
 80067d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80067d4:	4413      	add	r3, r2
 80067d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	011a      	lsls	r2, r3, #4
 80067e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80067ec:	4413      	add	r3, r2
 80067ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d116      	bne.n	8006834 <USB_EPStartXfer+0x153c>
 8006806:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	b29b      	uxth	r3, r3
 800680e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006812:	b29a      	uxth	r2, r3
 8006814:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006818:	801a      	strh	r2, [r3, #0]
 800681a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	b29b      	uxth	r3, r3
 8006822:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006826:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800682a:	b29a      	uxth	r2, r3
 800682c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006830:	801a      	strh	r2, [r3, #0]
 8006832:	e083      	b.n	800693c <USB_EPStartXfer+0x1644>
 8006834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006838:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	2b3e      	cmp	r3, #62	; 0x3e
 8006842:	d820      	bhi.n	8006886 <USB_EPStartXfer+0x158e>
 8006844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006848:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	085b      	lsrs	r3, r3, #1
 8006852:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d004      	beq.n	8006874 <USB_EPStartXfer+0x157c>
 800686a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800686e:	3301      	adds	r3, #1
 8006870:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006878:	b29b      	uxth	r3, r3
 800687a:	029b      	lsls	r3, r3, #10
 800687c:	b29a      	uxth	r2, r3
 800687e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006882:	801a      	strh	r2, [r3, #0]
 8006884:	e05a      	b.n	800693c <USB_EPStartXfer+0x1644>
 8006886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800688a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	095b      	lsrs	r3, r3, #5
 8006894:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800689c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	f003 031f 	and.w	r3, r3, #31
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d104      	bne.n	80068b6 <USB_EPStartXfer+0x15be>
 80068ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b0:	3b01      	subs	r3, #1
 80068b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80068b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	029b      	lsls	r3, r3, #10
 80068be:	b29b      	uxth	r3, r3
 80068c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068ce:	801a      	strh	r2, [r3, #0]
 80068d0:	e034      	b.n	800693c <USB_EPStartXfer+0x1644>
 80068d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	785b      	ldrb	r3, [r3, #1]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d12c      	bne.n	800693c <USB_EPStartXfer+0x1644>
 80068e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80068f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068fe:	b29b      	uxth	r3, r3
 8006900:	461a      	mov	r2, r3
 8006902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006906:	4413      	add	r3, r2
 8006908:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800690c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006910:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	011a      	lsls	r2, r3, #4
 800691a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800691e:	4413      	add	r3, r2
 8006920:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006924:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800692c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	b29a      	uxth	r2, r3
 8006936:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800693a:	801a      	strh	r2, [r3, #0]
 800693c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006940:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800694a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800694e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	785b      	ldrb	r3, [r3, #1]
 8006956:	2b00      	cmp	r3, #0
 8006958:	f040 8091 	bne.w	8006a7e <USB_EPStartXfer+0x1786>
 800695c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006960:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800696a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006978:	b29b      	uxth	r3, r3
 800697a:	461a      	mov	r2, r3
 800697c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006980:	4413      	add	r3, r2
 8006982:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800698a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	011a      	lsls	r2, r3, #4
 8006994:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006998:	4413      	add	r3, r2
 800699a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800699e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d116      	bne.n	80069e0 <USB_EPStartXfer+0x16e8>
 80069b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069be:	b29a      	uxth	r2, r3
 80069c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069c4:	801a      	strh	r2, [r3, #0]
 80069c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069dc:	801a      	strh	r2, [r3, #0]
 80069de:	e07c      	b.n	8006ada <USB_EPStartXfer+0x17e2>
 80069e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	2b3e      	cmp	r3, #62	; 0x3e
 80069ee:	d820      	bhi.n	8006a32 <USB_EPStartXfer+0x173a>
 80069f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	085b      	lsrs	r3, r3, #1
 80069fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d004      	beq.n	8006a20 <USB_EPStartXfer+0x1728>
 8006a16:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a20:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	029b      	lsls	r3, r3, #10
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a2e:	801a      	strh	r2, [r3, #0]
 8006a30:	e053      	b.n	8006ada <USB_EPStartXfer+0x17e2>
 8006a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	095b      	lsrs	r3, r3, #5
 8006a40:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	f003 031f 	and.w	r3, r3, #31
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d104      	bne.n	8006a62 <USB_EPStartXfer+0x176a>
 8006a58:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a62:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	029b      	lsls	r3, r3, #10
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a7a:	801a      	strh	r2, [r3, #0]
 8006a7c:	e02d      	b.n	8006ada <USB_EPStartXfer+0x17e2>
 8006a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	785b      	ldrb	r3, [r3, #1]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d125      	bne.n	8006ada <USB_EPStartXfer+0x17e2>
 8006a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	011a      	lsls	r2, r3, #4
 8006ab8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006abc:	4413      	add	r3, r2
 8006abe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ad8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ade:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 81fe 	beq.w	8006ee8 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b0c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d005      	beq.n	8006b24 <USB_EPStartXfer+0x182c>
 8006b18:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10d      	bne.n	8006b40 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b24:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f040 81db 	bne.w	8006ee8 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b32:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f040 81d4 	bne.w	8006ee8 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b66:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	441a      	add	r2, r3
 8006b84:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	8013      	strh	r3, [r2, #0]
 8006b9c:	e1a4      	b.n	8006ee8 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	78db      	ldrb	r3, [r3, #3]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	f040 819a 	bne.w	8006ee4 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	699a      	ldr	r2, [r3, #24]
 8006bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d917      	bls.n	8006bfc <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	699a      	ldr	r2, [r3, #24]
 8006be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bec:	1ad2      	subs	r2, r2, r3
 8006bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	619a      	str	r2, [r3, #24]
 8006bfa:	e00e      	b.n	8006c1a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2200      	movs	r2, #0
 8006c18:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	785b      	ldrb	r3, [r3, #1]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d178      	bne.n	8006d1c <USB_EPStartXfer+0x1a24>
 8006c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	461a      	mov	r2, r3
 8006c4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006c4e:	4413      	add	r3, r2
 8006c50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	011a      	lsls	r2, r3, #4
 8006c62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006c66:	4413      	add	r3, r2
 8006c68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d116      	bne.n	8006ca6 <USB_EPStartXfer+0x19ae>
 8006c78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c7c:	881b      	ldrh	r3, [r3, #0]
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c8a:	801a      	strh	r2, [r3, #0]
 8006c8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c90:	881b      	ldrh	r3, [r3, #0]
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ca2:	801a      	strh	r2, [r3, #0]
 8006ca4:	e06b      	b.n	8006d7e <USB_EPStartXfer+0x1a86>
 8006ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006caa:	2b3e      	cmp	r3, #62	; 0x3e
 8006cac:	d818      	bhi.n	8006ce0 <USB_EPStartXfer+0x19e8>
 8006cae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cb2:	085b      	lsrs	r3, r3, #1
 8006cb4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d004      	beq.n	8006cce <USB_EPStartXfer+0x19d6>
 8006cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cc8:	3301      	adds	r3, #1
 8006cca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	029b      	lsls	r3, r3, #10
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006cdc:	801a      	strh	r2, [r3, #0]
 8006cde:	e04e      	b.n	8006d7e <USB_EPStartXfer+0x1a86>
 8006ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ce4:	095b      	lsrs	r3, r3, #5
 8006ce6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cee:	f003 031f 	and.w	r3, r3, #31
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d104      	bne.n	8006d00 <USB_EPStartXfer+0x1a08>
 8006cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	029b      	lsls	r3, r3, #10
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d18:	801a      	strh	r2, [r3, #0]
 8006d1a:	e030      	b.n	8006d7e <USB_EPStartXfer+0x1a86>
 8006d1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	785b      	ldrb	r3, [r3, #1]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d128      	bne.n	8006d7e <USB_EPStartXfer+0x1a86>
 8006d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d50:	4413      	add	r3, r2
 8006d52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	011a      	lsls	r2, r3, #4
 8006d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d68:	4413      	add	r3, r2
 8006d6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d7c:	801a      	strh	r2, [r3, #0]
 8006d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	785b      	ldrb	r3, [r3, #1]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d178      	bne.n	8006e8e <USB_EPStartXfer+0x1b96>
 8006d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	461a      	mov	r2, r3
 8006dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	011a      	lsls	r2, r3, #4
 8006dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dd8:	4413      	add	r3, r2
 8006dda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d116      	bne.n	8006e18 <USB_EPStartXfer+0x1b20>
 8006dea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dfc:	801a      	strh	r2, [r3, #0]
 8006dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e14:	801a      	strh	r2, [r3, #0]
 8006e16:	e067      	b.n	8006ee8 <USB_EPStartXfer+0x1bf0>
 8006e18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e1c:	2b3e      	cmp	r3, #62	; 0x3e
 8006e1e:	d818      	bhi.n	8006e52 <USB_EPStartXfer+0x1b5a>
 8006e20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e24:	085b      	lsrs	r3, r3, #1
 8006e26:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d004      	beq.n	8006e40 <USB_EPStartXfer+0x1b48>
 8006e36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	029b      	lsls	r3, r3, #10
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e4e:	801a      	strh	r2, [r3, #0]
 8006e50:	e04a      	b.n	8006ee8 <USB_EPStartXfer+0x1bf0>
 8006e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e56:	095b      	lsrs	r3, r3, #5
 8006e58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e60:	f003 031f 	and.w	r3, r3, #31
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d104      	bne.n	8006e72 <USB_EPStartXfer+0x1b7a>
 8006e68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	029b      	lsls	r3, r3, #10
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e8a:	801a      	strh	r2, [r3, #0]
 8006e8c:	e02c      	b.n	8006ee8 <USB_EPStartXfer+0x1bf0>
 8006e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	785b      	ldrb	r3, [r3, #1]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d124      	bne.n	8006ee8 <USB_EPStartXfer+0x1bf0>
 8006e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ebe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	011a      	lsls	r2, r3, #4
 8006ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ecc:	4413      	add	r3, r2
 8006ece:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ed2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ee0:	801a      	strh	r2, [r3, #0]
 8006ee2:	e001      	b.n	8006ee8 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e03a      	b.n	8006f5e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	881b      	ldrh	r3, [r3, #0]
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f0e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006f12:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006f16:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f1a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006f1e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006f22:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f26:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	441a      	add	r2, r3
 8006f44:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006f48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	785b      	ldrb	r3, [r3, #1]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d020      	beq.n	8006fbc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	881b      	ldrh	r3, [r3, #0]
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f90:	81bb      	strh	r3, [r7, #12]
 8006f92:	89bb      	ldrh	r3, [r7, #12]
 8006f94:	f083 0310 	eor.w	r3, r3, #16
 8006f98:	81bb      	strh	r3, [r7, #12]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	441a      	add	r2, r3
 8006fa4:	89bb      	ldrh	r3, [r7, #12]
 8006fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	8013      	strh	r3, [r2, #0]
 8006fba:	e01f      	b.n	8006ffc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd2:	81fb      	strh	r3, [r7, #14]
 8006fd4:	89fb      	ldrh	r3, [r7, #14]
 8006fd6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006fda:	81fb      	strh	r3, [r7, #14]
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	441a      	add	r2, r3
 8006fe6:	89fb      	ldrh	r3, [r7, #14]
 8006fe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	bc80      	pop	{r7}
 8007006:	4770      	bx	lr

08007008 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	7b1b      	ldrb	r3, [r3, #12]
 8007016:	2b00      	cmp	r3, #0
 8007018:	f040 809d 	bne.w	8007156 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	785b      	ldrb	r3, [r3, #1]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d04c      	beq.n	80070be <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	881b      	ldrh	r3, [r3, #0]
 8007030:	823b      	strh	r3, [r7, #16]
 8007032:	8a3b      	ldrh	r3, [r7, #16]
 8007034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007038:	2b00      	cmp	r3, #0
 800703a:	d01b      	beq.n	8007074 <USB_EPClearStall+0x6c>
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	b29b      	uxth	r3, r3
 800704a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800704e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007052:	81fb      	strh	r3, [r7, #14]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	441a      	add	r2, r3
 800705e:	89fb      	ldrh	r3, [r7, #14]
 8007060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800706c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007070:	b29b      	uxth	r3, r3
 8007072:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	78db      	ldrb	r3, [r3, #3]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d06c      	beq.n	8007156 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	b29b      	uxth	r3, r3
 800708a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800708e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007092:	81bb      	strh	r3, [r7, #12]
 8007094:	89bb      	ldrh	r3, [r7, #12]
 8007096:	f083 0320 	eor.w	r3, r3, #32
 800709a:	81bb      	strh	r3, [r7, #12]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	441a      	add	r2, r3
 80070a6:	89bb      	ldrh	r3, [r7, #12]
 80070a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	8013      	strh	r3, [r2, #0]
 80070bc:	e04b      	b.n	8007156 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4413      	add	r3, r2
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	82fb      	strh	r3, [r7, #22]
 80070cc:	8afb      	ldrh	r3, [r7, #22]
 80070ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d01b      	beq.n	800710e <USB_EPClearStall+0x106>
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	881b      	ldrh	r3, [r3, #0]
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ec:	82bb      	strh	r3, [r7, #20]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	441a      	add	r2, r3
 80070f8:	8abb      	ldrh	r3, [r7, #20]
 80070fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007102:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800710a:	b29b      	uxth	r3, r3
 800710c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	881b      	ldrh	r3, [r3, #0]
 800711a:	b29b      	uxth	r3, r3
 800711c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007124:	827b      	strh	r3, [r7, #18]
 8007126:	8a7b      	ldrh	r3, [r7, #18]
 8007128:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800712c:	827b      	strh	r3, [r7, #18]
 800712e:	8a7b      	ldrh	r3, [r7, #18]
 8007130:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007134:	827b      	strh	r3, [r7, #18]
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	441a      	add	r2, r3
 8007140:	8a7b      	ldrh	r3, [r7, #18]
 8007142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800714a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800714e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007152:	b29b      	uxth	r3, r3
 8007154:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	371c      	adds	r7, #28
 800715c:	46bd      	mov	sp, r7
 800715e:	bc80      	pop	{r7}
 8007160:	4770      	bx	lr

08007162 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	460b      	mov	r3, r1
 800716c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800716e:	78fb      	ldrb	r3, [r7, #3]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d103      	bne.n	800717c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2280      	movs	r2, #128	; 0x80
 8007178:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	bc80      	pop	{r7}
 8007186:	4770      	bx	lr

08007188 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	bc80      	pop	{r7}
 800719a:	4770      	bx	lr

0800719c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bc80      	pop	{r7}
 80071ae:	4770      	bx	lr

080071b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80071be:	b29b      	uxth	r3, r3
 80071c0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80071c2:	68fb      	ldr	r3, [r7, #12]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bc80      	pop	{r7}
 80071cc:	4770      	bx	lr

080071ce <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b083      	sub	sp, #12
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	bc80      	pop	{r7}
 80071e2:	4770      	bx	lr

080071e4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b08d      	sub	sp, #52	; 0x34
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	4611      	mov	r1, r2
 80071f0:	461a      	mov	r2, r3
 80071f2:	460b      	mov	r3, r1
 80071f4:	80fb      	strh	r3, [r7, #6]
 80071f6:	4613      	mov	r3, r2
 80071f8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80071fa:	88bb      	ldrh	r3, [r7, #4]
 80071fc:	3301      	adds	r3, #1
 80071fe:	085b      	lsrs	r3, r3, #1
 8007200:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800720a:	88fb      	ldrh	r3, [r7, #6]
 800720c:	005a      	lsls	r2, r3, #1
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	4413      	add	r3, r2
 8007212:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007216:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007218:	6a3b      	ldr	r3, [r7, #32]
 800721a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800721c:	e01e      	b.n	800725c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	3301      	adds	r3, #1
 8007228:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	b29b      	uxth	r3, r3
 8007230:	021b      	lsls	r3, r3, #8
 8007232:	b29b      	uxth	r3, r3
 8007234:	461a      	mov	r2, r3
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	4313      	orrs	r3, r2
 800723a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	b29a      	uxth	r2, r3
 8007240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007242:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007246:	3302      	adds	r3, #2
 8007248:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800724a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724c:	3302      	adds	r3, #2
 800724e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	3301      	adds	r3, #1
 8007254:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007258:	3b01      	subs	r3, #1
 800725a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800725c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1dd      	bne.n	800721e <USB_WritePMA+0x3a>
  }
}
 8007262:	bf00      	nop
 8007264:	bf00      	nop
 8007266:	3734      	adds	r7, #52	; 0x34
 8007268:	46bd      	mov	sp, r7
 800726a:	bc80      	pop	{r7}
 800726c:	4770      	bx	lr

0800726e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800726e:	b480      	push	{r7}
 8007270:	b08b      	sub	sp, #44	; 0x2c
 8007272:	af00      	add	r7, sp, #0
 8007274:	60f8      	str	r0, [r7, #12]
 8007276:	60b9      	str	r1, [r7, #8]
 8007278:	4611      	mov	r1, r2
 800727a:	461a      	mov	r2, r3
 800727c:	460b      	mov	r3, r1
 800727e:	80fb      	strh	r3, [r7, #6]
 8007280:	4613      	mov	r3, r2
 8007282:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007284:	88bb      	ldrh	r3, [r7, #4]
 8007286:	085b      	lsrs	r3, r3, #1
 8007288:	b29b      	uxth	r3, r3
 800728a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007294:	88fb      	ldrh	r3, [r7, #6]
 8007296:	005a      	lsls	r2, r3, #1
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072a0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	627b      	str	r3, [r7, #36]	; 0x24
 80072a6:	e01b      	b.n	80072e0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80072a8:	6a3b      	ldr	r3, [r7, #32]
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	3302      	adds	r3, #2
 80072b4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	3301      	adds	r3, #1
 80072c2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	0a1b      	lsrs	r3, r3, #8
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	3301      	adds	r3, #1
 80072d2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	3302      	adds	r3, #2
 80072d8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	3b01      	subs	r3, #1
 80072de:	627b      	str	r3, [r7, #36]	; 0x24
 80072e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1e0      	bne.n	80072a8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80072e6:	88bb      	ldrh	r3, [r7, #4]
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d007      	beq.n	8007302 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	b2da      	uxtb	r2, r3
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	701a      	strb	r2, [r3, #0]
  }
}
 8007302:	bf00      	nop
 8007304:	372c      	adds	r7, #44	; 0x2c
 8007306:	46bd      	mov	sp, r7
 8007308:	bc80      	pop	{r7}
 800730a:	4770      	bx	lr

0800730c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	460b      	mov	r3, r1
 8007316:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007318:	2300      	movs	r3, #0
 800731a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	7c1b      	ldrb	r3, [r3, #16]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d115      	bne.n	8007350 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007328:	2202      	movs	r2, #2
 800732a:	2181      	movs	r1, #129	; 0x81
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f001 fe44 	bl	8008fba <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800733c:	2202      	movs	r2, #2
 800733e:	2101      	movs	r1, #1
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f001 fe3a 	bl	8008fba <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2201      	movs	r2, #1
 800734a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800734e:	e012      	b.n	8007376 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007350:	2340      	movs	r3, #64	; 0x40
 8007352:	2202      	movs	r2, #2
 8007354:	2181      	movs	r1, #129	; 0x81
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f001 fe2f 	bl	8008fba <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007362:	2340      	movs	r3, #64	; 0x40
 8007364:	2202      	movs	r2, #2
 8007366:	2101      	movs	r1, #1
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f001 fe26 	bl	8008fba <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007376:	2308      	movs	r3, #8
 8007378:	2203      	movs	r2, #3
 800737a:	2182      	movs	r1, #130	; 0x82
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 fe1c 	bl	8008fba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007388:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800738c:	f001 ff3c 	bl	8009208 <USBD_static_malloc>
 8007390:	4602      	mov	r2, r0
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d102      	bne.n	80073a8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80073a2:	2301      	movs	r3, #1
 80073a4:	73fb      	strb	r3, [r7, #15]
 80073a6:	e026      	b.n	80073f6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ae:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2200      	movs	r2, #0
 80073be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	7c1b      	ldrb	r3, [r3, #16]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d109      	bne.n	80073e6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073dc:	2101      	movs	r1, #1
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f001 fedc 	bl	800919c <USBD_LL_PrepareReceive>
 80073e4:	e007      	b.n	80073f6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073ec:	2340      	movs	r3, #64	; 0x40
 80073ee:	2101      	movs	r1, #1
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f001 fed3 	bl	800919c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80073f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	460b      	mov	r3, r1
 800740a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800740c:	2300      	movs	r3, #0
 800740e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007410:	2181      	movs	r1, #129	; 0x81
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 fdf7 	bl	8009006 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800741e:	2101      	movs	r1, #1
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f001 fdf0 	bl	8009006 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800742e:	2182      	movs	r1, #130	; 0x82
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f001 fde8 	bl	8009006 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00e      	beq.n	8007464 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007456:	4618      	mov	r0, r3
 8007458:	f001 fee2 	bl	8009220 <USBD_static_free>
    pdev->pClassData = NULL;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007464:	7bfb      	ldrb	r3, [r7, #15]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b086      	sub	sp, #24
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800747e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007480:	2300      	movs	r3, #0
 8007482:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007484:	2300      	movs	r3, #0
 8007486:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007494:	2b00      	cmp	r3, #0
 8007496:	d039      	beq.n	800750c <USBD_CDC_Setup+0x9e>
 8007498:	2b20      	cmp	r3, #32
 800749a:	d17f      	bne.n	800759c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	88db      	ldrh	r3, [r3, #6]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d029      	beq.n	80074f8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	b25b      	sxtb	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	da11      	bge.n	80074d2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80074ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	88d2      	ldrh	r2, [r2, #6]
 80074c0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80074c2:	6939      	ldr	r1, [r7, #16]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	88db      	ldrh	r3, [r3, #6]
 80074c8:	461a      	mov	r2, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f001 f9d9 	bl	8008882 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80074d0:	e06b      	b.n	80075aa <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	785a      	ldrb	r2, [r3, #1]
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	88db      	ldrh	r3, [r3, #6]
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80074e8:	6939      	ldr	r1, [r7, #16]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	88db      	ldrh	r3, [r3, #6]
 80074ee:	461a      	mov	r2, r3
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f001 f9f4 	bl	80088de <USBD_CtlPrepareRx>
      break;
 80074f6:	e058      	b.n	80075aa <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	683a      	ldr	r2, [r7, #0]
 8007502:	7850      	ldrb	r0, [r2, #1]
 8007504:	2200      	movs	r2, #0
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	4798      	blx	r3
      break;
 800750a:	e04e      	b.n	80075aa <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	785b      	ldrb	r3, [r3, #1]
 8007510:	2b0b      	cmp	r3, #11
 8007512:	d02e      	beq.n	8007572 <USBD_CDC_Setup+0x104>
 8007514:	2b0b      	cmp	r3, #11
 8007516:	dc38      	bgt.n	800758a <USBD_CDC_Setup+0x11c>
 8007518:	2b00      	cmp	r3, #0
 800751a:	d002      	beq.n	8007522 <USBD_CDC_Setup+0xb4>
 800751c:	2b0a      	cmp	r3, #10
 800751e:	d014      	beq.n	800754a <USBD_CDC_Setup+0xdc>
 8007520:	e033      	b.n	800758a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007528:	2b03      	cmp	r3, #3
 800752a:	d107      	bne.n	800753c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800752c:	f107 030c 	add.w	r3, r7, #12
 8007530:	2202      	movs	r2, #2
 8007532:	4619      	mov	r1, r3
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f001 f9a4 	bl	8008882 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800753a:	e02e      	b.n	800759a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f001 f935 	bl	80087ae <USBD_CtlError>
            ret = USBD_FAIL;
 8007544:	2302      	movs	r3, #2
 8007546:	75fb      	strb	r3, [r7, #23]
          break;
 8007548:	e027      	b.n	800759a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007550:	2b03      	cmp	r3, #3
 8007552:	d107      	bne.n	8007564 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007554:	f107 030f 	add.w	r3, r7, #15
 8007558:	2201      	movs	r2, #1
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f001 f990 	bl	8008882 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007562:	e01a      	b.n	800759a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f001 f921 	bl	80087ae <USBD_CtlError>
            ret = USBD_FAIL;
 800756c:	2302      	movs	r3, #2
 800756e:	75fb      	strb	r3, [r7, #23]
          break;
 8007570:	e013      	b.n	800759a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007578:	2b03      	cmp	r3, #3
 800757a:	d00d      	beq.n	8007598 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f001 f915 	bl	80087ae <USBD_CtlError>
            ret = USBD_FAIL;
 8007584:	2302      	movs	r3, #2
 8007586:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007588:	e006      	b.n	8007598 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f001 f90e 	bl	80087ae <USBD_CtlError>
          ret = USBD_FAIL;
 8007592:	2302      	movs	r3, #2
 8007594:	75fb      	strb	r3, [r7, #23]
          break;
 8007596:	e000      	b.n	800759a <USBD_CDC_Setup+0x12c>
          break;
 8007598:	bf00      	nop
      }
      break;
 800759a:	e006      	b.n	80075aa <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800759c:	6839      	ldr	r1, [r7, #0]
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f001 f905 	bl	80087ae <USBD_CtlError>
      ret = USBD_FAIL;
 80075a4:	2302      	movs	r3, #2
 80075a6:	75fb      	strb	r3, [r7, #23]
      break;
 80075a8:	bf00      	nop
  }

  return ret;
 80075aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3718      	adds	r7, #24
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	460b      	mov	r3, r1
 80075be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075c6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075ce:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d03a      	beq.n	8007650 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80075da:	78fa      	ldrb	r2, [r7, #3]
 80075dc:	6879      	ldr	r1, [r7, #4]
 80075de:	4613      	mov	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4413      	add	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	440b      	add	r3, r1
 80075e8:	331c      	adds	r3, #28
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d029      	beq.n	8007644 <USBD_CDC_DataIn+0x90>
 80075f0:	78fa      	ldrb	r2, [r7, #3]
 80075f2:	6879      	ldr	r1, [r7, #4]
 80075f4:	4613      	mov	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	440b      	add	r3, r1
 80075fe:	331c      	adds	r3, #28
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	78f9      	ldrb	r1, [r7, #3]
 8007604:	68b8      	ldr	r0, [r7, #8]
 8007606:	460b      	mov	r3, r1
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	440b      	add	r3, r1
 800760c:	00db      	lsls	r3, r3, #3
 800760e:	4403      	add	r3, r0
 8007610:	3338      	adds	r3, #56	; 0x38
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	fbb2 f1f3 	udiv	r1, r2, r3
 8007618:	fb01 f303 	mul.w	r3, r1, r3
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d110      	bne.n	8007644 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007622:	78fa      	ldrb	r2, [r7, #3]
 8007624:	6879      	ldr	r1, [r7, #4]
 8007626:	4613      	mov	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	440b      	add	r3, r1
 8007630:	331c      	adds	r3, #28
 8007632:	2200      	movs	r2, #0
 8007634:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007636:	78f9      	ldrb	r1, [r7, #3]
 8007638:	2300      	movs	r3, #0
 800763a:	2200      	movs	r2, #0
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f001 fd8a 	bl	8009156 <USBD_LL_Transmit>
 8007642:	e003      	b.n	800764c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	e000      	b.n	8007652 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007650:	2302      	movs	r3, #2
  }
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b084      	sub	sp, #16
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	460b      	mov	r3, r1
 8007664:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800766c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800766e:	78fb      	ldrb	r3, [r7, #3]
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f001 fdb5 	bl	80091e2 <USBD_LL_GetRxDataSize>
 8007678:	4602      	mov	r2, r0
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00d      	beq.n	80076a6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800769e:	4611      	mov	r1, r2
 80076a0:	4798      	blx	r3

    return USBD_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	e000      	b.n	80076a8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80076a6:	2302      	movs	r3, #2
  }
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076be:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d015      	beq.n	80076f6 <USBD_CDC_EP0_RxReady+0x46>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80076d0:	2bff      	cmp	r3, #255	; 0xff
 80076d2:	d010      	beq.n	80076f6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80076e2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80076ea:	b292      	uxth	r2, r2
 80076ec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	22ff      	movs	r2, #255	; 0xff
 80076f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2243      	movs	r2, #67	; 0x43
 800770c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800770e:	4b03      	ldr	r3, [pc, #12]	; (800771c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007710:	4618      	mov	r0, r3
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	bc80      	pop	{r7}
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	20000094 	.word	0x20000094

08007720 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2243      	movs	r2, #67	; 0x43
 800772c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800772e:	4b03      	ldr	r3, [pc, #12]	; (800773c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007730:	4618      	mov	r0, r3
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	bc80      	pop	{r7}
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	20000050 	.word	0x20000050

08007740 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2243      	movs	r2, #67	; 0x43
 800774c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800774e:	4b03      	ldr	r3, [pc, #12]	; (800775c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007750:	4618      	mov	r0, r3
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	bc80      	pop	{r7}
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	200000d8 	.word	0x200000d8

08007760 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	220a      	movs	r2, #10
 800776c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800776e:	4b03      	ldr	r3, [pc, #12]	; (800777c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007770:	4618      	mov	r0, r3
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	bc80      	pop	{r7}
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	2000000c 	.word	0x2000000c

08007780 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800778a:	2302      	movs	r3, #2
 800778c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d005      	beq.n	80077a0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800779c:	2300      	movs	r3, #0
 800779e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bc80      	pop	{r7}
 80077aa:	4770      	bx	lr

080077ac <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b087      	sub	sp, #28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	4613      	mov	r3, r2
 80077b8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077c0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80077ca:	88fa      	ldrh	r2, [r7, #6]
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	371c      	adds	r7, #28
 80077d8:	46bd      	mov	sp, r7
 80077da:	bc80      	pop	{r7}
 80077dc:	4770      	bx	lr

080077de <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80077de:	b480      	push	{r7}
 80077e0:	b085      	sub	sp, #20
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ee:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	bc80      	pop	{r7}
 8007802:	4770      	bx	lr

08007804 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007812:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800781a:	2b00      	cmp	r3, #0
 800781c:	d017      	beq.n	800784e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	7c1b      	ldrb	r3, [r3, #16]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d109      	bne.n	800783a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800782c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007830:	2101      	movs	r1, #1
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f001 fcb2 	bl	800919c <USBD_LL_PrepareReceive>
 8007838:	e007      	b.n	800784a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007840:	2340      	movs	r3, #64	; 0x40
 8007842:	2101      	movs	r1, #1
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f001 fca9 	bl	800919c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	e000      	b.n	8007850 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800784e:	2302      	movs	r3, #2
  }
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	4613      	mov	r3, r2
 8007864:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d101      	bne.n	8007870 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800786c:	2302      	movs	r3, #2
 800786e:	e01a      	b.n	80078a6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d003      	beq.n	8007890 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	79fa      	ldrb	r2, [r7, #7]
 800789c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f001 fb16 	bl	8008ed0 <USBD_LL_Init>

  return USBD_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b085      	sub	sp, #20
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d006      	beq.n	80078d0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	683a      	ldr	r2, [r7, #0]
 80078c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	73fb      	strb	r3, [r7, #15]
 80078ce:	e001      	b.n	80078d4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80078d0:	2302      	movs	r3, #2
 80078d2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3714      	adds	r7, #20
 80078da:	46bd      	mov	sp, r7
 80078dc:	bc80      	pop	{r7}
 80078de:	4770      	bx	lr

080078e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f001 fb4b 	bl	8008f84 <USBD_LL_Start>

  return USBD_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	bc80      	pop	{r7}
 800790a:	4770      	bx	lr

0800790c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	460b      	mov	r3, r1
 8007916:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007918:	2302      	movs	r3, #2
 800791a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00c      	beq.n	8007940 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	78fa      	ldrb	r2, [r7, #3]
 8007930:	4611      	mov	r1, r2
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	4798      	blx	r3
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800793c:	2300      	movs	r3, #0
 800793e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007940:	7bfb      	ldrb	r3, [r7, #15]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b082      	sub	sp, #8
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	460b      	mov	r3, r1
 8007954:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	78fa      	ldrb	r2, [r7, #3]
 8007960:	4611      	mov	r1, r2
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	4798      	blx	r3

  return USBD_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007980:	6839      	ldr	r1, [r7, #0]
 8007982:	4618      	mov	r0, r3
 8007984:	f000 fed7 	bl	8008736 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007996:	461a      	mov	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80079a4:	f003 031f 	and.w	r3, r3, #31
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d016      	beq.n	80079da <USBD_LL_SetupStage+0x6a>
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d81c      	bhi.n	80079ea <USBD_LL_SetupStage+0x7a>
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <USBD_LL_SetupStage+0x4a>
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d008      	beq.n	80079ca <USBD_LL_SetupStage+0x5a>
 80079b8:	e017      	b.n	80079ea <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80079c0:	4619      	mov	r1, r3
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f9ca 	bl	8007d5c <USBD_StdDevReq>
      break;
 80079c8:	e01a      	b.n	8007a00 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fa2c 	bl	8007e30 <USBD_StdItfReq>
      break;
 80079d8:	e012      	b.n	8007a00 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80079e0:	4619      	mov	r1, r3
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fa6c 	bl	8007ec0 <USBD_StdEPReq>
      break;
 80079e8:	e00a      	b.n	8007a00 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80079f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f001 fb23 	bl	8009044 <USBD_LL_StallEP>
      break;
 80079fe:	bf00      	nop
  }

  return USBD_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b086      	sub	sp, #24
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	60f8      	str	r0, [r7, #12]
 8007a12:	460b      	mov	r3, r1
 8007a14:	607a      	str	r2, [r7, #4]
 8007a16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007a18:	7afb      	ldrb	r3, [r7, #11]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d14b      	bne.n	8007ab6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007a24:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a2c:	2b03      	cmp	r3, #3
 8007a2e:	d134      	bne.n	8007a9a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	68da      	ldr	r2, [r3, #12]
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d919      	bls.n	8007a70 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	68da      	ldr	r2, [r3, #12]
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	1ad2      	subs	r2, r2, r3
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	68da      	ldr	r2, [r3, #12]
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d203      	bcs.n	8007a5e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	e002      	b.n	8007a64 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	461a      	mov	r2, r3
 8007a66:	6879      	ldr	r1, [r7, #4]
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f000 ff56 	bl	800891a <USBD_CtlContinueRx>
 8007a6e:	e038      	b.n	8007ae2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00a      	beq.n	8007a92 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d105      	bne.n	8007a92 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f000 ff53 	bl	800893e <USBD_CtlSendStatus>
 8007a98:	e023      	b.n	8007ae2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007aa0:	2b05      	cmp	r3, #5
 8007aa2:	d11e      	bne.n	8007ae2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007aac:	2100      	movs	r1, #0
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f001 fac8 	bl	8009044 <USBD_LL_StallEP>
 8007ab4:	e015      	b.n	8007ae2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00d      	beq.n	8007ade <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007ac8:	2b03      	cmp	r3, #3
 8007aca:	d108      	bne.n	8007ade <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	7afa      	ldrb	r2, [r7, #11]
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	4798      	blx	r3
 8007adc:	e001      	b.n	8007ae2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007ade:	2302      	movs	r3, #2
 8007ae0:	e000      	b.n	8007ae4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	460b      	mov	r3, r1
 8007af6:	607a      	str	r2, [r7, #4]
 8007af8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007afa:	7afb      	ldrb	r3, [r7, #11]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d17f      	bne.n	8007c00 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3314      	adds	r3, #20
 8007b04:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d15c      	bne.n	8007bca <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	68da      	ldr	r2, [r3, #12]
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d915      	bls.n	8007b48 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	68da      	ldr	r2, [r3, #12]
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	1ad2      	subs	r2, r2, r3
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	461a      	mov	r2, r3
 8007b32:	6879      	ldr	r1, [r7, #4]
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 fec0 	bl	80088ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	2100      	movs	r1, #0
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f001 fb2b 	bl	800919c <USBD_LL_PrepareReceive>
 8007b46:	e04e      	b.n	8007be6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	6912      	ldr	r2, [r2, #16]
 8007b50:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b54:	fb01 f202 	mul.w	r2, r1, r2
 8007b58:	1a9b      	subs	r3, r3, r2
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d11c      	bne.n	8007b98 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	689a      	ldr	r2, [r3, #8]
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d316      	bcc.n	8007b98 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	689a      	ldr	r2, [r3, #8]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d20f      	bcs.n	8007b98 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b78:	2200      	movs	r2, #0
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 fe9c 	bl	80088ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	2100      	movs	r1, #0
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f001 fb03 	bl	800919c <USBD_LL_PrepareReceive>
 8007b96:	e026      	b.n	8007be6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00a      	beq.n	8007bba <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d105      	bne.n	8007bba <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007bba:	2180      	movs	r1, #128	; 0x80
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f001 fa41 	bl	8009044 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 fece 	bl	8008964 <USBD_CtlReceiveStatus>
 8007bc8:	e00d      	b.n	8007be6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007bd0:	2b04      	cmp	r3, #4
 8007bd2:	d004      	beq.n	8007bde <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d103      	bne.n	8007be6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007bde:	2180      	movs	r1, #128	; 0x80
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f001 fa2f 	bl	8009044 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d11d      	bne.n	8007c2c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f7ff fe81 	bl	80078f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007bfe:	e015      	b.n	8007c2c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00d      	beq.n	8007c28 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007c12:	2b03      	cmp	r3, #3
 8007c14:	d108      	bne.n	8007c28 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	7afa      	ldrb	r2, [r7, #11]
 8007c20:	4611      	mov	r1, r2
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	4798      	blx	r3
 8007c26:	e001      	b.n	8007c2c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007c28:	2302      	movs	r3, #2
 8007c2a:	e000      	b.n	8007c2e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3718      	adds	r7, #24
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b082      	sub	sp, #8
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c3e:	2340      	movs	r3, #64	; 0x40
 8007c40:	2200      	movs	r2, #0
 8007c42:	2100      	movs	r1, #0
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f001 f9b8 	bl	8008fba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2240      	movs	r2, #64	; 0x40
 8007c56:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c5a:	2340      	movs	r3, #64	; 0x40
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	2180      	movs	r1, #128	; 0x80
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f001 f9aa 	bl	8008fba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2240      	movs	r2, #64	; 0x40
 8007c70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d009      	beq.n	8007cae <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	6852      	ldr	r2, [r2, #4]
 8007ca6:	b2d2      	uxtb	r2, r2
 8007ca8:	4611      	mov	r1, r2
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	4798      	blx	r3
  }

  return USBD_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	78fa      	ldrb	r2, [r7, #3]
 8007cc8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bc80      	pop	{r7}
 8007cd4:	4770      	bx	lr

08007cd6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b083      	sub	sp, #12
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2204      	movs	r2, #4
 8007cee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bc80      	pop	{r7}
 8007cfc:	4770      	bx	lr

08007cfe <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b083      	sub	sp, #12
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d0c:	2b04      	cmp	r3, #4
 8007d0e:	d105      	bne.n	8007d1c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bc80      	pop	{r7}
 8007d26:	4770      	bx	lr

08007d28 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	d10b      	bne.n	8007d52 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d40:	69db      	ldr	r3, [r3, #28]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d005      	beq.n	8007d52 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d4c:	69db      	ldr	r3, [r3, #28]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d72:	2b40      	cmp	r3, #64	; 0x40
 8007d74:	d005      	beq.n	8007d82 <USBD_StdDevReq+0x26>
 8007d76:	2b40      	cmp	r3, #64	; 0x40
 8007d78:	d84f      	bhi.n	8007e1a <USBD_StdDevReq+0xbe>
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d009      	beq.n	8007d92 <USBD_StdDevReq+0x36>
 8007d7e:	2b20      	cmp	r3, #32
 8007d80:	d14b      	bne.n	8007e1a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	4798      	blx	r3
      break;
 8007d90:	e048      	b.n	8007e24 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	785b      	ldrb	r3, [r3, #1]
 8007d96:	2b09      	cmp	r3, #9
 8007d98:	d839      	bhi.n	8007e0e <USBD_StdDevReq+0xb2>
 8007d9a:	a201      	add	r2, pc, #4	; (adr r2, 8007da0 <USBD_StdDevReq+0x44>)
 8007d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da0:	08007df1 	.word	0x08007df1
 8007da4:	08007e05 	.word	0x08007e05
 8007da8:	08007e0f 	.word	0x08007e0f
 8007dac:	08007dfb 	.word	0x08007dfb
 8007db0:	08007e0f 	.word	0x08007e0f
 8007db4:	08007dd3 	.word	0x08007dd3
 8007db8:	08007dc9 	.word	0x08007dc9
 8007dbc:	08007e0f 	.word	0x08007e0f
 8007dc0:	08007de7 	.word	0x08007de7
 8007dc4:	08007ddd 	.word	0x08007ddd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007dc8:	6839      	ldr	r1, [r7, #0]
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f9dc 	bl	8008188 <USBD_GetDescriptor>
          break;
 8007dd0:	e022      	b.n	8007e18 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007dd2:	6839      	ldr	r1, [r7, #0]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fb3f 	bl	8008458 <USBD_SetAddress>
          break;
 8007dda:	e01d      	b.n	8007e18 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007ddc:	6839      	ldr	r1, [r7, #0]
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 fb7e 	bl	80084e0 <USBD_SetConfig>
          break;
 8007de4:	e018      	b.n	8007e18 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fc07 	bl	80085fc <USBD_GetConfig>
          break;
 8007dee:	e013      	b.n	8007e18 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fc37 	bl	8008666 <USBD_GetStatus>
          break;
 8007df8:	e00e      	b.n	8007e18 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007dfa:	6839      	ldr	r1, [r7, #0]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fc65 	bl	80086cc <USBD_SetFeature>
          break;
 8007e02:	e009      	b.n	8007e18 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fc74 	bl	80086f4 <USBD_ClrFeature>
          break;
 8007e0c:	e004      	b.n	8007e18 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007e0e:	6839      	ldr	r1, [r7, #0]
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 fccc 	bl	80087ae <USBD_CtlError>
          break;
 8007e16:	bf00      	nop
      }
      break;
 8007e18:	e004      	b.n	8007e24 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fcc6 	bl	80087ae <USBD_CtlError>
      break;
 8007e22:	bf00      	nop
  }

  return ret;
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop

08007e30 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e46:	2b40      	cmp	r3, #64	; 0x40
 8007e48:	d005      	beq.n	8007e56 <USBD_StdItfReq+0x26>
 8007e4a:	2b40      	cmp	r3, #64	; 0x40
 8007e4c:	d82e      	bhi.n	8007eac <USBD_StdItfReq+0x7c>
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <USBD_StdItfReq+0x26>
 8007e52:	2b20      	cmp	r3, #32
 8007e54:	d12a      	bne.n	8007eac <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d81d      	bhi.n	8007e9e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	889b      	ldrh	r3, [r3, #4]
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d813      	bhi.n	8007e94 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	4798      	blx	r3
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	88db      	ldrh	r3, [r3, #6]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d110      	bne.n	8007ea8 <USBD_StdItfReq+0x78>
 8007e86:	7bfb      	ldrb	r3, [r7, #15]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d10d      	bne.n	8007ea8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fd56 	bl	800893e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e92:	e009      	b.n	8007ea8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007e94:	6839      	ldr	r1, [r7, #0]
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fc89 	bl	80087ae <USBD_CtlError>
          break;
 8007e9c:	e004      	b.n	8007ea8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007e9e:	6839      	ldr	r1, [r7, #0]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fc84 	bl	80087ae <USBD_CtlError>
          break;
 8007ea6:	e000      	b.n	8007eaa <USBD_StdItfReq+0x7a>
          break;
 8007ea8:	bf00      	nop
      }
      break;
 8007eaa:	e004      	b.n	8007eb6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fc7d 	bl	80087ae <USBD_CtlError>
      break;
 8007eb4:	bf00      	nop
  }

  return USBD_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	889b      	ldrh	r3, [r3, #4]
 8007ed2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007edc:	2b40      	cmp	r3, #64	; 0x40
 8007ede:	d007      	beq.n	8007ef0 <USBD_StdEPReq+0x30>
 8007ee0:	2b40      	cmp	r3, #64	; 0x40
 8007ee2:	f200 8146 	bhi.w	8008172 <USBD_StdEPReq+0x2b2>
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00a      	beq.n	8007f00 <USBD_StdEPReq+0x40>
 8007eea:	2b20      	cmp	r3, #32
 8007eec:	f040 8141 	bne.w	8008172 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	4798      	blx	r3
      break;
 8007efe:	e13d      	b.n	800817c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f08:	2b20      	cmp	r3, #32
 8007f0a:	d10a      	bne.n	8007f22 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	6839      	ldr	r1, [r7, #0]
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	4798      	blx	r3
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	e12d      	b.n	800817e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	785b      	ldrb	r3, [r3, #1]
 8007f26:	2b03      	cmp	r3, #3
 8007f28:	d007      	beq.n	8007f3a <USBD_StdEPReq+0x7a>
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	f300 811b 	bgt.w	8008166 <USBD_StdEPReq+0x2a6>
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d072      	beq.n	800801a <USBD_StdEPReq+0x15a>
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d03a      	beq.n	8007fae <USBD_StdEPReq+0xee>
 8007f38:	e115      	b.n	8008166 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d002      	beq.n	8007f4a <USBD_StdEPReq+0x8a>
 8007f44:	2b03      	cmp	r3, #3
 8007f46:	d015      	beq.n	8007f74 <USBD_StdEPReq+0xb4>
 8007f48:	e02b      	b.n	8007fa2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f4a:	7bbb      	ldrb	r3, [r7, #14]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00c      	beq.n	8007f6a <USBD_StdEPReq+0xaa>
 8007f50:	7bbb      	ldrb	r3, [r7, #14]
 8007f52:	2b80      	cmp	r3, #128	; 0x80
 8007f54:	d009      	beq.n	8007f6a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007f56:	7bbb      	ldrb	r3, [r7, #14]
 8007f58:	4619      	mov	r1, r3
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f001 f872 	bl	8009044 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007f60:	2180      	movs	r1, #128	; 0x80
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f001 f86e 	bl	8009044 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f68:	e020      	b.n	8007fac <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fc1e 	bl	80087ae <USBD_CtlError>
              break;
 8007f72:	e01b      	b.n	8007fac <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	885b      	ldrh	r3, [r3, #2]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10e      	bne.n	8007f9a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00b      	beq.n	8007f9a <USBD_StdEPReq+0xda>
 8007f82:	7bbb      	ldrb	r3, [r7, #14]
 8007f84:	2b80      	cmp	r3, #128	; 0x80
 8007f86:	d008      	beq.n	8007f9a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	88db      	ldrh	r3, [r3, #6]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d104      	bne.n	8007f9a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f001 f855 	bl	8009044 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fccf 	bl	800893e <USBD_CtlSendStatus>

              break;
 8007fa0:	e004      	b.n	8007fac <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fc02 	bl	80087ae <USBD_CtlError>
              break;
 8007faa:	bf00      	nop
          }
          break;
 8007fac:	e0e0      	b.n	8008170 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d002      	beq.n	8007fbe <USBD_StdEPReq+0xfe>
 8007fb8:	2b03      	cmp	r3, #3
 8007fba:	d015      	beq.n	8007fe8 <USBD_StdEPReq+0x128>
 8007fbc:	e026      	b.n	800800c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00c      	beq.n	8007fde <USBD_StdEPReq+0x11e>
 8007fc4:	7bbb      	ldrb	r3, [r7, #14]
 8007fc6:	2b80      	cmp	r3, #128	; 0x80
 8007fc8:	d009      	beq.n	8007fde <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007fca:	7bbb      	ldrb	r3, [r7, #14]
 8007fcc:	4619      	mov	r1, r3
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f001 f838 	bl	8009044 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007fd4:	2180      	movs	r1, #128	; 0x80
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f001 f834 	bl	8009044 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fdc:	e01c      	b.n	8008018 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fbe4 	bl	80087ae <USBD_CtlError>
              break;
 8007fe6:	e017      	b.n	8008018 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	885b      	ldrh	r3, [r3, #2]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d112      	bne.n	8008016 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ff0:	7bbb      	ldrb	r3, [r7, #14]
 8007ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d004      	beq.n	8008004 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f001 f83f 	bl	8009082 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fc9a 	bl	800893e <USBD_CtlSendStatus>
              }
              break;
 800800a:	e004      	b.n	8008016 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fbcd 	bl	80087ae <USBD_CtlError>
              break;
 8008014:	e000      	b.n	8008018 <USBD_StdEPReq+0x158>
              break;
 8008016:	bf00      	nop
          }
          break;
 8008018:	e0aa      	b.n	8008170 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008020:	2b02      	cmp	r3, #2
 8008022:	d002      	beq.n	800802a <USBD_StdEPReq+0x16a>
 8008024:	2b03      	cmp	r3, #3
 8008026:	d032      	beq.n	800808e <USBD_StdEPReq+0x1ce>
 8008028:	e097      	b.n	800815a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800802a:	7bbb      	ldrb	r3, [r7, #14]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d007      	beq.n	8008040 <USBD_StdEPReq+0x180>
 8008030:	7bbb      	ldrb	r3, [r7, #14]
 8008032:	2b80      	cmp	r3, #128	; 0x80
 8008034:	d004      	beq.n	8008040 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008036:	6839      	ldr	r1, [r7, #0]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fbb8 	bl	80087ae <USBD_CtlError>
                break;
 800803e:	e091      	b.n	8008164 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008040:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008044:	2b00      	cmp	r3, #0
 8008046:	da0b      	bge.n	8008060 <USBD_StdEPReq+0x1a0>
 8008048:	7bbb      	ldrb	r3, [r7, #14]
 800804a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800804e:	4613      	mov	r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4413      	add	r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	3310      	adds	r3, #16
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	4413      	add	r3, r2
 800805c:	3304      	adds	r3, #4
 800805e:	e00b      	b.n	8008078 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008060:	7bbb      	ldrb	r3, [r7, #14]
 8008062:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008066:	4613      	mov	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	4413      	add	r3, r2
 8008076:	3304      	adds	r3, #4
 8008078:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	2200      	movs	r2, #0
 800807e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2202      	movs	r2, #2
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fbfb 	bl	8008882 <USBD_CtlSendData>
              break;
 800808c:	e06a      	b.n	8008164 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800808e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008092:	2b00      	cmp	r3, #0
 8008094:	da11      	bge.n	80080ba <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008096:	7bbb      	ldrb	r3, [r7, #14]
 8008098:	f003 020f 	and.w	r2, r3, #15
 800809c:	6879      	ldr	r1, [r7, #4]
 800809e:	4613      	mov	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4413      	add	r3, r2
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	440b      	add	r3, r1
 80080a8:	3318      	adds	r3, #24
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d117      	bne.n	80080e0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fb7b 	bl	80087ae <USBD_CtlError>
                  break;
 80080b8:	e054      	b.n	8008164 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80080ba:	7bbb      	ldrb	r3, [r7, #14]
 80080bc:	f003 020f 	and.w	r2, r3, #15
 80080c0:	6879      	ldr	r1, [r7, #4]
 80080c2:	4613      	mov	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4413      	add	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	440b      	add	r3, r1
 80080cc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d104      	bne.n	80080e0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80080d6:	6839      	ldr	r1, [r7, #0]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fb68 	bl	80087ae <USBD_CtlError>
                  break;
 80080de:	e041      	b.n	8008164 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	da0b      	bge.n	8008100 <USBD_StdEPReq+0x240>
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
 80080ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080ee:	4613      	mov	r3, r2
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	4413      	add	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	3310      	adds	r3, #16
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	4413      	add	r3, r2
 80080fc:	3304      	adds	r3, #4
 80080fe:	e00b      	b.n	8008118 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008100:	7bbb      	ldrb	r3, [r7, #14]
 8008102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008106:	4613      	mov	r3, r2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	4413      	add	r3, r2
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	4413      	add	r3, r2
 8008116:	3304      	adds	r3, #4
 8008118:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800811a:	7bbb      	ldrb	r3, [r7, #14]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d002      	beq.n	8008126 <USBD_StdEPReq+0x266>
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	2b80      	cmp	r3, #128	; 0x80
 8008124:	d103      	bne.n	800812e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	2200      	movs	r2, #0
 800812a:	601a      	str	r2, [r3, #0]
 800812c:	e00e      	b.n	800814c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800812e:	7bbb      	ldrb	r3, [r7, #14]
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 ffc4 	bl	80090c0 <USBD_LL_IsStallEP>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d003      	beq.n	8008146 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	2201      	movs	r2, #1
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	e002      	b.n	800814c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	2200      	movs	r2, #0
 800814a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2202      	movs	r2, #2
 8008150:	4619      	mov	r1, r3
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fb95 	bl	8008882 <USBD_CtlSendData>
              break;
 8008158:	e004      	b.n	8008164 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800815a:	6839      	ldr	r1, [r7, #0]
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fb26 	bl	80087ae <USBD_CtlError>
              break;
 8008162:	bf00      	nop
          }
          break;
 8008164:	e004      	b.n	8008170 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fb20 	bl	80087ae <USBD_CtlError>
          break;
 800816e:	bf00      	nop
      }
      break;
 8008170:	e004      	b.n	800817c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fb1a 	bl	80087ae <USBD_CtlError>
      break;
 800817a:	bf00      	nop
  }

  return ret;
 800817c:	7bfb      	ldrb	r3, [r7, #15]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
	...

08008188 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008192:	2300      	movs	r3, #0
 8008194:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008196:	2300      	movs	r3, #0
 8008198:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800819a:	2300      	movs	r3, #0
 800819c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	885b      	ldrh	r3, [r3, #2]
 80081a2:	0a1b      	lsrs	r3, r3, #8
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	3b01      	subs	r3, #1
 80081a8:	2b06      	cmp	r3, #6
 80081aa:	f200 8128 	bhi.w	80083fe <USBD_GetDescriptor+0x276>
 80081ae:	a201      	add	r2, pc, #4	; (adr r2, 80081b4 <USBD_GetDescriptor+0x2c>)
 80081b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b4:	080081d1 	.word	0x080081d1
 80081b8:	080081e9 	.word	0x080081e9
 80081bc:	08008229 	.word	0x08008229
 80081c0:	080083ff 	.word	0x080083ff
 80081c4:	080083ff 	.word	0x080083ff
 80081c8:	0800839f 	.word	0x0800839f
 80081cc:	080083cb 	.word	0x080083cb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	7c12      	ldrb	r2, [r2, #16]
 80081dc:	f107 0108 	add.w	r1, r7, #8
 80081e0:	4610      	mov	r0, r2
 80081e2:	4798      	blx	r3
 80081e4:	60f8      	str	r0, [r7, #12]
      break;
 80081e6:	e112      	b.n	800840e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	7c1b      	ldrb	r3, [r3, #16]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10d      	bne.n	800820c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f8:	f107 0208 	add.w	r2, r7, #8
 80081fc:	4610      	mov	r0, r2
 80081fe:	4798      	blx	r3
 8008200:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3301      	adds	r3, #1
 8008206:	2202      	movs	r2, #2
 8008208:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800820a:	e100      	b.n	800840e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008214:	f107 0208 	add.w	r2, r7, #8
 8008218:	4610      	mov	r0, r2
 800821a:	4798      	blx	r3
 800821c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	3301      	adds	r3, #1
 8008222:	2202      	movs	r2, #2
 8008224:	701a      	strb	r2, [r3, #0]
      break;
 8008226:	e0f2      	b.n	800840e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	885b      	ldrh	r3, [r3, #2]
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b05      	cmp	r3, #5
 8008230:	f200 80ac 	bhi.w	800838c <USBD_GetDescriptor+0x204>
 8008234:	a201      	add	r2, pc, #4	; (adr r2, 800823c <USBD_GetDescriptor+0xb4>)
 8008236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823a:	bf00      	nop
 800823c:	08008255 	.word	0x08008255
 8008240:	08008289 	.word	0x08008289
 8008244:	080082bd 	.word	0x080082bd
 8008248:	080082f1 	.word	0x080082f1
 800824c:	08008325 	.word	0x08008325
 8008250:	08008359 	.word	0x08008359
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00b      	beq.n	8008278 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	7c12      	ldrb	r2, [r2, #16]
 800826c:	f107 0108 	add.w	r1, r7, #8
 8008270:	4610      	mov	r0, r2
 8008272:	4798      	blx	r3
 8008274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008276:	e091      	b.n	800839c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fa97 	bl	80087ae <USBD_CtlError>
            err++;
 8008280:	7afb      	ldrb	r3, [r7, #11]
 8008282:	3301      	adds	r3, #1
 8008284:	72fb      	strb	r3, [r7, #11]
          break;
 8008286:	e089      	b.n	800839c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00b      	beq.n	80082ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	7c12      	ldrb	r2, [r2, #16]
 80082a0:	f107 0108 	add.w	r1, r7, #8
 80082a4:	4610      	mov	r0, r2
 80082a6:	4798      	blx	r3
 80082a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082aa:	e077      	b.n	800839c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082ac:	6839      	ldr	r1, [r7, #0]
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fa7d 	bl	80087ae <USBD_CtlError>
            err++;
 80082b4:	7afb      	ldrb	r3, [r7, #11]
 80082b6:	3301      	adds	r3, #1
 80082b8:	72fb      	strb	r3, [r7, #11]
          break;
 80082ba:	e06f      	b.n	800839c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00b      	beq.n	80082e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	7c12      	ldrb	r2, [r2, #16]
 80082d4:	f107 0108 	add.w	r1, r7, #8
 80082d8:	4610      	mov	r0, r2
 80082da:	4798      	blx	r3
 80082dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082de:	e05d      	b.n	800839c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082e0:	6839      	ldr	r1, [r7, #0]
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fa63 	bl	80087ae <USBD_CtlError>
            err++;
 80082e8:	7afb      	ldrb	r3, [r7, #11]
 80082ea:	3301      	adds	r3, #1
 80082ec:	72fb      	strb	r3, [r7, #11]
          break;
 80082ee:	e055      	b.n	800839c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00b      	beq.n	8008314 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	7c12      	ldrb	r2, [r2, #16]
 8008308:	f107 0108 	add.w	r1, r7, #8
 800830c:	4610      	mov	r0, r2
 800830e:	4798      	blx	r3
 8008310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008312:	e043      	b.n	800839c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fa49 	bl	80087ae <USBD_CtlError>
            err++;
 800831c:	7afb      	ldrb	r3, [r7, #11]
 800831e:	3301      	adds	r3, #1
 8008320:	72fb      	strb	r3, [r7, #11]
          break;
 8008322:	e03b      	b.n	800839c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800832a:	695b      	ldr	r3, [r3, #20]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00b      	beq.n	8008348 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008336:	695b      	ldr	r3, [r3, #20]
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	7c12      	ldrb	r2, [r2, #16]
 800833c:	f107 0108 	add.w	r1, r7, #8
 8008340:	4610      	mov	r0, r2
 8008342:	4798      	blx	r3
 8008344:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008346:	e029      	b.n	800839c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008348:	6839      	ldr	r1, [r7, #0]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fa2f 	bl	80087ae <USBD_CtlError>
            err++;
 8008350:	7afb      	ldrb	r3, [r7, #11]
 8008352:	3301      	adds	r3, #1
 8008354:	72fb      	strb	r3, [r7, #11]
          break;
 8008356:	e021      	b.n	800839c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00b      	beq.n	800837c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800836a:	699b      	ldr	r3, [r3, #24]
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	7c12      	ldrb	r2, [r2, #16]
 8008370:	f107 0108 	add.w	r1, r7, #8
 8008374:	4610      	mov	r0, r2
 8008376:	4798      	blx	r3
 8008378:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800837a:	e00f      	b.n	800839c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800837c:	6839      	ldr	r1, [r7, #0]
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fa15 	bl	80087ae <USBD_CtlError>
            err++;
 8008384:	7afb      	ldrb	r3, [r7, #11]
 8008386:	3301      	adds	r3, #1
 8008388:	72fb      	strb	r3, [r7, #11]
          break;
 800838a:	e007      	b.n	800839c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800838c:	6839      	ldr	r1, [r7, #0]
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fa0d 	bl	80087ae <USBD_CtlError>
          err++;
 8008394:	7afb      	ldrb	r3, [r7, #11]
 8008396:	3301      	adds	r3, #1
 8008398:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800839a:	e038      	b.n	800840e <USBD_GetDescriptor+0x286>
 800839c:	e037      	b.n	800840e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	7c1b      	ldrb	r3, [r3, #16]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d109      	bne.n	80083ba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ae:	f107 0208 	add.w	r2, r7, #8
 80083b2:	4610      	mov	r0, r2
 80083b4:	4798      	blx	r3
 80083b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083b8:	e029      	b.n	800840e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083ba:	6839      	ldr	r1, [r7, #0]
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f9f6 	bl	80087ae <USBD_CtlError>
        err++;
 80083c2:	7afb      	ldrb	r3, [r7, #11]
 80083c4:	3301      	adds	r3, #1
 80083c6:	72fb      	strb	r3, [r7, #11]
      break;
 80083c8:	e021      	b.n	800840e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	7c1b      	ldrb	r3, [r3, #16]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d10d      	bne.n	80083ee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083da:	f107 0208 	add.w	r2, r7, #8
 80083de:	4610      	mov	r0, r2
 80083e0:	4798      	blx	r3
 80083e2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	3301      	adds	r3, #1
 80083e8:	2207      	movs	r2, #7
 80083ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083ec:	e00f      	b.n	800840e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083ee:	6839      	ldr	r1, [r7, #0]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f9dc 	bl	80087ae <USBD_CtlError>
        err++;
 80083f6:	7afb      	ldrb	r3, [r7, #11]
 80083f8:	3301      	adds	r3, #1
 80083fa:	72fb      	strb	r3, [r7, #11]
      break;
 80083fc:	e007      	b.n	800840e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80083fe:	6839      	ldr	r1, [r7, #0]
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f9d4 	bl	80087ae <USBD_CtlError>
      err++;
 8008406:	7afb      	ldrb	r3, [r7, #11]
 8008408:	3301      	adds	r3, #1
 800840a:	72fb      	strb	r3, [r7, #11]
      break;
 800840c:	bf00      	nop
  }

  if (err != 0U)
 800840e:	7afb      	ldrb	r3, [r7, #11]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d11c      	bne.n	800844e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008414:	893b      	ldrh	r3, [r7, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d011      	beq.n	800843e <USBD_GetDescriptor+0x2b6>
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	88db      	ldrh	r3, [r3, #6]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00d      	beq.n	800843e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	88da      	ldrh	r2, [r3, #6]
 8008426:	893b      	ldrh	r3, [r7, #8]
 8008428:	4293      	cmp	r3, r2
 800842a:	bf28      	it	cs
 800842c:	4613      	movcs	r3, r2
 800842e:	b29b      	uxth	r3, r3
 8008430:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008432:	893b      	ldrh	r3, [r7, #8]
 8008434:	461a      	mov	r2, r3
 8008436:	68f9      	ldr	r1, [r7, #12]
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fa22 	bl	8008882 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	88db      	ldrh	r3, [r3, #6]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d104      	bne.n	8008450 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fa79 	bl	800893e <USBD_CtlSendStatus>
 800844c:	e000      	b.n	8008450 <USBD_GetDescriptor+0x2c8>
    return;
 800844e:	bf00      	nop
    }
  }
}
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop

08008458 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	889b      	ldrh	r3, [r3, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d130      	bne.n	80084cc <USBD_SetAddress+0x74>
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	88db      	ldrh	r3, [r3, #6]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d12c      	bne.n	80084cc <USBD_SetAddress+0x74>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	885b      	ldrh	r3, [r3, #2]
 8008476:	2b7f      	cmp	r3, #127	; 0x7f
 8008478:	d828      	bhi.n	80084cc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	885b      	ldrh	r3, [r3, #2]
 800847e:	b2db      	uxtb	r3, r3
 8008480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008484:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800848c:	2b03      	cmp	r3, #3
 800848e:	d104      	bne.n	800849a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 f98b 	bl	80087ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008498:	e01d      	b.n	80084d6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	7bfa      	ldrb	r2, [r7, #15]
 800849e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	4619      	mov	r1, r3
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fe36 	bl	8009118 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fa46 	bl	800893e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d004      	beq.n	80084c2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2202      	movs	r2, #2
 80084bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084c0:	e009      	b.n	80084d6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ca:	e004      	b.n	80084d6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f96d 	bl	80087ae <USBD_CtlError>
  }
}
 80084d4:	bf00      	nop
 80084d6:	bf00      	nop
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	885b      	ldrh	r3, [r3, #2]
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	4b41      	ldr	r3, [pc, #260]	; (80085f8 <USBD_SetConfig+0x118>)
 80084f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084f4:	4b40      	ldr	r3, [pc, #256]	; (80085f8 <USBD_SetConfig+0x118>)
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d904      	bls.n	8008506 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80084fc:	6839      	ldr	r1, [r7, #0]
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f955 	bl	80087ae <USBD_CtlError>
 8008504:	e075      	b.n	80085f2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800850c:	2b02      	cmp	r3, #2
 800850e:	d002      	beq.n	8008516 <USBD_SetConfig+0x36>
 8008510:	2b03      	cmp	r3, #3
 8008512:	d023      	beq.n	800855c <USBD_SetConfig+0x7c>
 8008514:	e062      	b.n	80085dc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008516:	4b38      	ldr	r3, [pc, #224]	; (80085f8 <USBD_SetConfig+0x118>)
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d01a      	beq.n	8008554 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800851e:	4b36      	ldr	r3, [pc, #216]	; (80085f8 <USBD_SetConfig+0x118>)
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	461a      	mov	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2203      	movs	r2, #3
 800852c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008530:	4b31      	ldr	r3, [pc, #196]	; (80085f8 <USBD_SetConfig+0x118>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7ff f9e8 	bl	800790c <USBD_SetClassConfig>
 800853c:	4603      	mov	r3, r0
 800853e:	2b02      	cmp	r3, #2
 8008540:	d104      	bne.n	800854c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008542:	6839      	ldr	r1, [r7, #0]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f932 	bl	80087ae <USBD_CtlError>
            return;
 800854a:	e052      	b.n	80085f2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f9f6 	bl	800893e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008552:	e04e      	b.n	80085f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f9f2 	bl	800893e <USBD_CtlSendStatus>
        break;
 800855a:	e04a      	b.n	80085f2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800855c:	4b26      	ldr	r3, [pc, #152]	; (80085f8 <USBD_SetConfig+0x118>)
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d112      	bne.n	800858a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2202      	movs	r2, #2
 8008568:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800856c:	4b22      	ldr	r3, [pc, #136]	; (80085f8 <USBD_SetConfig+0x118>)
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	461a      	mov	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008576:	4b20      	ldr	r3, [pc, #128]	; (80085f8 <USBD_SetConfig+0x118>)
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7ff f9e4 	bl	800794a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f9db 	bl	800893e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008588:	e033      	b.n	80085f2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800858a:	4b1b      	ldr	r3, [pc, #108]	; (80085f8 <USBD_SetConfig+0x118>)
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	461a      	mov	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	429a      	cmp	r2, r3
 8008596:	d01d      	beq.n	80085d4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	b2db      	uxtb	r3, r3
 800859e:	4619      	mov	r1, r3
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f7ff f9d2 	bl	800794a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80085a6:	4b14      	ldr	r3, [pc, #80]	; (80085f8 <USBD_SetConfig+0x118>)
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	461a      	mov	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80085b0:	4b11      	ldr	r3, [pc, #68]	; (80085f8 <USBD_SetConfig+0x118>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	4619      	mov	r1, r3
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f7ff f9a8 	bl	800790c <USBD_SetClassConfig>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d104      	bne.n	80085cc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f8f2 	bl	80087ae <USBD_CtlError>
            return;
 80085ca:	e012      	b.n	80085f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f9b6 	bl	800893e <USBD_CtlSendStatus>
        break;
 80085d2:	e00e      	b.n	80085f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f9b2 	bl	800893e <USBD_CtlSendStatus>
        break;
 80085da:	e00a      	b.n	80085f2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f8e5 	bl	80087ae <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80085e4:	4b04      	ldr	r3, [pc, #16]	; (80085f8 <USBD_SetConfig+0x118>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	4619      	mov	r1, r3
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7ff f9ad 	bl	800794a <USBD_ClrClassConfig>
        break;
 80085f0:	bf00      	nop
    }
  }
}
 80085f2:	3708      	adds	r7, #8
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	2000034c 	.word	0x2000034c

080085fc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	88db      	ldrh	r3, [r3, #6]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d004      	beq.n	8008618 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f8cc 	bl	80087ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008616:	e022      	b.n	800865e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800861e:	2b02      	cmp	r3, #2
 8008620:	dc02      	bgt.n	8008628 <USBD_GetConfig+0x2c>
 8008622:	2b00      	cmp	r3, #0
 8008624:	dc03      	bgt.n	800862e <USBD_GetConfig+0x32>
 8008626:	e015      	b.n	8008654 <USBD_GetConfig+0x58>
 8008628:	2b03      	cmp	r3, #3
 800862a:	d00b      	beq.n	8008644 <USBD_GetConfig+0x48>
 800862c:	e012      	b.n	8008654 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	3308      	adds	r3, #8
 8008638:	2201      	movs	r2, #1
 800863a:	4619      	mov	r1, r3
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f920 	bl	8008882 <USBD_CtlSendData>
        break;
 8008642:	e00c      	b.n	800865e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	3304      	adds	r3, #4
 8008648:	2201      	movs	r2, #1
 800864a:	4619      	mov	r1, r3
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f918 	bl	8008882 <USBD_CtlSendData>
        break;
 8008652:	e004      	b.n	800865e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f8a9 	bl	80087ae <USBD_CtlError>
        break;
 800865c:	bf00      	nop
}
 800865e:	bf00      	nop
 8008660:	3708      	adds	r7, #8
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b082      	sub	sp, #8
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
 800866e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008676:	3b01      	subs	r3, #1
 8008678:	2b02      	cmp	r3, #2
 800867a:	d81e      	bhi.n	80086ba <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	88db      	ldrh	r3, [r3, #6]
 8008680:	2b02      	cmp	r3, #2
 8008682:	d004      	beq.n	800868e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008684:	6839      	ldr	r1, [r7, #0]
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f891 	bl	80087ae <USBD_CtlError>
        break;
 800868c:	e01a      	b.n	80086c4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800869a:	2b00      	cmp	r3, #0
 800869c:	d005      	beq.n	80086aa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	f043 0202 	orr.w	r2, r3, #2
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	330c      	adds	r3, #12
 80086ae:	2202      	movs	r2, #2
 80086b0:	4619      	mov	r1, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f8e5 	bl	8008882 <USBD_CtlSendData>
      break;
 80086b8:	e004      	b.n	80086c4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f876 	bl	80087ae <USBD_CtlError>
      break;
 80086c2:	bf00      	nop
  }
}
 80086c4:	bf00      	nop
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	885b      	ldrh	r3, [r3, #2]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d106      	bne.n	80086ec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2201      	movs	r2, #1
 80086e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f929 	bl	800893e <USBD_CtlSendStatus>
  }
}
 80086ec:	bf00      	nop
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008704:	3b01      	subs	r3, #1
 8008706:	2b02      	cmp	r3, #2
 8008708:	d80b      	bhi.n	8008722 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	885b      	ldrh	r3, [r3, #2]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d10c      	bne.n	800872c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f90f 	bl	800893e <USBD_CtlSendStatus>
      }
      break;
 8008720:	e004      	b.n	800872c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008722:	6839      	ldr	r1, [r7, #0]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 f842 	bl	80087ae <USBD_CtlError>
      break;
 800872a:	e000      	b.n	800872e <USBD_ClrFeature+0x3a>
      break;
 800872c:	bf00      	nop
  }
}
 800872e:	bf00      	nop
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008736:	b480      	push	{r7}
 8008738:	b083      	sub	sp, #12
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	781a      	ldrb	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	785a      	ldrb	r2, [r3, #1]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	3302      	adds	r3, #2
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	b29a      	uxth	r2, r3
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	3303      	adds	r3, #3
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	b29b      	uxth	r3, r3
 8008760:	021b      	lsls	r3, r3, #8
 8008762:	b29b      	uxth	r3, r3
 8008764:	4413      	add	r3, r2
 8008766:	b29a      	uxth	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	3304      	adds	r3, #4
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	b29a      	uxth	r2, r3
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	3305      	adds	r3, #5
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	b29b      	uxth	r3, r3
 800877c:	021b      	lsls	r3, r3, #8
 800877e:	b29b      	uxth	r3, r3
 8008780:	4413      	add	r3, r2
 8008782:	b29a      	uxth	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	3306      	adds	r3, #6
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	b29a      	uxth	r2, r3
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	3307      	adds	r3, #7
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	b29b      	uxth	r3, r3
 8008798:	021b      	lsls	r3, r3, #8
 800879a:	b29b      	uxth	r3, r3
 800879c:	4413      	add	r3, r2
 800879e:	b29a      	uxth	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	80da      	strh	r2, [r3, #6]

}
 80087a4:	bf00      	nop
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bc80      	pop	{r7}
 80087ac:	4770      	bx	lr

080087ae <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b082      	sub	sp, #8
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
 80087b6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80087b8:	2180      	movs	r1, #128	; 0x80
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fc42 	bl	8009044 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80087c0:	2100      	movs	r1, #0
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 fc3e 	bl	8009044 <USBD_LL_StallEP>
}
 80087c8:	bf00      	nop
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80087dc:	2300      	movs	r3, #0
 80087de:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d032      	beq.n	800884c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80087e6:	68f8      	ldr	r0, [r7, #12]
 80087e8:	f000 f834 	bl	8008854 <USBD_GetLen>
 80087ec:	4603      	mov	r3, r0
 80087ee:	3301      	adds	r3, #1
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	005b      	lsls	r3, r3, #1
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80087fa:	7dfb      	ldrb	r3, [r7, #23]
 80087fc:	1c5a      	adds	r2, r3, #1
 80087fe:	75fa      	strb	r2, [r7, #23]
 8008800:	461a      	mov	r2, r3
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	4413      	add	r3, r2
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	7812      	ldrb	r2, [r2, #0]
 800880a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800880c:	7dfb      	ldrb	r3, [r7, #23]
 800880e:	1c5a      	adds	r2, r3, #1
 8008810:	75fa      	strb	r2, [r7, #23]
 8008812:	461a      	mov	r2, r3
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	4413      	add	r3, r2
 8008818:	2203      	movs	r2, #3
 800881a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800881c:	e012      	b.n	8008844 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	1c5a      	adds	r2, r3, #1
 8008822:	60fa      	str	r2, [r7, #12]
 8008824:	7dfa      	ldrb	r2, [r7, #23]
 8008826:	1c51      	adds	r1, r2, #1
 8008828:	75f9      	strb	r1, [r7, #23]
 800882a:	4611      	mov	r1, r2
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	440a      	add	r2, r1
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008834:	7dfb      	ldrb	r3, [r7, #23]
 8008836:	1c5a      	adds	r2, r3, #1
 8008838:	75fa      	strb	r2, [r7, #23]
 800883a:	461a      	mov	r2, r3
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	4413      	add	r3, r2
 8008840:	2200      	movs	r2, #0
 8008842:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1e8      	bne.n	800881e <USBD_GetString+0x4e>
    }
  }
}
 800884c:	bf00      	nop
 800884e:	3718      	adds	r7, #24
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800885c:	2300      	movs	r3, #0
 800885e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008860:	e005      	b.n	800886e <USBD_GetLen+0x1a>
  {
    len++;
 8008862:	7bfb      	ldrb	r3, [r7, #15]
 8008864:	3301      	adds	r3, #1
 8008866:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	3301      	adds	r3, #1
 800886c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1f5      	bne.n	8008862 <USBD_GetLen+0xe>
  }

  return len;
 8008876:	7bfb      	ldrb	r3, [r7, #15]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	bc80      	pop	{r7}
 8008880:	4770      	bx	lr

08008882 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b084      	sub	sp, #16
 8008886:	af00      	add	r7, sp, #0
 8008888:	60f8      	str	r0, [r7, #12]
 800888a:	60b9      	str	r1, [r7, #8]
 800888c:	4613      	mov	r3, r2
 800888e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2202      	movs	r2, #2
 8008894:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008898:	88fa      	ldrh	r2, [r7, #6]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800889e:	88fa      	ldrh	r2, [r7, #6]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088a4:	88fb      	ldrh	r3, [r7, #6]
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	2100      	movs	r1, #0
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f000 fc53 	bl	8009156 <USBD_LL_Transmit>

  return USBD_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b084      	sub	sp, #16
 80088be:	af00      	add	r7, sp, #0
 80088c0:	60f8      	str	r0, [r7, #12]
 80088c2:	60b9      	str	r1, [r7, #8]
 80088c4:	4613      	mov	r3, r2
 80088c6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088c8:	88fb      	ldrh	r3, [r7, #6]
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	2100      	movs	r1, #0
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f000 fc41 	bl	8009156 <USBD_LL_Transmit>

  return USBD_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b084      	sub	sp, #16
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	60f8      	str	r0, [r7, #12]
 80088e6:	60b9      	str	r1, [r7, #8]
 80088e8:	4613      	mov	r3, r2
 80088ea:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2203      	movs	r2, #3
 80088f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80088f4:	88fa      	ldrh	r2, [r7, #6]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80088fc:	88fa      	ldrh	r2, [r7, #6]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008904:	88fb      	ldrh	r3, [r7, #6]
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	2100      	movs	r1, #0
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f000 fc46 	bl	800919c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b084      	sub	sp, #16
 800891e:	af00      	add	r7, sp, #0
 8008920:	60f8      	str	r0, [r7, #12]
 8008922:	60b9      	str	r1, [r7, #8]
 8008924:	4613      	mov	r3, r2
 8008926:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008928:	88fb      	ldrh	r3, [r7, #6]
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	2100      	movs	r1, #0
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	f000 fc34 	bl	800919c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b082      	sub	sp, #8
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2204      	movs	r2, #4
 800894a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800894e:	2300      	movs	r3, #0
 8008950:	2200      	movs	r2, #0
 8008952:	2100      	movs	r1, #0
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 fbfe 	bl	8009156 <USBD_LL_Transmit>

  return USBD_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2205      	movs	r2, #5
 8008970:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008974:	2300      	movs	r3, #0
 8008976:	2200      	movs	r2, #0
 8008978:	2100      	movs	r1, #0
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fc0e 	bl	800919c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
	...

0800898c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008990:	2200      	movs	r2, #0
 8008992:	4912      	ldr	r1, [pc, #72]	; (80089dc <MX_USB_DEVICE_Init+0x50>)
 8008994:	4812      	ldr	r0, [pc, #72]	; (80089e0 <MX_USB_DEVICE_Init+0x54>)
 8008996:	f7fe ff5f 	bl	8007858 <USBD_Init>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80089a0:	f7f8 fb18 	bl	8000fd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80089a4:	490f      	ldr	r1, [pc, #60]	; (80089e4 <MX_USB_DEVICE_Init+0x58>)
 80089a6:	480e      	ldr	r0, [pc, #56]	; (80089e0 <MX_USB_DEVICE_Init+0x54>)
 80089a8:	f7fe ff81 	bl	80078ae <USBD_RegisterClass>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80089b2:	f7f8 fb0f 	bl	8000fd4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80089b6:	490c      	ldr	r1, [pc, #48]	; (80089e8 <MX_USB_DEVICE_Init+0x5c>)
 80089b8:	4809      	ldr	r0, [pc, #36]	; (80089e0 <MX_USB_DEVICE_Init+0x54>)
 80089ba:	f7fe fee1 	bl	8007780 <USBD_CDC_RegisterInterface>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80089c4:	f7f8 fb06 	bl	8000fd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80089c8:	4805      	ldr	r0, [pc, #20]	; (80089e0 <MX_USB_DEVICE_Init+0x54>)
 80089ca:	f7fe ff89 	bl	80078e0 <USBD_Start>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80089d4:	f7f8 fafe 	bl	8000fd4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80089d8:	bf00      	nop
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	2000012c 	.word	0x2000012c
 80089e0:	20000350 	.word	0x20000350
 80089e4:	20000018 	.word	0x20000018
 80089e8:	2000011c 	.word	0x2000011c

080089ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80089f0:	2200      	movs	r2, #0
 80089f2:	4905      	ldr	r1, [pc, #20]	; (8008a08 <CDC_Init_FS+0x1c>)
 80089f4:	4805      	ldr	r0, [pc, #20]	; (8008a0c <CDC_Init_FS+0x20>)
 80089f6:	f7fe fed9 	bl	80077ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80089fa:	4905      	ldr	r1, [pc, #20]	; (8008a10 <CDC_Init_FS+0x24>)
 80089fc:	4803      	ldr	r0, [pc, #12]	; (8008a0c <CDC_Init_FS+0x20>)
 80089fe:	f7fe feee 	bl	80077de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008a02:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	20000654 	.word	0x20000654
 8008a0c:	20000350 	.word	0x20000350
 8008a10:	20000614 	.word	0x20000614

08008a14 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008a14:	b480      	push	{r7}
 8008a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a18:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bc80      	pop	{r7}
 8008a20:	4770      	bx	lr
	...

08008a24 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	6039      	str	r1, [r7, #0]
 8008a2e:	71fb      	strb	r3, [r7, #7]
 8008a30:	4613      	mov	r3, r2
 8008a32:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008a34:	79fb      	ldrb	r3, [r7, #7]
 8008a36:	2b23      	cmp	r3, #35	; 0x23
 8008a38:	d84a      	bhi.n	8008ad0 <CDC_Control_FS+0xac>
 8008a3a:	a201      	add	r2, pc, #4	; (adr r2, 8008a40 <CDC_Control_FS+0x1c>)
 8008a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a40:	08008ad1 	.word	0x08008ad1
 8008a44:	08008ad1 	.word	0x08008ad1
 8008a48:	08008ad1 	.word	0x08008ad1
 8008a4c:	08008ad1 	.word	0x08008ad1
 8008a50:	08008ad1 	.word	0x08008ad1
 8008a54:	08008ad1 	.word	0x08008ad1
 8008a58:	08008ad1 	.word	0x08008ad1
 8008a5c:	08008ad1 	.word	0x08008ad1
 8008a60:	08008ad1 	.word	0x08008ad1
 8008a64:	08008ad1 	.word	0x08008ad1
 8008a68:	08008ad1 	.word	0x08008ad1
 8008a6c:	08008ad1 	.word	0x08008ad1
 8008a70:	08008ad1 	.word	0x08008ad1
 8008a74:	08008ad1 	.word	0x08008ad1
 8008a78:	08008ad1 	.word	0x08008ad1
 8008a7c:	08008ad1 	.word	0x08008ad1
 8008a80:	08008ad1 	.word	0x08008ad1
 8008a84:	08008ad1 	.word	0x08008ad1
 8008a88:	08008ad1 	.word	0x08008ad1
 8008a8c:	08008ad1 	.word	0x08008ad1
 8008a90:	08008ad1 	.word	0x08008ad1
 8008a94:	08008ad1 	.word	0x08008ad1
 8008a98:	08008ad1 	.word	0x08008ad1
 8008a9c:	08008ad1 	.word	0x08008ad1
 8008aa0:	08008ad1 	.word	0x08008ad1
 8008aa4:	08008ad1 	.word	0x08008ad1
 8008aa8:	08008ad1 	.word	0x08008ad1
 8008aac:	08008ad1 	.word	0x08008ad1
 8008ab0:	08008ad1 	.word	0x08008ad1
 8008ab4:	08008ad1 	.word	0x08008ad1
 8008ab8:	08008ad1 	.word	0x08008ad1
 8008abc:	08008ad1 	.word	0x08008ad1
 8008ac0:	08008ad1 	.word	0x08008ad1
 8008ac4:	08008ad1 	.word	0x08008ad1
 8008ac8:	08008ad1 	.word	0x08008ad1
 8008acc:	08008ad1 	.word	0x08008ad1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008ad0:	bf00      	nop
  }

  return (USBD_OK);
 8008ad2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bc80      	pop	{r7}
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop

08008ae0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008aea:	6879      	ldr	r1, [r7, #4]
 8008aec:	480e      	ldr	r0, [pc, #56]	; (8008b28 <CDC_Receive_FS+0x48>)
 8008aee:	f7fe fe76 	bl	80077de <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008af2:	480d      	ldr	r0, [pc, #52]	; (8008b28 <CDC_Receive_FS+0x48>)
 8008af4:	f7fe fe86 	bl	8007804 <USBD_CDC_ReceivePacket>

  if (*Len) {
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00d      	beq.n	8008b1c <CDC_Receive_FS+0x3c>
	  memcpy(RX_buffer, Buf, *Len);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	461a      	mov	r2, r3
 8008b06:	6879      	ldr	r1, [r7, #4]
 8008b08:	4808      	ldr	r0, [pc, #32]	; (8008b2c <CDC_Receive_FS+0x4c>)
 8008b0a:	f000 fbed 	bl	80092e8 <memcpy>
	  memset(Buf, '\0', *Len);
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	461a      	mov	r2, r3
 8008b14:	2100      	movs	r1, #0
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fbf4 	bl	8009304 <memset>
  }

  return (USBD_OK);
 8008b1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	20000350 	.word	0x20000350
 8008b2c:	20000238 	.word	0x20000238

08008b30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	4603      	mov	r3, r0
 8008b38:	6039      	str	r1, [r7, #0]
 8008b3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	2212      	movs	r2, #18
 8008b40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008b42:	4b03      	ldr	r3, [pc, #12]	; (8008b50 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bc80      	pop	{r7}
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop
 8008b50:	20000148 	.word	0x20000148

08008b54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	6039      	str	r1, [r7, #0]
 8008b5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	2204      	movs	r2, #4
 8008b64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b66:	4b03      	ldr	r3, [pc, #12]	; (8008b74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bc80      	pop	{r7}
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	2000015c 	.word	0x2000015c

08008b78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	4603      	mov	r3, r0
 8008b80:	6039      	str	r1, [r7, #0]
 8008b82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b84:	79fb      	ldrb	r3, [r7, #7]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d105      	bne.n	8008b96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b8a:	683a      	ldr	r2, [r7, #0]
 8008b8c:	4907      	ldr	r1, [pc, #28]	; (8008bac <USBD_FS_ProductStrDescriptor+0x34>)
 8008b8e:	4808      	ldr	r0, [pc, #32]	; (8008bb0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b90:	f7ff fe1e 	bl	80087d0 <USBD_GetString>
 8008b94:	e004      	b.n	8008ba0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b96:	683a      	ldr	r2, [r7, #0]
 8008b98:	4904      	ldr	r1, [pc, #16]	; (8008bac <USBD_FS_ProductStrDescriptor+0x34>)
 8008b9a:	4805      	ldr	r0, [pc, #20]	; (8008bb0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b9c:	f7ff fe18 	bl	80087d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ba0:	4b02      	ldr	r3, [pc, #8]	; (8008bac <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3708      	adds	r7, #8
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	20000694 	.word	0x20000694
 8008bb0:	0800933c 	.word	0x0800933c

08008bb4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	4603      	mov	r3, r0
 8008bbc:	6039      	str	r1, [r7, #0]
 8008bbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008bc0:	683a      	ldr	r2, [r7, #0]
 8008bc2:	4904      	ldr	r1, [pc, #16]	; (8008bd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008bc4:	4804      	ldr	r0, [pc, #16]	; (8008bd8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008bc6:	f7ff fe03 	bl	80087d0 <USBD_GetString>
  return USBD_StrDesc;
 8008bca:	4b02      	ldr	r3, [pc, #8]	; (8008bd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	20000694 	.word	0x20000694
 8008bd8:	08009354 	.word	0x08009354

08008bdc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	4603      	mov	r3, r0
 8008be4:	6039      	str	r1, [r7, #0]
 8008be6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	221a      	movs	r2, #26
 8008bec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008bee:	f000 f843 	bl	8008c78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008bf2:	4b02      	ldr	r3, [pc, #8]	; (8008bfc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	20000160 	.word	0x20000160

08008c00 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	4603      	mov	r3, r0
 8008c08:	6039      	str	r1, [r7, #0]
 8008c0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c0c:	79fb      	ldrb	r3, [r7, #7]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d105      	bne.n	8008c1e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c12:	683a      	ldr	r2, [r7, #0]
 8008c14:	4907      	ldr	r1, [pc, #28]	; (8008c34 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c16:	4808      	ldr	r0, [pc, #32]	; (8008c38 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c18:	f7ff fdda 	bl	80087d0 <USBD_GetString>
 8008c1c:	e004      	b.n	8008c28 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	4904      	ldr	r1, [pc, #16]	; (8008c34 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c22:	4805      	ldr	r0, [pc, #20]	; (8008c38 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c24:	f7ff fdd4 	bl	80087d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c28:	4b02      	ldr	r3, [pc, #8]	; (8008c34 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	20000694 	.word	0x20000694
 8008c38:	08009368 	.word	0x08009368

08008c3c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	4603      	mov	r3, r0
 8008c44:	6039      	str	r1, [r7, #0]
 8008c46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c48:	79fb      	ldrb	r3, [r7, #7]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d105      	bne.n	8008c5a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	4907      	ldr	r1, [pc, #28]	; (8008c70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c52:	4808      	ldr	r0, [pc, #32]	; (8008c74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c54:	f7ff fdbc 	bl	80087d0 <USBD_GetString>
 8008c58:	e004      	b.n	8008c64 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	4904      	ldr	r1, [pc, #16]	; (8008c70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c5e:	4805      	ldr	r0, [pc, #20]	; (8008c74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c60:	f7ff fdb6 	bl	80087d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c64:	4b02      	ldr	r3, [pc, #8]	; (8008c70 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	20000694 	.word	0x20000694
 8008c74:	08009374 	.word	0x08009374

08008c78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c7e:	4b0f      	ldr	r3, [pc, #60]	; (8008cbc <Get_SerialNum+0x44>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c84:	4b0e      	ldr	r3, [pc, #56]	; (8008cc0 <Get_SerialNum+0x48>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c8a:	4b0e      	ldr	r3, [pc, #56]	; (8008cc4 <Get_SerialNum+0x4c>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	4413      	add	r3, r2
 8008c96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d009      	beq.n	8008cb2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c9e:	2208      	movs	r2, #8
 8008ca0:	4909      	ldr	r1, [pc, #36]	; (8008cc8 <Get_SerialNum+0x50>)
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f000 f814 	bl	8008cd0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ca8:	2204      	movs	r2, #4
 8008caa:	4908      	ldr	r1, [pc, #32]	; (8008ccc <Get_SerialNum+0x54>)
 8008cac:	68b8      	ldr	r0, [r7, #8]
 8008cae:	f000 f80f 	bl	8008cd0 <IntToUnicode>
  }
}
 8008cb2:	bf00      	nop
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	1ffff7e8 	.word	0x1ffff7e8
 8008cc0:	1ffff7ec 	.word	0x1ffff7ec
 8008cc4:	1ffff7f0 	.word	0x1ffff7f0
 8008cc8:	20000162 	.word	0x20000162
 8008ccc:	20000172 	.word	0x20000172

08008cd0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b087      	sub	sp, #28
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	75fb      	strb	r3, [r7, #23]
 8008ce6:	e027      	b.n	8008d38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	0f1b      	lsrs	r3, r3, #28
 8008cec:	2b09      	cmp	r3, #9
 8008cee:	d80b      	bhi.n	8008d08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	0f1b      	lsrs	r3, r3, #28
 8008cf4:	b2da      	uxtb	r2, r3
 8008cf6:	7dfb      	ldrb	r3, [r7, #23]
 8008cf8:	005b      	lsls	r3, r3, #1
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	440b      	add	r3, r1
 8008d00:	3230      	adds	r2, #48	; 0x30
 8008d02:	b2d2      	uxtb	r2, r2
 8008d04:	701a      	strb	r2, [r3, #0]
 8008d06:	e00a      	b.n	8008d1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	0f1b      	lsrs	r3, r3, #28
 8008d0c:	b2da      	uxtb	r2, r3
 8008d0e:	7dfb      	ldrb	r3, [r7, #23]
 8008d10:	005b      	lsls	r3, r3, #1
 8008d12:	4619      	mov	r1, r3
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	440b      	add	r3, r1
 8008d18:	3237      	adds	r2, #55	; 0x37
 8008d1a:	b2d2      	uxtb	r2, r2
 8008d1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	011b      	lsls	r3, r3, #4
 8008d22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d24:	7dfb      	ldrb	r3, [r7, #23]
 8008d26:	005b      	lsls	r3, r3, #1
 8008d28:	3301      	adds	r3, #1
 8008d2a:	68ba      	ldr	r2, [r7, #8]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	2200      	movs	r2, #0
 8008d30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d32:	7dfb      	ldrb	r3, [r7, #23]
 8008d34:	3301      	adds	r3, #1
 8008d36:	75fb      	strb	r3, [r7, #23]
 8008d38:	7dfa      	ldrb	r2, [r7, #23]
 8008d3a:	79fb      	ldrb	r3, [r7, #7]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d3d3      	bcc.n	8008ce8 <IntToUnicode+0x18>
  }
}
 8008d40:	bf00      	nop
 8008d42:	bf00      	nop
 8008d44:	371c      	adds	r7, #28
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bc80      	pop	{r7}
 8008d4a:	4770      	bx	lr

08008d4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a0d      	ldr	r2, [pc, #52]	; (8008d90 <HAL_PCD_MspInit+0x44>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d113      	bne.n	8008d86 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008d5e:	4b0d      	ldr	r3, [pc, #52]	; (8008d94 <HAL_PCD_MspInit+0x48>)
 8008d60:	69db      	ldr	r3, [r3, #28]
 8008d62:	4a0c      	ldr	r2, [pc, #48]	; (8008d94 <HAL_PCD_MspInit+0x48>)
 8008d64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008d68:	61d3      	str	r3, [r2, #28]
 8008d6a:	4b0a      	ldr	r3, [pc, #40]	; (8008d94 <HAL_PCD_MspInit+0x48>)
 8008d6c:	69db      	ldr	r3, [r3, #28]
 8008d6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d72:	60fb      	str	r3, [r7, #12]
 8008d74:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008d76:	2200      	movs	r2, #0
 8008d78:	2100      	movs	r1, #0
 8008d7a:	2014      	movs	r0, #20
 8008d7c:	f7f8 fb65 	bl	800144a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008d80:	2014      	movs	r0, #20
 8008d82:	f7f8 fb7e 	bl	8001482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008d86:	bf00      	nop
 8008d88:	3710      	adds	r7, #16
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	40005c00 	.word	0x40005c00
 8008d94:	40021000 	.word	0x40021000

08008d98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008dac:	4619      	mov	r1, r3
 8008dae:	4610      	mov	r0, r2
 8008db0:	f7fe fdde 	bl	8007970 <USBD_LL_SetupStage>
}
 8008db4:	bf00      	nop
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008dce:	78fa      	ldrb	r2, [r7, #3]
 8008dd0:	6879      	ldr	r1, [r7, #4]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4413      	add	r3, r2
 8008dd8:	00db      	lsls	r3, r3, #3
 8008dda:	440b      	add	r3, r1
 8008ddc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	78fb      	ldrb	r3, [r7, #3]
 8008de4:	4619      	mov	r1, r3
 8008de6:	f7fe fe10 	bl	8007a0a <USBD_LL_DataOutStage>
}
 8008dea:	bf00      	nop
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b082      	sub	sp, #8
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008e04:	78fa      	ldrb	r2, [r7, #3]
 8008e06:	6879      	ldr	r1, [r7, #4]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	00db      	lsls	r3, r3, #3
 8008e10:	440b      	add	r3, r1
 8008e12:	333c      	adds	r3, #60	; 0x3c
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	78fb      	ldrb	r3, [r7, #3]
 8008e18:	4619      	mov	r1, r3
 8008e1a:	f7fe fe67 	bl	8007aec <USBD_LL_DataInStage>
}
 8008e1e:	bf00      	nop
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b082      	sub	sp, #8
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7fe ff77 	bl	8007d28 <USBD_LL_SOF>
}
 8008e3a:	bf00      	nop
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b084      	sub	sp, #16
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d001      	beq.n	8008e5a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e56:	f7f8 f8bd 	bl	8000fd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008e60:	7bfa      	ldrb	r2, [r7, #15]
 8008e62:	4611      	mov	r1, r2
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7fe ff27 	bl	8007cb8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7fe fee0 	bl	8007c36 <USBD_LL_Reset>
}
 8008e76:	bf00      	nop
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
	...

08008e80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fe ff21 	bl	8007cd6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d005      	beq.n	8008ea8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e9c:	4b04      	ldr	r3, [pc, #16]	; (8008eb0 <HAL_PCD_SuspendCallback+0x30>)
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	4a03      	ldr	r2, [pc, #12]	; (8008eb0 <HAL_PCD_SuspendCallback+0x30>)
 8008ea2:	f043 0306 	orr.w	r3, r3, #6
 8008ea6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ea8:	bf00      	nop
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	e000ed00 	.word	0xe000ed00

08008eb4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fe ff1b 	bl	8007cfe <USBD_LL_Resume>
}
 8008ec8:	bf00      	nop
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008ed8:	4a28      	ldr	r2, [pc, #160]	; (8008f7c <USBD_LL_Init+0xac>)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a26      	ldr	r2, [pc, #152]	; (8008f7c <USBD_LL_Init+0xac>)
 8008ee4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008ee8:	4b24      	ldr	r3, [pc, #144]	; (8008f7c <USBD_LL_Init+0xac>)
 8008eea:	4a25      	ldr	r2, [pc, #148]	; (8008f80 <USBD_LL_Init+0xb0>)
 8008eec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008eee:	4b23      	ldr	r3, [pc, #140]	; (8008f7c <USBD_LL_Init+0xac>)
 8008ef0:	2208      	movs	r2, #8
 8008ef2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008ef4:	4b21      	ldr	r3, [pc, #132]	; (8008f7c <USBD_LL_Init+0xac>)
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008efa:	4b20      	ldr	r3, [pc, #128]	; (8008f7c <USBD_LL_Init+0xac>)
 8008efc:	2200      	movs	r2, #0
 8008efe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008f00:	4b1e      	ldr	r3, [pc, #120]	; (8008f7c <USBD_LL_Init+0xac>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008f06:	4b1d      	ldr	r3, [pc, #116]	; (8008f7c <USBD_LL_Init+0xac>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008f0c:	481b      	ldr	r0, [pc, #108]	; (8008f7c <USBD_LL_Init+0xac>)
 8008f0e:	f7f8 fc6f 	bl	80017f0 <HAL_PCD_Init>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d001      	beq.n	8008f1c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008f18:	f7f8 f85c 	bl	8000fd4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f22:	2318      	movs	r3, #24
 8008f24:	2200      	movs	r2, #0
 8008f26:	2100      	movs	r1, #0
 8008f28:	f7fa f8e3 	bl	80030f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f32:	2358      	movs	r3, #88	; 0x58
 8008f34:	2200      	movs	r2, #0
 8008f36:	2180      	movs	r1, #128	; 0x80
 8008f38:	f7fa f8db 	bl	80030f2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f42:	23c0      	movs	r3, #192	; 0xc0
 8008f44:	2200      	movs	r2, #0
 8008f46:	2181      	movs	r1, #129	; 0x81
 8008f48:	f7fa f8d3 	bl	80030f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f52:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008f56:	2200      	movs	r2, #0
 8008f58:	2101      	movs	r1, #1
 8008f5a:	f7fa f8ca 	bl	80030f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f68:	2200      	movs	r2, #0
 8008f6a:	2182      	movs	r1, #130	; 0x82
 8008f6c:	f7fa f8c1 	bl	80030f2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20000894 	.word	0x20000894
 8008f80:	40005c00 	.word	0x40005c00

08008f84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7f8 fd33 	bl	8001a06 <HAL_PCD_Start>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 f94e 	bl	8009248 <USBD_Get_USB_Status>
 8008fac:	4603      	mov	r3, r0
 8008fae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b084      	sub	sp, #16
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	4608      	mov	r0, r1
 8008fc4:	4611      	mov	r1, r2
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	4603      	mov	r3, r0
 8008fca:	70fb      	strb	r3, [r7, #3]
 8008fcc:	460b      	mov	r3, r1
 8008fce:	70bb      	strb	r3, [r7, #2]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008fe2:	78bb      	ldrb	r3, [r7, #2]
 8008fe4:	883a      	ldrh	r2, [r7, #0]
 8008fe6:	78f9      	ldrb	r1, [r7, #3]
 8008fe8:	f7f8 feab 	bl	8001d42 <HAL_PCD_EP_Open>
 8008fec:	4603      	mov	r3, r0
 8008fee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ff0:	7bfb      	ldrb	r3, [r7, #15]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 f928 	bl	8009248 <USBD_Get_USB_Status>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ffc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	460b      	mov	r3, r1
 8009010:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009012:	2300      	movs	r3, #0
 8009014:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009020:	78fa      	ldrb	r2, [r7, #3]
 8009022:	4611      	mov	r1, r2
 8009024:	4618      	mov	r0, r3
 8009026:	f7f8 fef2 	bl	8001e0e <HAL_PCD_EP_Close>
 800902a:	4603      	mov	r3, r0
 800902c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800902e:	7bfb      	ldrb	r3, [r7, #15]
 8009030:	4618      	mov	r0, r3
 8009032:	f000 f909 	bl	8009248 <USBD_Get_USB_Status>
 8009036:	4603      	mov	r3, r0
 8009038:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800903a:	7bbb      	ldrb	r3, [r7, #14]
}
 800903c:	4618      	mov	r0, r3
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	460b      	mov	r3, r1
 800904e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009050:	2300      	movs	r3, #0
 8009052:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800905e:	78fa      	ldrb	r2, [r7, #3]
 8009060:	4611      	mov	r1, r2
 8009062:	4618      	mov	r0, r3
 8009064:	f7f8 ffb2 	bl	8001fcc <HAL_PCD_EP_SetStall>
 8009068:	4603      	mov	r3, r0
 800906a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800906c:	7bfb      	ldrb	r3, [r7, #15]
 800906e:	4618      	mov	r0, r3
 8009070:	f000 f8ea 	bl	8009248 <USBD_Get_USB_Status>
 8009074:	4603      	mov	r3, r0
 8009076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009078:	7bbb      	ldrb	r3, [r7, #14]
}
 800907a:	4618      	mov	r0, r3
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b084      	sub	sp, #16
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	460b      	mov	r3, r1
 800908c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800908e:	2300      	movs	r3, #0
 8009090:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800909c:	78fa      	ldrb	r2, [r7, #3]
 800909e:	4611      	mov	r1, r2
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7f8 fff3 	bl	800208c <HAL_PCD_EP_ClrStall>
 80090a6:	4603      	mov	r3, r0
 80090a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090aa:	7bfb      	ldrb	r3, [r7, #15]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 f8cb 	bl	8009248 <USBD_Get_USB_Status>
 80090b2:	4603      	mov	r3, r0
 80090b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	460b      	mov	r3, r1
 80090ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80090d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	da0c      	bge.n	80090f6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80090dc:	78fb      	ldrb	r3, [r7, #3]
 80090de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090e2:	68f9      	ldr	r1, [r7, #12]
 80090e4:	1c5a      	adds	r2, r3, #1
 80090e6:	4613      	mov	r3, r2
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	4413      	add	r3, r2
 80090ec:	00db      	lsls	r3, r3, #3
 80090ee:	440b      	add	r3, r1
 80090f0:	3302      	adds	r3, #2
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	e00b      	b.n	800910e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80090f6:	78fb      	ldrb	r3, [r7, #3]
 80090f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090fc:	68f9      	ldr	r1, [r7, #12]
 80090fe:	4613      	mov	r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	4413      	add	r3, r2
 8009104:	00db      	lsls	r3, r3, #3
 8009106:	440b      	add	r3, r1
 8009108:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800910c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800910e:	4618      	mov	r0, r3
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	bc80      	pop	{r7}
 8009116:	4770      	bx	lr

08009118 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	460b      	mov	r3, r1
 8009122:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009124:	2300      	movs	r3, #0
 8009126:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009128:	2300      	movs	r3, #0
 800912a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009132:	78fa      	ldrb	r2, [r7, #3]
 8009134:	4611      	mov	r1, r2
 8009136:	4618      	mov	r0, r3
 8009138:	f7f8 fdde 	bl	8001cf8 <HAL_PCD_SetAddress>
 800913c:	4603      	mov	r3, r0
 800913e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009140:	7bfb      	ldrb	r3, [r7, #15]
 8009142:	4618      	mov	r0, r3
 8009144:	f000 f880 	bl	8009248 <USBD_Get_USB_Status>
 8009148:	4603      	mov	r3, r0
 800914a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800914c:	7bbb      	ldrb	r3, [r7, #14]
}
 800914e:	4618      	mov	r0, r3
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b086      	sub	sp, #24
 800915a:	af00      	add	r7, sp, #0
 800915c:	60f8      	str	r0, [r7, #12]
 800915e:	607a      	str	r2, [r7, #4]
 8009160:	461a      	mov	r2, r3
 8009162:	460b      	mov	r3, r1
 8009164:	72fb      	strb	r3, [r7, #11]
 8009166:	4613      	mov	r3, r2
 8009168:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009178:	893b      	ldrh	r3, [r7, #8]
 800917a:	7af9      	ldrb	r1, [r7, #11]
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	f7f8 fee2 	bl	8001f46 <HAL_PCD_EP_Transmit>
 8009182:	4603      	mov	r3, r0
 8009184:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009186:	7dfb      	ldrb	r3, [r7, #23]
 8009188:	4618      	mov	r0, r3
 800918a:	f000 f85d 	bl	8009248 <USBD_Get_USB_Status>
 800918e:	4603      	mov	r3, r0
 8009190:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009192:	7dbb      	ldrb	r3, [r7, #22]
}
 8009194:	4618      	mov	r0, r3
 8009196:	3718      	adds	r7, #24
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b086      	sub	sp, #24
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	607a      	str	r2, [r7, #4]
 80091a6:	461a      	mov	r2, r3
 80091a8:	460b      	mov	r3, r1
 80091aa:	72fb      	strb	r3, [r7, #11]
 80091ac:	4613      	mov	r3, r2
 80091ae:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091be:	893b      	ldrh	r3, [r7, #8]
 80091c0:	7af9      	ldrb	r1, [r7, #11]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	f7f8 fe6b 	bl	8001e9e <HAL_PCD_EP_Receive>
 80091c8:	4603      	mov	r3, r0
 80091ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091cc:	7dfb      	ldrb	r3, [r7, #23]
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 f83a 	bl	8009248 <USBD_Get_USB_Status>
 80091d4:	4603      	mov	r3, r0
 80091d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3718      	adds	r7, #24
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b082      	sub	sp, #8
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	460b      	mov	r3, r1
 80091ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091f4:	78fa      	ldrb	r2, [r7, #3]
 80091f6:	4611      	mov	r1, r2
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7f8 fe8d 	bl	8001f18 <HAL_PCD_EP_GetRxCount>
 80091fe:	4603      	mov	r3, r0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009210:	4b02      	ldr	r3, [pc, #8]	; (800921c <USBD_static_malloc+0x14>)
}
 8009212:	4618      	mov	r0, r3
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	bc80      	pop	{r7}
 800921a:	4770      	bx	lr
 800921c:	20000b80 	.word	0x20000b80

08009220 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]

}
 8009228:	bf00      	nop
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	bc80      	pop	{r7}
 8009230:	4770      	bx	lr

08009232 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009232:	b480      	push	{r7}
 8009234:	b083      	sub	sp, #12
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	460b      	mov	r3, r1
 800923c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800923e:	bf00      	nop
 8009240:	370c      	adds	r7, #12
 8009242:	46bd      	mov	sp, r7
 8009244:	bc80      	pop	{r7}
 8009246:	4770      	bx	lr

08009248 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009248:	b480      	push	{r7}
 800924a:	b085      	sub	sp, #20
 800924c:	af00      	add	r7, sp, #0
 800924e:	4603      	mov	r3, r0
 8009250:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009252:	2300      	movs	r3, #0
 8009254:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009256:	79fb      	ldrb	r3, [r7, #7]
 8009258:	2b03      	cmp	r3, #3
 800925a:	d817      	bhi.n	800928c <USBD_Get_USB_Status+0x44>
 800925c:	a201      	add	r2, pc, #4	; (adr r2, 8009264 <USBD_Get_USB_Status+0x1c>)
 800925e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009262:	bf00      	nop
 8009264:	08009275 	.word	0x08009275
 8009268:	0800927b 	.word	0x0800927b
 800926c:	08009281 	.word	0x08009281
 8009270:	08009287 	.word	0x08009287
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009274:	2300      	movs	r3, #0
 8009276:	73fb      	strb	r3, [r7, #15]
    break;
 8009278:	e00b      	b.n	8009292 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800927a:	2302      	movs	r3, #2
 800927c:	73fb      	strb	r3, [r7, #15]
    break;
 800927e:	e008      	b.n	8009292 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009280:	2301      	movs	r3, #1
 8009282:	73fb      	strb	r3, [r7, #15]
    break;
 8009284:	e005      	b.n	8009292 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009286:	2302      	movs	r3, #2
 8009288:	73fb      	strb	r3, [r7, #15]
    break;
 800928a:	e002      	b.n	8009292 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800928c:	2302      	movs	r3, #2
 800928e:	73fb      	strb	r3, [r7, #15]
    break;
 8009290:	bf00      	nop
  }
  return usb_status;
 8009292:	7bfb      	ldrb	r3, [r7, #15]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	bc80      	pop	{r7}
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop

080092a0 <__libc_init_array>:
 80092a0:	b570      	push	{r4, r5, r6, lr}
 80092a2:	2600      	movs	r6, #0
 80092a4:	4d0c      	ldr	r5, [pc, #48]	; (80092d8 <__libc_init_array+0x38>)
 80092a6:	4c0d      	ldr	r4, [pc, #52]	; (80092dc <__libc_init_array+0x3c>)
 80092a8:	1b64      	subs	r4, r4, r5
 80092aa:	10a4      	asrs	r4, r4, #2
 80092ac:	42a6      	cmp	r6, r4
 80092ae:	d109      	bne.n	80092c4 <__libc_init_array+0x24>
 80092b0:	f000 f830 	bl	8009314 <_init>
 80092b4:	2600      	movs	r6, #0
 80092b6:	4d0a      	ldr	r5, [pc, #40]	; (80092e0 <__libc_init_array+0x40>)
 80092b8:	4c0a      	ldr	r4, [pc, #40]	; (80092e4 <__libc_init_array+0x44>)
 80092ba:	1b64      	subs	r4, r4, r5
 80092bc:	10a4      	asrs	r4, r4, #2
 80092be:	42a6      	cmp	r6, r4
 80092c0:	d105      	bne.n	80092ce <__libc_init_array+0x2e>
 80092c2:	bd70      	pop	{r4, r5, r6, pc}
 80092c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80092c8:	4798      	blx	r3
 80092ca:	3601      	adds	r6, #1
 80092cc:	e7ee      	b.n	80092ac <__libc_init_array+0xc>
 80092ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80092d2:	4798      	blx	r3
 80092d4:	3601      	adds	r6, #1
 80092d6:	e7f2      	b.n	80092be <__libc_init_array+0x1e>
 80092d8:	0800939c 	.word	0x0800939c
 80092dc:	0800939c 	.word	0x0800939c
 80092e0:	0800939c 	.word	0x0800939c
 80092e4:	080093a0 	.word	0x080093a0

080092e8 <memcpy>:
 80092e8:	440a      	add	r2, r1
 80092ea:	4291      	cmp	r1, r2
 80092ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80092f0:	d100      	bne.n	80092f4 <memcpy+0xc>
 80092f2:	4770      	bx	lr
 80092f4:	b510      	push	{r4, lr}
 80092f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092fa:	4291      	cmp	r1, r2
 80092fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009300:	d1f9      	bne.n	80092f6 <memcpy+0xe>
 8009302:	bd10      	pop	{r4, pc}

08009304 <memset>:
 8009304:	4603      	mov	r3, r0
 8009306:	4402      	add	r2, r0
 8009308:	4293      	cmp	r3, r2
 800930a:	d100      	bne.n	800930e <memset+0xa>
 800930c:	4770      	bx	lr
 800930e:	f803 1b01 	strb.w	r1, [r3], #1
 8009312:	e7f9      	b.n	8009308 <memset+0x4>

08009314 <_init>:
 8009314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009316:	bf00      	nop
 8009318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800931a:	bc08      	pop	{r3}
 800931c:	469e      	mov	lr, r3
 800931e:	4770      	bx	lr

08009320 <_fini>:
 8009320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009322:	bf00      	nop
 8009324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009326:	bc08      	pop	{r3}
 8009328:	469e      	mov	lr, r3
 800932a:	4770      	bx	lr
